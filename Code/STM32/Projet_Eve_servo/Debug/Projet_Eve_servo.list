
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005070  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  080053a4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  080053a4  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e97d  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001c53  00000000  00000000  0002e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000a28  00000000  00000000  00030658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000007d0  00000000  00000000  00031080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002e20e  00000000  00000000  00031850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ea2a  00000000  00000000  0005fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013278a  00000000  00000000  0006e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002980  00000000  00000000  001a0c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001a3594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005304 	.word	0x08005304

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005304 	.word	0x08005304

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b0a7      	sub	sp, #156	; 0x9c
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 faab 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f82b 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8e9 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 f89b 	bl	8000734 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /*toogle LED*/
  uint8_t Dynamixel_ToogleLED_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0x54>)
 8000600:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	c407      	stmia	r4!, {r0, r1, r2}
 8000608:	7023      	strb	r3, [r4, #0]
  Dynamixel_ToogleLED_XL430[array_size-2]=crc_l;
  Dynamixel_ToogleLED_XL430[array_size-1]=crc_h;

*/
  /*change position to 90*/
  uint8_t Dynamixel_ChangePosition_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x09, 0x00,/*type instruction, ici write*/0x03
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <main+0x58>)
 800060c:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   		  /*débutparam, address 116:*/ ,0x74,0x00
   		  /*value in the address : 2048*/,0x00,0x08,0x00,0x00
     	  	  /*CRC*/				,0xCA,0x89};

  /*autorise le moteur a tourner ( pas de transimission/récpetion possible dans ce mode*/
    uint8_t Dynamixel_RotateMode_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <main+0x5c>)
 8000618:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800061c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061e:	c407      	stmia	r4!, {r0, r1, r2}
 8000620:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  HAL_UART_Transmit(&huart3, Dynamixel_ToogleLED_XL430, sizeof(Dynamixel_ToogleLED_XL430), 10);
 8000622:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000626:	230a      	movs	r3, #10
 8000628:	220d      	movs	r2, #13
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <main+0x60>)
 800062c:	f003 fc26 	bl	8003e7c <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000634:	f000 fb1a 	bl	8000c6c <HAL_Delay>
	  HAL_UART_Transmit(&huart3, Dynamixel_ToogleLED_XL430, sizeof(Dynamixel_ToogleLED_XL430), 10);
 8000638:	e7f3      	b.n	8000622 <main+0x3a>
 800063a:	bf00      	nop
 800063c:	0800531c 	.word	0x0800531c
 8000640:	0800532c 	.word	0x0800532c
 8000644:	0800533c 	.word	0x0800533c
 8000648:	2400002c 	.word	0x2400002c

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09c      	sub	sp, #112	; 0x70
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	224c      	movs	r2, #76	; 0x4c
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fe26 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fe20 	bl	80052ac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <SystemClock_Config+0xe0>)
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000676:	2004      	movs	r0, #4
 8000678:	f000 fdb0 	bl	80011dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <SystemClock_Config+0xe4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <SystemClock_Config+0xe4>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xe4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000698:	bf00      	nop
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xe4>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a6:	d1f8      	bne.n	800069a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006be:	2318      	movs	r3, #24
 80006c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ce:	230c      	movs	r3, #12
 80006d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fdd6 	bl	8001290 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ea:	f000 f8c1 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	233f      	movs	r3, #63	; 0x3f
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f9ee 	bl	8001af4 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800071e:	f000 f8a7 	bl	8000870 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3770      	adds	r7, #112	; 0x70
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	58024400 	.word	0x58024400
 8000730:	58024800 	.word	0x58024800

08000734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800073a:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <MX_USART3_UART_Init+0x94>)
 800073c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800075a:	2208      	movs	r2, #8
 800075c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800077e:	f003 fb25 	bl	8003dcc <HAL_HalfDuplex_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000788:	f000 f872 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000790:	f004 fcc1 	bl	8005116 <HAL_UARTEx_SetTxFifoThreshold>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800079a:	f000 f869 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 80007a2:	f004 fcf6 	bl	8005192 <HAL_UARTEx_SetRxFifoThreshold>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007ac:	f000 f860 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 80007b2:	f004 fc77 	bl	80050a4 <HAL_UARTEx_DisableFifoMode>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007bc:	f000 f858 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2400002c 	.word	0x2400002c
 80007c8:	40004800 	.word	0x40004800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d8:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000810:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800084e:	2307      	movs	r3, #7
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xa0>)
 800085a:	f000 fb0f 	bl	8000e7c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	58024400 	.word	0x58024400
 800086c:	58020c00 	.word	0x58020c00

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_MspInit+0x30>)
 8000884:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000888:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x30>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x30>)
 8000894:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	58024400 	.word	0x58024400

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ba      	sub	sp, #232	; 0xe8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	22c0      	movs	r2, #192	; 0xc0
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 fceb 	bl	80052ac <memset>
  if(huart->Instance==USART3)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a32      	ldr	r2, [pc, #200]	; (80009a4 <HAL_UART_MspInit+0xf4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d15c      	bne.n	800099a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008e0:	f04f 0202 	mov.w	r2, #2
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fc88 	bl	800220c <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000902:	f7ff ffb5 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <HAL_UART_MspInit+0xf8>)
 8000908:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_UART_MspInit+0xf8>)
 800090e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000912:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_UART_MspInit+0xf8>)
 8000918:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800091c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <HAL_UART_MspInit+0xf8>)
 8000926:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_UART_MspInit+0xf8>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_UART_MspInit+0xf8>)
 8000936:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095c:	2307      	movs	r3, #7
 800095e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000966:	4619      	mov	r1, r3
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <HAL_UART_MspInit+0xfc>)
 800096a:	f000 fa87 	bl	8000e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 800096e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000988:	2307      	movs	r3, #7
 800098a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_UART_MspInit+0xfc>)
 8000996:	f000 fa71 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	37e8      	adds	r7, #232	; 0xe8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004800 	.word	0x40004800
 80009a8:	58024400 	.word	0x58024400
 80009ac:	58020c00 	.word	0x58020c00

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f916 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a08:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <SystemInit+0xd0>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a31      	ldr	r2, [pc, #196]	; (8000ad4 <SystemInit+0xd0>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a18:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <SystemInit+0xd4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 030f 	and.w	r3, r3, #15
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d807      	bhi.n	8000a34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <SystemInit+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f023 030f 	bic.w	r3, r3, #15
 8000a2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <SystemInit+0xd4>)
 8000a2e:	f043 0303 	orr.w	r3, r3, #3
 8000a32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemInit+0xd8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <SystemInit+0xd8>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <SystemInit+0xd8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <SystemInit+0xd8>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4924      	ldr	r1, [pc, #144]	; (8000adc <SystemInit+0xd8>)
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <SystemInit+0xdc>)
 8000a4e:	4013      	ands	r3, r2
 8000a50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <SystemInit+0xd4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f003 030c 	and.w	r3, r3, #12
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <SystemInit+0xd4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f023 030f 	bic.w	r3, r3, #15
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <SystemInit+0xd4>)
 8000a68:	f043 0303 	orr.w	r3, r3, #3
 8000a6c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <SystemInit+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <SystemInit+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <SystemInit+0xd8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <SystemInit+0xd8>)
 8000a82:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <SystemInit+0xe0>)
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <SystemInit+0xd8>)
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <SystemInit+0xe4>)
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <SystemInit+0xd8>)
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <SystemInit+0xe8>)
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <SystemInit+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <SystemInit+0xd8>)
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <SystemInit+0xe8>)
 8000a9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <SystemInit+0xd8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <SystemInit+0xd8>)
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <SystemInit+0xe8>)
 8000aa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <SystemInit+0xd8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <SystemInit+0xd8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <SystemInit+0xd8>)
 8000ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <SystemInit+0xd8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <SystemInit+0xec>)
 8000ac4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ac8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	52002000 	.word	0x52002000
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae4:	02020200 	.word	0x02020200
 8000ae8:	01ff0000 	.word	0x01ff0000
 8000aec:	01010280 	.word	0x01010280
 8000af0:	52004000 	.word	0x52004000

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af8:	f7ff ff84 	bl	8000a04 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	; (8000b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f004 fbcb 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd5f 	bl	80005e8 <main>
  bx  lr
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000b30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b34:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b38:	08005394 	.word	0x08005394
  ldr r2, =_sbss
 8000b3c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b40:	240000c4 	.word	0x240000c4

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f962 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000b54:	f001 f984 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_Init+0x68>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	4913      	ldr	r1, [pc, #76]	; (8000bb4 <HAL_Init+0x6c>)
 8000b66:	5ccb      	ldrb	r3, [r1, r3]
 8000b68:	f003 031f 	and.w	r3, r3, #31
 8000b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b70:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_Init+0x68>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_Init+0x6c>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	f003 031f 	and.w	r3, r3, #31
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_Init+0x70>)
 8000b8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_Init+0x74>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f814 	bl	8000bc0 <HAL_InitTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e002      	b.n	8000ba8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba2:	f7ff fe6b 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	0800534c 	.word	0x0800534c
 8000bb8:	24000004 	.word	0x24000004
 8000bbc:	24000000 	.word	0x24000000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_InitTick+0x60>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e021      	b.n	8000c18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_InitTick+0x64>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_InitTick+0x60>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f939 	bl	8000e62 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f911 	bl	8000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x68>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2400000c 	.word	0x2400000c
 8000c24:	24000000 	.word	0x24000000
 8000c28:	24000008 	.word	0x24000008

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2400000c 	.word	0x2400000c
 8000c50:	240000c0 	.word	0x240000c0

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	240000c0 	.word	0x240000c0

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2400000c 	.word	0x2400000c

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00
 8000cf8:	05fa0000 	.word	0x05fa0000

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff47 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff5e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff90 	bl	8000d6c <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5f 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb2 	bl	8000dd4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e8a:	4b89      	ldr	r3, [pc, #548]	; (80010b0 <HAL_GPIO_Init+0x234>)
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e8e:	e194      	b.n	80011ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8186 	beq.w	80011b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_GPIO_Init+0x44>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	f003 0201 	and.w	r2, r3, #1
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	69b9      	ldr	r1, [r7, #24]
 8000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0203 	and.w	r2, r3, #3
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80e0 	beq.w	80011b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x238>)
 8000ff6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x238>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_GPIO_Init+0x238>)
 8001006:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <HAL_GPIO_Init+0x23c>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <HAL_GPIO_Init+0x240>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d052      	beq.n	80010e4 <HAL_GPIO_Init+0x268>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <HAL_GPIO_Init+0x244>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d031      	beq.n	80010aa <HAL_GPIO_Init+0x22e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_GPIO_Init+0x248>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d02b      	beq.n	80010a6 <HAL_GPIO_Init+0x22a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_GPIO_Init+0x24c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d025      	beq.n	80010a2 <HAL_GPIO_Init+0x226>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_GPIO_Init+0x250>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d01f      	beq.n	800109e <HAL_GPIO_Init+0x222>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_GPIO_Init+0x254>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <HAL_GPIO_Init+0x258>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_GPIO_Init+0x25c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x216>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_GPIO_Init+0x260>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x212>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_GPIO_Init+0x264>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x20e>
 8001086:	2309      	movs	r3, #9
 8001088:	e02d      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800108a:	230a      	movs	r3, #10
 800108c:	e02b      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800108e:	2308      	movs	r3, #8
 8001090:	e029      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 8001092:	2307      	movs	r3, #7
 8001094:	e027      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 8001096:	2306      	movs	r3, #6
 8001098:	e025      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800109a:	2305      	movs	r3, #5
 800109c:	e023      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 800109e:	2304      	movs	r3, #4
 80010a0:	e021      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e01f      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e01d      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e01b      	b.n	80010e6 <HAL_GPIO_Init+0x26a>
 80010ae:	bf00      	nop
 80010b0:	58000080 	.word	0x58000080
 80010b4:	58024400 	.word	0x58024400
 80010b8:	58000400 	.word	0x58000400
 80010bc:	58020000 	.word	0x58020000
 80010c0:	58020400 	.word	0x58020400
 80010c4:	58020800 	.word	0x58020800
 80010c8:	58020c00 	.word	0x58020c00
 80010cc:	58021000 	.word	0x58021000
 80010d0:	58021400 	.word	0x58021400
 80010d4:	58021800 	.word	0x58021800
 80010d8:	58021c00 	.word	0x58021c00
 80010dc:	58022000 	.word	0x58022000
 80010e0:	58022400 	.word	0x58022400
 80010e4:	2300      	movs	r3, #0
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f6:	4938      	ldr	r1, [pc, #224]	; (80011d8 <HAL_GPIO_Init+0x35c>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800112a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f47f ae63 	bne.w	8000e90 <HAL_GPIO_Init+0x14>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3724      	adds	r7, #36	; 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	58000400 	.word	0x58000400

080011dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <HAL_PWREx_ConfigSupply+0xb0>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d00a      	beq.n	8001206 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <HAL_PWREx_ConfigSupply+0xb0>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d001      	beq.n	8001202 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e040      	b.n	8001284 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e03e      	b.n	8001284 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_PWREx_ConfigSupply+0xb0>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800120e:	491f      	ldr	r1, [pc, #124]	; (800128c <HAL_PWREx_ConfigSupply+0xb0>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4313      	orrs	r3, r2
 8001214:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001216:	f7ff fd1d 	bl	8000c54 <HAL_GetTick>
 800121a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800121c:	e009      	b.n	8001232 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800121e:	f7ff fd19 	bl	8000c54 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800122c:	d901      	bls.n	8001232 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e028      	b.n	8001284 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_PWREx_ConfigSupply+0xb0>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800123a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800123e:	d1ee      	bne.n	800121e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b1e      	cmp	r3, #30
 8001244:	d008      	beq.n	8001258 <HAL_PWREx_ConfigSupply+0x7c>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b2e      	cmp	r3, #46	; 0x2e
 800124a:	d005      	beq.n	8001258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b1d      	cmp	r3, #29
 8001250:	d002      	beq.n	8001258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b2d      	cmp	r3, #45	; 0x2d
 8001256:	d114      	bne.n	8001282 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001258:	f7ff fcfc 	bl	8000c54 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800125e:	e009      	b.n	8001274 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001260:	f7ff fcf8 	bl	8000c54 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800126e:	d901      	bls.n	8001274 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e007      	b.n	8001284 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_PWREx_ConfigSupply+0xb0>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d1ee      	bne.n	8001260 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58024800 	.word	0x58024800

08001290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f000 bc1f 	b.w	8001ae2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80b3 	beq.w	8001418 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b2:	4b95      	ldr	r3, [pc, #596]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012bc:	4b92      	ldr	r3, [pc, #584]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d007      	beq.n	80012d8 <HAL_RCC_OscConfig+0x48>
 80012c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ca:	2b18      	cmp	r3, #24
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x64>
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d10d      	bne.n	80012f4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 8098 	beq.w	8001416 <HAL_RCC_OscConfig+0x186>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 8093 	bne.w	8001416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e3f6      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x7c>
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a81      	ldr	r2, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e058      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d112      	bne.n	800133a <HAL_RCC_OscConfig+0xaa>
 8001314:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a7b      	ldr	r2, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b79      	ldr	r3, [pc, #484]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a78      	ldr	r2, [pc, #480]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001326:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e041      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001342:	d112      	bne.n	800136a <HAL_RCC_OscConfig+0xda>
 8001344:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800134a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001356:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e029      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001372:	d112      	bne.n	800139a <HAL_RCC_OscConfig+0x10a>
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800137a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b61      	ldr	r3, [pc, #388]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a60      	ldr	r2, [pc, #384]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a5d      	ldr	r2, [pc, #372]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e011      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a5a      	ldr	r2, [pc, #360]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80013a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b58      	ldr	r3, [pc, #352]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a57      	ldr	r2, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80013ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a54      	ldr	r2, [pc, #336]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80013b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d013      	beq.n	80013ee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fc45 	bl	8000c54 <HAL_GetTick>
 80013ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ce:	f7ff fc41 	bl	8000c54 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e380      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013e0:	4b49      	ldr	r3, [pc, #292]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x13e>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fc31 	bl	8000c54 <HAL_GetTick>
 80013f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff fc2d 	bl	8000c54 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e36c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x166>
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 808c 	beq.w	800153e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800142e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_RCC_OscConfig+0x1bc>
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2b18      	cmp	r3, #24
 8001440:	d137      	bne.n	80014b2 <HAL_RCC_OscConfig+0x222>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d132      	bne.n	80014b2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x1d4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e33e      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 0219 	bic.w	r2, r3, #25
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff fbed 	bl	8000c54 <HAL_GetTick>
 800147a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff fbe9 	bl	8000c54 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e328      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	4917      	ldr	r1, [pc, #92]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	e045      	b.n	800153e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d028      	beq.n	800150c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0219 	bic.w	r2, r3, #25
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4910      	ldr	r1, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbc2 	bl	8000c54 <HAL_GetTick>
 80014d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fbbe 	bl	8000c54 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e2fd      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	061b      	lsls	r3, r3, #24
 8001500:	4901      	ldr	r1, [pc, #4]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	e01a      	b.n	800153e <HAL_RCC_OscConfig+0x2ae>
 8001508:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150c:	4b97      	ldr	r3, [pc, #604]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a96      	ldr	r2, [pc, #600]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb9c 	bl	8000c54 <HAL_GetTick>
 800151c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fb98 	bl	8000c54 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e2d7      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001532:	4b8e      	ldr	r3, [pc, #568]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	d06a      	beq.n	8001620 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154a:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001552:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001554:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b08      	cmp	r3, #8
 800155e:	d007      	beq.n	8001570 <HAL_RCC_OscConfig+0x2e0>
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b18      	cmp	r3, #24
 8001564:	d11b      	bne.n	800159e <HAL_RCC_OscConfig+0x30e>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d116      	bne.n	800159e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001570:	4b7e      	ldr	r3, [pc, #504]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x2f8>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b80      	cmp	r3, #128	; 0x80
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e2ac      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	4975      	ldr	r1, [pc, #468]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800159c:	e040      	b.n	8001620 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d023      	beq.n	80015ee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015a6:	4b71      	ldr	r3, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a70      	ldr	r2, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb4f 	bl	8000c54 <HAL_GetTick>
 80015b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015ba:	f7ff fb4b 	bl	8000c54 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e28a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015cc:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015d8:	4b64      	ldr	r3, [pc, #400]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	4961      	ldr	r1, [pc, #388]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60cb      	str	r3, [r1, #12]
 80015ec:	e018      	b.n	8001620 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5e      	ldr	r2, [pc, #376]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80015f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb2b 	bl	8000c54 <HAL_GetTick>
 80015fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001602:	f7ff fb27 	bl	8000c54 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e266      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001614:	4b55      	ldr	r3, [pc, #340]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d036      	beq.n	800169a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d019      	beq.n	8001668 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001638:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fb08 	bl	8000c54 <HAL_GetTick>
 8001644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fb04 	bl	8000c54 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e243      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x3b8>
 8001666:	e018      	b.n	800169a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	4a3f      	ldr	r2, [pc, #252]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff faee 	bl	8000c54 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff faea 	bl	8000c54 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e229      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d036      	beq.n	8001714 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d019      	beq.n	80016e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a2e      	ldr	r2, [pc, #184]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80016b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016ba:	f7ff facb 	bl	8000c54 <HAL_GetTick>
 80016be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c2:	f7ff fac7 	bl	8000c54 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e206      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x432>
 80016e0:	e018      	b.n	8001714 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a21      	ldr	r2, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80016e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fab1 	bl	8000c54 <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f6:	f7ff faad 	bl	8000c54 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1ec      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80af 	beq.w	8001880 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_RCC_OscConfig+0x4e0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_RCC_OscConfig+0x4e0>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800172e:	f7ff fa91 	bl	8000c54 <HAL_GetTick>
 8001732:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff fa8d 	bl	8000c54 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b64      	cmp	r3, #100	; 0x64
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1cc      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_OscConfig+0x4e0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x4e4>
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4a02      	ldr	r2, [pc, #8]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
 8001768:	e05b      	b.n	8001822 <HAL_RCC_OscConfig+0x592>
 800176a:	bf00      	nop
 800176c:	58024400 	.word	0x58024400
 8001770:	58024800 	.word	0x58024800
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x512>
 800177c:	4b9d      	ldr	r3, [pc, #628]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a9c      	ldr	r2, [pc, #624]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	4b9a      	ldr	r3, [pc, #616]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a99      	ldr	r2, [pc, #612]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800178e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
 8001794:	4b97      	ldr	r3, [pc, #604]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a96      	ldr	r2, [pc, #600]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800179a:	f023 0304 	bic.w	r3, r3, #4
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	e03f      	b.n	8001822 <HAL_RCC_OscConfig+0x592>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d112      	bne.n	80017d0 <HAL_RCC_OscConfig+0x540>
 80017aa:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a91      	ldr	r2, [pc, #580]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	4b8f      	ldr	r3, [pc, #572]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a8e      	ldr	r2, [pc, #568]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	4b8c      	ldr	r3, [pc, #560]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	4a8b      	ldr	r2, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70
 80017ce:	e028      	b.n	8001822 <HAL_RCC_OscConfig+0x592>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b85      	cmp	r3, #133	; 0x85
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x56e>
 80017d8:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a85      	ldr	r2, [pc, #532]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	4b83      	ldr	r3, [pc, #524]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a82      	ldr	r2, [pc, #520]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a7f      	ldr	r2, [pc, #508]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e011      	b.n	8001822 <HAL_RCC_OscConfig+0x592>
 80017fe:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a7c      	ldr	r2, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a79      	ldr	r2, [pc, #484]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a76      	ldr	r2, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800181c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d015      	beq.n	8001856 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff fa13 	bl	8000c54 <HAL_GetTick>
 800182e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fa0f 	bl	8000c54 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e14c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ee      	beq.n	8001832 <HAL_RCC_OscConfig+0x5a2>
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff f9fd 	bl	8000c54 <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff f9f9 	bl	8000c54 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e136      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001874:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 812b 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800188a:	4b5a      	ldr	r3, [pc, #360]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001892:	2b18      	cmp	r3, #24
 8001894:	f000 80bb 	beq.w	8001a0e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2b02      	cmp	r3, #2
 800189e:	f040 8095 	bne.w	80019cc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a53      	ldr	r2, [pc, #332]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80018a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff f9d1 	bl	8000c54 <HAL_GetTick>
 80018b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff f9cd 	bl	8000c54 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e10c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018c8:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80018d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d8:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_OscConfig+0x768>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	430a      	orrs	r2, r1
 80018e8:	4942      	ldr	r1, [pc, #264]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	628b      	str	r3, [r1, #40]	; 0x28
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	3b01      	subs	r3, #1
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	b29b      	uxth	r3, r3
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	3b01      	subs	r3, #1
 800190a:	041b      	lsls	r3, r3, #16
 800190c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001916:	3b01      	subs	r3, #1
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800191e:	4935      	ldr	r1, [pc, #212]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001920:	4313      	orrs	r3, r2
 8001922:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001924:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_OscConfig+0x76c>)
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800193c:	00d2      	lsls	r2, r2, #3
 800193e:	492d      	ldr	r1, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001940:	4313      	orrs	r3, r2
 8001942:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	f023 020c 	bic.w	r2, r3, #12
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4928      	ldr	r1, [pc, #160]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001952:	4313      	orrs	r3, r2
 8001954:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	f023 0202 	bic.w	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4924      	ldr	r1, [pc, #144]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001964:	4313      	orrs	r3, r2
 8001966:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800196e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f956 	bl	8000c54 <HAL_GetTick>
 80019a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f952 	bl	8000c54 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e091      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x71c>
 80019ca:	e089      	b.n	8001ae0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_RCC_OscConfig+0x764>)
 80019d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f93c 	bl	8000c54 <HAL_GetTick>
 80019dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019de:	e00f      	b.n	8001a00 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f938 	bl	8000c54 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d908      	bls.n	8001a00 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e077      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
 80019f2:	bf00      	nop
 80019f4:	58024400 	.word	0x58024400
 80019f8:	fffffc0c 	.word	0xfffffc0c
 80019fc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e9      	bne.n	80019e0 <HAL_RCC_OscConfig+0x750>
 8001a0c:	e068      	b.n	8001ae0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a14:	4b35      	ldr	r3, [pc, #212]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d031      	beq.n	8001a86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d12a      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d122      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d11a      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d111      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d108      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	0e1b      	lsrs	r3, r3, #24
 8001a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e02b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a94:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d01f      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aac:	f7ff f8d2 	bl	8000c54 <HAL_GetTick>
 8001ab0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff f8ce 	bl	8000c54 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d0f9      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_OscConfig+0x860>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001acc:	00d2      	lsls	r2, r2, #3
 8001ace:	4907      	ldr	r1, [pc, #28]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_RCC_OscConfig+0x85c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3730      	adds	r7, #48	; 0x30
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	58024400 	.word	0x58024400
 8001af0:	ffff0007 	.word	0xffff0007

08001af4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e19c      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b87      	ldr	r3, [pc, #540]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	4985      	ldr	r1, [pc, #532]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b83      	ldr	r3, [pc, #524]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e184      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d908      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b54:	4b78      	ldr	r3, [pc, #480]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4975      	ldr	r1, [pc, #468]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d010      	beq.n	8001b94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d908      	bls.n	8001b94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b82:	4b6d      	ldr	r3, [pc, #436]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	496a      	ldr	r1, [pc, #424]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d010      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	4b64      	ldr	r3, [pc, #400]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d908      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bb0:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	495e      	ldr	r1, [pc, #376]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d010      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d908      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001bde:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4953      	ldr	r1, [pc, #332]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d908      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f023 020f 	bic.w	r2, r3, #15
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4947      	ldr	r1, [pc, #284]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d055      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4940      	ldr	r1, [pc, #256]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c44:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d121      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0f6      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d115      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0ea      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0de      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0d6      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f023 0207 	bic.w	r2, r3, #7
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4925      	ldr	r1, [pc, #148]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca6:	f7fe ffd5 	bl	8000c54 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7fe ffd1 	bl	8000c54 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0be      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d1eb      	bne.n	8001cae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d010      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d208      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f023 020f 	bic.w	r2, r3, #15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d214      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 020f 	bic.w	r2, r3, #15
 8001d1a:	4906      	ldr	r1, [pc, #24]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e086      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
 8001d34:	52002000 	.word	0x52002000
 8001d38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d208      	bcs.n	8001d6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d58:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4939      	ldr	r1, [pc, #228]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d010      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d208      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	492e      	ldr	r1, [pc, #184]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d208      	bcs.n	8001dc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4922      	ldr	r1, [pc, #136]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d208      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4917      	ldr	r1, [pc, #92]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001df4:	f000 f834 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	4912      	ldr	r1, [pc, #72]	; (8001e50 <HAL_RCC_ClockConfig+0x35c>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_RCC_ClockConfig+0x35c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <HAL_RCC_ClockConfig+0x360>)
 8001e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x364>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x368>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fec2 	bl	8000bc0 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	0800534c 	.word	0x0800534c
 8001e54:	24000004 	.word	0x24000004
 8001e58:	24000000 	.word	0x24000000
 8001e5c:	24000008 	.word	0x24000008

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e66:	4bb3      	ldr	r3, [pc, #716]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e6e:	2b18      	cmp	r3, #24
 8001e70:	f200 8155 	bhi.w	800211e <HAL_RCC_GetSysClockFreq+0x2be>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001ee1 	.word	0x08001ee1
 8001e80:	0800211f 	.word	0x0800211f
 8001e84:	0800211f 	.word	0x0800211f
 8001e88:	0800211f 	.word	0x0800211f
 8001e8c:	0800211f 	.word	0x0800211f
 8001e90:	0800211f 	.word	0x0800211f
 8001e94:	0800211f 	.word	0x0800211f
 8001e98:	0800211f 	.word	0x0800211f
 8001e9c:	08001f07 	.word	0x08001f07
 8001ea0:	0800211f 	.word	0x0800211f
 8001ea4:	0800211f 	.word	0x0800211f
 8001ea8:	0800211f 	.word	0x0800211f
 8001eac:	0800211f 	.word	0x0800211f
 8001eb0:	0800211f 	.word	0x0800211f
 8001eb4:	0800211f 	.word	0x0800211f
 8001eb8:	0800211f 	.word	0x0800211f
 8001ebc:	08001f0d 	.word	0x08001f0d
 8001ec0:	0800211f 	.word	0x0800211f
 8001ec4:	0800211f 	.word	0x0800211f
 8001ec8:	0800211f 	.word	0x0800211f
 8001ecc:	0800211f 	.word	0x0800211f
 8001ed0:	0800211f 	.word	0x0800211f
 8001ed4:	0800211f 	.word	0x0800211f
 8001ed8:	0800211f 	.word	0x0800211f
 8001edc:	08001f13 	.word	0x08001f13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ee0:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001eec:	4b91      	ldr	r3, [pc, #580]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	4a90      	ldr	r2, [pc, #576]	; (8002138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001efe:	e111      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f00:	4b8d      	ldr	r3, [pc, #564]	; (8002138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f02:	61bb      	str	r3, [r7, #24]
      break;
 8001f04:	e10e      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f06:	4b8d      	ldr	r3, [pc, #564]	; (800213c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f08:	61bb      	str	r3, [r7, #24]
      break;
 8001f0a:	e10b      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f0e:	61bb      	str	r3, [r7, #24]
      break;
 8001f10:	e108      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f12:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f1c:	4b85      	ldr	r3, [pc, #532]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f28:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f32:	4b80      	ldr	r3, [pc, #512]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80e1 	beq.w	8002118 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	f000 8083 	beq.w	8002064 <HAL_RCC_GetSysClockFreq+0x204>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	f200 80a1 	bhi.w	80020a8 <HAL_RCC_GetSysClockFreq+0x248>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x114>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d056      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f72:	e099      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d02d      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f80:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	08db      	lsrs	r3, r3, #3
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	4a6b      	ldr	r2, [pc, #428]	; (8002138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001faa:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fbe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001fda:	e087      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002148 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002002:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800201e:	e065      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800214c <HAL_RCC_GetSysClockFreq+0x2ec>
 800202e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002032:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002042:	ed97 6a02 	vldr	s12, [r7, #8]
 8002046:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800204a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800204e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002062:	e043      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002150 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002076:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002086:	ed97 6a02 	vldr	s12, [r7, #8]
 800208a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800208e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800209a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020a6:	e021      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800214c <HAL_RCC_GetSysClockFreq+0x2ec>
 80020b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	0a5b      	lsrs	r3, r3, #9
 80020f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f6:	3301      	adds	r3, #1
 80020f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002104:	edd7 6a07 	vldr	s13, [r7, #28]
 8002108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002110:	ee17 3a90 	vmov	r3, s15
 8002114:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002116:	e005      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
      break;
 800211c:	e002      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002120:	61bb      	str	r3, [r7, #24]
      break;
 8002122:	bf00      	nop
  }

  return sysclockfreq;
 8002124:	69bb      	ldr	r3, [r7, #24]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	58024400 	.word	0x58024400
 8002138:	03d09000 	.word	0x03d09000
 800213c:	003d0900 	.word	0x003d0900
 8002140:	007a1200 	.word	0x007a1200
 8002144:	46000000 	.word	0x46000000
 8002148:	4c742400 	.word	0x4c742400
 800214c:	4a742400 	.word	0x4a742400
 8002150:	4af42400 	.word	0x4af42400

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800215a:	f7ff fe81 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490f      	ldr	r1, [pc, #60]	; (80021a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_RCC_GetHCLKFreq+0x58>)
 8002190:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_RCC_GetHCLKFreq+0x58>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	58024400 	.word	0x58024400
 80021a8:	0800534c 	.word	0x0800534c
 80021ac:	24000004 	.word	0x24000004
 80021b0:	24000000 	.word	0x24000000

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80021b8:	f7ff ffcc 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	58024400 	.word	0x58024400
 80021dc:	0800534c 	.word	0x0800534c

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80021e4:	f7ff ffb6 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4904      	ldr	r1, [pc, #16]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	58024400 	.word	0x58024400
 8002208:	0800534c 	.word	0x0800534c

0800220c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800220c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002210:	b0c8      	sub	sp, #288	; 0x120
 8002212:	af00      	add	r7, sp, #0
 8002214:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002218:	2300      	movs	r3, #0
 800221a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800221e:	2300      	movs	r3, #0
 8002220:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002230:	2500      	movs	r5, #0
 8002232:	ea54 0305 	orrs.w	r3, r4, r5
 8002236:	d049      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800223c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002242:	d02f      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002248:	d828      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800224a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800224e:	d01a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002254:	d822      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800225a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800225e:	d007      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002260:	e01c      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002262:	4ba7      	ldr	r3, [pc, #668]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	4aa6      	ldr	r2, [pc, #664]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800226e:	e01a      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002274:	3308      	adds	r3, #8
 8002276:	2102      	movs	r1, #2
 8002278:	4618      	mov	r0, r3
 800227a:	f001 fc43 	bl	8003b04 <RCCEx_PLL2_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002284:	e00f      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800228a:	3328      	adds	r3, #40	; 0x28
 800228c:	2102      	movs	r1, #2
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fcea 	bl	8003c68 <RCCEx_PLL3_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800229a:	e004      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80022a2:	e000      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80022a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80022b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022bc:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022be:	430b      	orrs	r3, r1
 80022c0:	6513      	str	r3, [r2, #80]	; 0x50
 80022c2:	e003      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80022c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80022d8:	f04f 0900 	mov.w	r9, #0
 80022dc:	ea58 0309 	orrs.w	r3, r8, r9
 80022e0:	d047      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80022e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d82a      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002309 	.word	0x08002309
 80022f8:	08002317 	.word	0x08002317
 80022fc:	0800232d 	.word	0x0800232d
 8002300:	0800234b 	.word	0x0800234b
 8002304:	0800234b 	.word	0x0800234b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002308:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	4a7c      	ldr	r2, [pc, #496]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800230e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002314:	e01a      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800231a:	3308      	adds	r3, #8
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f001 fbf0 	bl	8003b04 <RCCEx_PLL2_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800232a:	e00f      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800232c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002330:	3328      	adds	r3, #40	; 0x28
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f001 fc97 	bl	8003c68 <RCCEx_PLL3_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002340:	e004      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002348:	e000      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800234a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800234c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	f023 0107 	bic.w	r1, r3, #7
 800235c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4a67      	ldr	r2, [pc, #412]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002364:	430b      	orrs	r3, r1
 8002366:	6513      	str	r3, [r2, #80]	; 0x50
 8002368:	e003      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800236a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800236e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800237e:	f04f 0b00 	mov.w	fp, #0
 8002382:	ea5a 030b 	orrs.w	r3, sl, fp
 8002386:	d054      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002392:	d036      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002394:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002398:	d82f      	bhi.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800239a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239e:	d032      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a4:	d829      	bhi.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80023a6:	2bc0      	cmp	r3, #192	; 0xc0
 80023a8:	d02f      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80023aa:	2bc0      	cmp	r3, #192	; 0xc0
 80023ac:	d825      	bhi.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80023ae:	2b80      	cmp	r3, #128	; 0x80
 80023b0:	d018      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d821      	bhi.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	d007      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80023be:	e01c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	4a4e      	ldr	r2, [pc, #312]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80023cc:	e01e      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023d2:	3308      	adds	r3, #8
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 fb94 	bl	8003b04 <RCCEx_PLL2_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80023e2:	e013      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023e8:	3328      	adds	r3, #40	; 0x28
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 fc3b 	bl	8003c68 <RCCEx_PLL3_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80023f8:	e008      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002400:	e004      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002402:	bf00      	nop
 8002404:	e002      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800240a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800240c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002414:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800241c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	4a37      	ldr	r2, [pc, #220]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002424:	430b      	orrs	r3, r1
 8002426:	6513      	str	r3, [r2, #80]	; 0x50
 8002428:	e003      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800242e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800243e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002448:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800244c:	460b      	mov	r3, r1
 800244e:	4313      	orrs	r3, r2
 8002450:	d05c      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800245c:	d03b      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800245e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002462:	d834      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002468:	d037      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800246a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800246e:	d82e      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002470:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002474:	d033      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002476:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800247a:	d828      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800247c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002480:	d01a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002486:	d822      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800248c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002490:	d007      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002492:	e01c      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	4a19      	ldr	r2, [pc, #100]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80024a0:	e01e      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a6:	3308      	adds	r3, #8
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fb2a 	bl	8003b04 <RCCEx_PLL2_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80024b6:	e013      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 fbd1 	bl	8003c68 <RCCEx_PLL3_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80024cc:	e008      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80024d4:	e004      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80024de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ec:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80024f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	4a02      	ldr	r2, [pc, #8]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6513      	str	r3, [r2, #80]	; 0x50
 80024fc:	e006      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x300>
 80024fe:	bf00      	nop
 8002500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002504:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002508:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800250c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002522:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002526:	460b      	mov	r3, r1
 8002528:	4313      	orrs	r3, r2
 800252a:	d03a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800252c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	2b30      	cmp	r3, #48	; 0x30
 8002534:	d01f      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d819      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800253a:	2b20      	cmp	r3, #32
 800253c:	d00c      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800253e:	2b20      	cmp	r3, #32
 8002540:	d815      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d019      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002546:	2b10      	cmp	r3, #16
 8002548:	d111      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254a:	4bae      	ldr	r3, [pc, #696]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	4aad      	ldr	r2, [pc, #692]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002556:	e011      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800255c:	3308      	adds	r3, #8
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f001 facf 	bl	8003b04 <RCCEx_PLL2_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800256c:	e006      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002574:	e002      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002576:	bf00      	nop
 8002578:	e000      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800257a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800257c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002584:	4b9f      	ldr	r3, [pc, #636]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800258c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a9c      	ldr	r2, [pc, #624]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002594:	430b      	orrs	r3, r1
 8002596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002598:	e003      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800259e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80025ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80025b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80025bc:	460b      	mov	r3, r1
 80025be:	4313      	orrs	r3, r2
 80025c0:	d051      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80025c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025cc:	d035      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80025ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d2:	d82e      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80025d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025d8:	d031      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80025da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025de:	d828      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80025e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e4:	d01a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ea:	d822      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f4:	d007      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80025f6:	e01c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f8:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	4a81      	ldr	r2, [pc, #516]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002604:	e01c      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260a:	3308      	adds	r3, #8
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f001 fa78 	bl	8003b04 <RCCEx_PLL2_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800261a:	e011      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800261c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002620:	3328      	adds	r3, #40	; 0x28
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f001 fb1f 	bl	8003c68 <RCCEx_PLL3_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002630:	e006      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002638:	e002      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800263e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002640:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002648:	4b6e      	ldr	r3, [pc, #440]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800264a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002656:	4a6b      	ldr	r2, [pc, #428]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002658:	430b      	orrs	r3, r1
 800265a:	6513      	str	r3, [r2, #80]	; 0x50
 800265c:	e003      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002662:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800267c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002680:	460b      	mov	r3, r1
 8002682:	4313      	orrs	r3, r2
 8002684:	d053      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800268a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002690:	d033      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002696:	d82c      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800269c:	d02f      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800269e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026a2:	d826      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80026a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026a8:	d02b      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80026aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026ae:	d820      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80026b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026b4:	d012      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80026b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ba:	d81a      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d022      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d115      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ca:	3308      	adds	r3, #8
 80026cc:	2101      	movs	r1, #1
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 fa18 	bl	8003b04 <RCCEx_PLL2_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026da:	e015      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e0:	3328      	adds	r3, #40	; 0x28
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 fabf 	bl	8003c68 <RCCEx_PLL3_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026f0:	e00a      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026f8:	e006      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80026fa:	bf00      	nop
 80026fc:	e004      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80026fe:	bf00      	nop
 8002700:	e002      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002702:	bf00      	nop
 8002704:	e000      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002710:	4b3c      	ldr	r3, [pc, #240]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002714:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800271c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271e:	4a39      	ldr	r2, [pc, #228]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002720:	430b      	orrs	r3, r1
 8002722:	6513      	str	r3, [r2, #80]	; 0x50
 8002724:	e003      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002726:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800272a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800272e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800273a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002744:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002748:	460b      	mov	r3, r1
 800274a:	4313      	orrs	r3, r2
 800274c:	d060      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800274e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002756:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800275a:	d039      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800275c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002760:	d832      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002766:	d035      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276c:	d82c      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002772:	d031      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d826      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800277a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800277e:	d02d      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002784:	d820      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278a:	d012      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800278c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002790:	d81a      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d024      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800279a:	d115      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800279c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a0:	3308      	adds	r3, #8
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 f9ad 	bl	8003b04 <RCCEx_PLL2_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80027b0:	e017      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80027b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027b6:	3328      	adds	r3, #40	; 0x28
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fa54 	bl	8003c68 <RCCEx_PLL3_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80027c6:	e00c      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027ce:	e008      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027d0:	bf00      	nop
 80027d2:	e006      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027d4:	bf00      	nop
 80027d6:	e004      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027d8:	bf00      	nop
 80027da:	e002      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027dc:	bf00      	nop
 80027de:	e000      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80027f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027fa:	4a02      	ldr	r2, [pc, #8]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	e006      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002802:	bf00      	nop
 8002804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800280c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800281c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800282a:	460b      	mov	r3, r1
 800282c:	4313      	orrs	r3, r2
 800282e:	d037      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800283a:	d00e      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800283c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002840:	d816      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800284a:	d111      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284c:	4bc4      	ldr	r3, [pc, #784]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	4ac3      	ldr	r2, [pc, #780]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002858:	e00f      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800285a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800285e:	3308      	adds	r3, #8
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f94e 	bl	8003b04 <RCCEx_PLL2_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800286e:	e004      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002876:	e000      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002882:	4bb7      	ldr	r3, [pc, #732]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002886:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800288a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	4ab3      	ldr	r2, [pc, #716]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002892:	430b      	orrs	r3, r1
 8002894:	6513      	str	r3, [r2, #80]	; 0x50
 8002896:	e003      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800289c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80028ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80028b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4313      	orrs	r3, r2
 80028be:	d039      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80028c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d81c      	bhi.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	0800290d 	.word	0x0800290d
 80028d4:	080028e1 	.word	0x080028e1
 80028d8:	080028ef 	.word	0x080028ef
 80028dc:	0800290d 	.word	0x0800290d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e0:	4b9f      	ldr	r3, [pc, #636]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	4a9e      	ldr	r2, [pc, #632]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028ec:	e00f      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028f2:	3308      	adds	r3, #8
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f904 	bl	8003b04 <RCCEx_PLL2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002902:	e004      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800290c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800290e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002916:	4b92      	ldr	r3, [pc, #584]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f023 0103 	bic.w	r1, r3, #3
 800291e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002924:	4a8e      	ldr	r2, [pc, #568]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002926:	430b      	orrs	r3, r1
 8002928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292a:	e003      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002930:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800294a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800294e:	460b      	mov	r3, r1
 8002950:	4313      	orrs	r3, r2
 8002952:	f000 8099 	beq.w	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002956:	4b83      	ldr	r3, [pc, #524]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a82      	ldr	r2, [pc, #520]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002962:	f7fe f977 	bl	8000c54 <HAL_GetTick>
 8002966:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800296a:	e00b      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7fe f972 	bl	8000c54 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b64      	cmp	r3, #100	; 0x64
 800297a:	d903      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002982:	e005      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002984:	4b77      	ldr	r3, [pc, #476]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ed      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002994:	2b00      	cmp	r3, #0
 8002996:	d173      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002998:	4b71      	ldr	r3, [pc, #452]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800299a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800299c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029a4:	4053      	eors	r3, r2
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d015      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ae:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ba:	4b69      	ldr	r3, [pc, #420]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a68      	ldr	r2, [pc, #416]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c6:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a65      	ldr	r2, [pc, #404]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029d2:	4a63      	ldr	r2, [pc, #396]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e6:	d118      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe f934 	bl	8000c54 <HAL_GetTick>
 80029ec:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f0:	e00d      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe f92f 	bl	8000c54 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80029fc:	1ad2      	subs	r2, r2, r3
 80029fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d903      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002a0c:	e005      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a0e:	4b54      	ldr	r3, [pc, #336]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0eb      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002a1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d129      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	d10e      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002a34:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a44:	091a      	lsrs	r2, r3, #4
 8002a46:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	4a45      	ldr	r2, [pc, #276]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6113      	str	r3, [r2, #16]
 8002a50:	e005      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	4a42      	ldr	r2, [pc, #264]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a5c:	6113      	str	r3, [r2, #16]
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	e008      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002a7e:	e003      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f002 0301 	and.w	r3, r2, #1
 8002a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f000 8090 	beq.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab2:	2b28      	cmp	r3, #40	; 0x28
 8002ab4:	d870      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002ba1 	.word	0x08002ba1
 8002ac0:	08002b99 	.word	0x08002b99
 8002ac4:	08002b99 	.word	0x08002b99
 8002ac8:	08002b99 	.word	0x08002b99
 8002acc:	08002b99 	.word	0x08002b99
 8002ad0:	08002b99 	.word	0x08002b99
 8002ad4:	08002b99 	.word	0x08002b99
 8002ad8:	08002b99 	.word	0x08002b99
 8002adc:	08002b6d 	.word	0x08002b6d
 8002ae0:	08002b99 	.word	0x08002b99
 8002ae4:	08002b99 	.word	0x08002b99
 8002ae8:	08002b99 	.word	0x08002b99
 8002aec:	08002b99 	.word	0x08002b99
 8002af0:	08002b99 	.word	0x08002b99
 8002af4:	08002b99 	.word	0x08002b99
 8002af8:	08002b99 	.word	0x08002b99
 8002afc:	08002b83 	.word	0x08002b83
 8002b00:	08002b99 	.word	0x08002b99
 8002b04:	08002b99 	.word	0x08002b99
 8002b08:	08002b99 	.word	0x08002b99
 8002b0c:	08002b99 	.word	0x08002b99
 8002b10:	08002b99 	.word	0x08002b99
 8002b14:	08002b99 	.word	0x08002b99
 8002b18:	08002b99 	.word	0x08002b99
 8002b1c:	08002ba1 	.word	0x08002ba1
 8002b20:	08002b99 	.word	0x08002b99
 8002b24:	08002b99 	.word	0x08002b99
 8002b28:	08002b99 	.word	0x08002b99
 8002b2c:	08002b99 	.word	0x08002b99
 8002b30:	08002b99 	.word	0x08002b99
 8002b34:	08002b99 	.word	0x08002b99
 8002b38:	08002b99 	.word	0x08002b99
 8002b3c:	08002ba1 	.word	0x08002ba1
 8002b40:	08002b99 	.word	0x08002b99
 8002b44:	08002b99 	.word	0x08002b99
 8002b48:	08002b99 	.word	0x08002b99
 8002b4c:	08002b99 	.word	0x08002b99
 8002b50:	08002b99 	.word	0x08002b99
 8002b54:	08002b99 	.word	0x08002b99
 8002b58:	08002b99 	.word	0x08002b99
 8002b5c:	08002ba1 	.word	0x08002ba1
 8002b60:	58024400 	.word	0x58024400
 8002b64:	58024800 	.word	0x58024800
 8002b68:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b70:	3308      	adds	r3, #8
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 ffc5 	bl	8003b04 <RCCEx_PLL2_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b80:	e00f      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b86:	3328      	adds	r3, #40	; 0x28
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 f86c 	bl	8003c68 <RCCEx_PLL3_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b96:	e004      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002baa:	4bc0      	ldr	r3, [pc, #768]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bba:	4abc      	ldr	r2, [pc, #752]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6553      	str	r3, [r2, #84]	; 0x54
 8002bc0:	e003      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bc6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f002 0302 	and.w	r3, r2, #2
 8002bd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002be0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002be4:	460b      	mov	r3, r1
 8002be6:	4313      	orrs	r3, r2
 8002be8:	d043      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d824      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c49 	.word	0x08002c49
 8002c00:	08002c15 	.word	0x08002c15
 8002c04:	08002c2b 	.word	0x08002c2b
 8002c08:	08002c49 	.word	0x08002c49
 8002c0c:	08002c49 	.word	0x08002c49
 8002c10:	08002c49 	.word	0x08002c49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c18:	3308      	adds	r3, #8
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 ff71 	bl	8003b04 <RCCEx_PLL2_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c28:	e00f      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c2e:	3328      	adds	r3, #40	; 0x28
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f818 	bl	8003c68 <RCCEx_PLL3_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c3e:	e004      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c46:	e000      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c52:	4b96      	ldr	r3, [pc, #600]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f023 0107 	bic.w	r1, r3, #7
 8002c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c62:	4a92      	ldr	r2, [pc, #584]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6553      	str	r3, [r2, #84]	; 0x54
 8002c68:	e003      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f002 0304 	and.w	r3, r2, #4
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c88:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	d043      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d824      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cf1 	.word	0x08002cf1
 8002ca8:	08002cbd 	.word	0x08002cbd
 8002cac:	08002cd3 	.word	0x08002cd3
 8002cb0:	08002cf1 	.word	0x08002cf1
 8002cb4:	08002cf1 	.word	0x08002cf1
 8002cb8:	08002cf1 	.word	0x08002cf1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 ff1d 	bl	8003b04 <RCCEx_PLL2_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cd0:	e00f      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd6:	3328      	adds	r3, #40	; 0x28
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 ffc4 	bl	8003c68 <RCCEx_PLL3_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	f023 0107 	bic.w	r1, r3, #7
 8002d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d0a:	4a68      	ldr	r2, [pc, #416]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d10:	e003      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f002 0320 	and.w	r3, r2, #32
 8002d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d34:	460b      	mov	r3, r1
 8002d36:	4313      	orrs	r3, r2
 8002d38:	d055      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d46:	d033      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4c:	d82c      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d02f      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d826      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d5e:	d02b      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002d60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d64:	d820      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d6a:	d012      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d70:	d81a      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d022      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d7a:	d115      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d80:	3308      	adds	r3, #8
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 febd 	bl	8003b04 <RCCEx_PLL2_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d90:	e015      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d96:	3328      	adds	r3, #40	; 0x28
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 ff64 	bl	8003c68 <RCCEx_PLL3_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002da6:	e00a      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dae:	e006      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002db0:	bf00      	nop
 8002db2:	e004      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd6:	4a35      	ldr	r2, [pc, #212]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6553      	str	r3, [r2, #84]	; 0x54
 8002ddc:	e003      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002de2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002dfc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4313      	orrs	r3, r2
 8002e04:	d058      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e12:	d033      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002e14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e18:	d82c      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	d02f      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d826      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e2a:	d02b      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e30:	d820      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e36:	d012      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3c:	d81a      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d022      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d115      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fe57 	bl	8003b04 <RCCEx_PLL2_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e5c:	e015      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e62:	3328      	adds	r3, #40	; 0x28
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fefe 	bl	8003c68 <RCCEx_PLL3_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e72:	e00a      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e7a:	e006      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002e7c:	bf00      	nop
 8002e7e:	e004      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002e80:	bf00      	nop
 8002e82:	e002      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002e84:	bf00      	nop
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10e      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ea2:	4a02      	ldr	r2, [pc, #8]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8002eaa:	bf00      	nop
 8002eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ece:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	d055      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002edc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ee0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ee4:	d033      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8002ee6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002eea:	d82c      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8002eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef0:	d02f      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d826      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8002ef8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002efc:	d02b      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002efe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f02:	d820      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8002f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f08:	d012      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8002f0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f0e:	d81a      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d022      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8002f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f18:	d115      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f1e:	3308      	adds	r3, #8
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fdee 	bl	8003b04 <RCCEx_PLL2_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f2e:	e015      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f34:	3328      	adds	r3, #40	; 0x28
 8002f36:	2102      	movs	r1, #2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fe95 	bl	8003c68 <RCCEx_PLL3_Config>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f44:	e00a      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f4c:	e006      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e004      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8002f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f64:	4ba1      	ldr	r3, [pc, #644]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f74:	4a9d      	ldr	r2, [pc, #628]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7a:	e003      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f002 0308 	and.w	r3, r2, #8
 8002f90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	d01e      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fb6:	3328      	adds	r3, #40	; 0x28
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fe54 	bl	8003c68 <RCCEx_PLL3_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fcc:	4b87      	ldr	r3, [pc, #540]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fdc:	4a83      	ldr	r2, [pc, #524]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f002 0310 	and.w	r3, r2, #16
 8002fee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ff8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4313      	orrs	r3, r2
 8003000:	d01e      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800300a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300e:	d10c      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003014:	3328      	adds	r3, #40	; 0x28
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fe25 	bl	8003c68 <RCCEx_PLL3_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800303c:	430b      	orrs	r3, r1
 800303e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003056:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800305a:	460b      	mov	r3, r1
 800305c:	4313      	orrs	r3, r2
 800305e:	d03e      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003064:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800306c:	d022      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800306e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003072:	d81b      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d00b      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800307e:	e015      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003084:	3308      	adds	r3, #8
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fd3b 	bl	8003b04 <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003094:	e00f      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309a:	3328      	adds	r3, #40	; 0x28
 800309c:	2102      	movs	r1, #2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fde2 	bl	8003c68 <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80030aa:	e004      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80030b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030be:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80030c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80030ce:	4a47      	ldr	r2, [pc, #284]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6593      	str	r3, [r2, #88]	; 0x58
 80030d4:	e003      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80030ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ec:	2300      	movs	r3, #0
 80030ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80030f4:	460b      	mov	r3, r1
 80030f6:	4313      	orrs	r3, r2
 80030f8:	d03b      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80030fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003106:	d01f      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800310c:	d818      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800310e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003112:	d003      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003118:	d007      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800311a:	e011      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311c:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4a32      	ldr	r2, [pc, #200]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003128:	e00f      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800312a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312e:	3328      	adds	r3, #40	; 0x28
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fd98 	bl	8003c68 <RCCEx_PLL3_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800313e:	e004      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003152:	4b26      	ldr	r3, [pc, #152]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800315a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003164:	430b      	orrs	r3, r1
 8003166:	6553      	str	r3, [r2, #84]	; 0x54
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800316e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800317e:	673b      	str	r3, [r7, #112]	; 0x70
 8003180:	2300      	movs	r3, #0
 8003182:	677b      	str	r3, [r7, #116]	; 0x74
 8003184:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003188:	460b      	mov	r3, r1
 800318a:	4313      	orrs	r3, r2
 800318c:	d034      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800318e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d007      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800319e:	e011      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031ac:	e00e      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b2:	3308      	adds	r3, #8
 80031b4:	2102      	movs	r1, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fca4 	bl	8003b04 <RCCEx_PLL2_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031c2:	e003      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10d      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	4a02      	ldr	r2, [pc, #8]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031e4:	430b      	orrs	r3, r1
 80031e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80031ea:	bf00      	nop
 80031ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003204:	66bb      	str	r3, [r7, #104]	; 0x68
 8003206:	2300      	movs	r3, #0
 8003208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800320a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800320e:	460b      	mov	r3, r1
 8003210:	4313      	orrs	r3, r2
 8003212:	d00c      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003218:	3328      	adds	r3, #40	; 0x28
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fd23 	bl	8003c68 <RCCEx_PLL3_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800322e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800323a:	663b      	str	r3, [r7, #96]	; 0x60
 800323c:	2300      	movs	r3, #0
 800323e:	667b      	str	r3, [r7, #100]	; 0x64
 8003240:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003244:	460b      	mov	r3, r1
 8003246:	4313      	orrs	r3, r2
 8003248:	d038      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800324a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003256:	d018      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325c:	d811      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800325e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003262:	d014      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d80b      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d011      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800326e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003272:	d106      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003274:	4bc3      	ldr	r3, [pc, #780]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	4ac2      	ldr	r2, [pc, #776]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800327a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003280:	e008      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003288:	e004      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003294:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800329c:	4bb9      	ldr	r3, [pc, #740]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	4ab5      	ldr	r2, [pc, #724]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6553      	str	r3, [r2, #84]	; 0x54
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80032c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ca:	2300      	movs	r3, #0
 80032cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80032d2:	460b      	mov	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032d8:	4baa      	ldr	r3, [pc, #680]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80032da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80032e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e6:	4aa7      	ldr	r2, [pc, #668]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80032f8:	653b      	str	r3, [r7, #80]	; 0x50
 80032fa:	2300      	movs	r3, #0
 80032fc:	657b      	str	r3, [r7, #84]	; 0x54
 80032fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003302:	460b      	mov	r3, r1
 8003304:	4313      	orrs	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003308:	4b9e      	ldr	r3, [pc, #632]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800330a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a9b      	ldr	r2, [pc, #620]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003318:	430b      	orrs	r3, r1
 800331a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003328:	64bb      	str	r3, [r7, #72]	; 0x48
 800332a:	2300      	movs	r3, #0
 800332c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003332:	460b      	mov	r3, r1
 8003334:	4313      	orrs	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003338:	4b92      	ldr	r3, [pc, #584]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	4a8f      	ldr	r2, [pc, #572]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003348:	430b      	orrs	r3, r1
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800334c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003358:	643b      	str	r3, [r7, #64]	; 0x40
 800335a:	2300      	movs	r3, #0
 800335c:	647b      	str	r3, [r7, #68]	; 0x44
 800335e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003362:	460b      	mov	r3, r1
 8003364:	4313      	orrs	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003368:	4b86      	ldr	r3, [pc, #536]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	4a85      	ldr	r2, [pc, #532]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800336e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003372:	6113      	str	r3, [r2, #16]
 8003374:	4b83      	ldr	r3, [pc, #524]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003376:	6919      	ldr	r1, [r3, #16]
 8003378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003380:	4a80      	ldr	r2, [pc, #512]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003382:	430b      	orrs	r3, r1
 8003384:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
 8003394:	2300      	movs	r3, #0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003398:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800339c:	460b      	mov	r3, r1
 800339e:	4313      	orrs	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033a2:	4b78      	ldr	r3, [pc, #480]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	4a74      	ldr	r2, [pc, #464]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033b2:	430b      	orrs	r3, r1
 80033b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
 80033c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80033cc:	460b      	mov	r3, r1
 80033ce:	4313      	orrs	r3, r2
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d2:	4b6c      	ldr	r3, [pc, #432]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e2:	4a68      	ldr	r2, [pc, #416]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	2100      	movs	r1, #0
 80033f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80033fe:	460b      	mov	r3, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	d011      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003408:	3308      	adds	r3, #8
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fb79 	bl	8003b04 <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003418:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003424:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	2100      	movs	r1, #0
 8003432:	6239      	str	r1, [r7, #32]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800343e:	460b      	mov	r3, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	d011      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003448:	3308      	adds	r3, #8
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fb59 	bl	8003b04 <RCCEx_PLL2_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003458:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003464:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	2100      	movs	r1, #0
 8003472:	61b9      	str	r1, [r7, #24]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800347e:	460b      	mov	r3, r1
 8003480:	4313      	orrs	r3, r2
 8003482:	d011      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003488:	3308      	adds	r3, #8
 800348a:	2102      	movs	r1, #2
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fb39 	bl	8003b04 <RCCEx_PLL2_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003498:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80034a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	2100      	movs	r1, #0
 80034b2:	6139      	str	r1, [r7, #16]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d011      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c8:	3328      	adds	r3, #40	; 0x28
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fbcb 	bl	8003c68 <RCCEx_PLL3_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80034d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80034e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	2100      	movs	r1, #0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80034fe:	460b      	mov	r3, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	d011      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003508:	3328      	adds	r3, #40	; 0x28
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fbab 	bl	8003c68 <RCCEx_PLL3_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003518:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003524:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	2100      	movs	r1, #0
 8003532:	6039      	str	r1, [r7, #0]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800353e:	460b      	mov	r3, r1
 8003540:	4313      	orrs	r3, r2
 8003542:	d011      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003548:	3328      	adds	r3, #40	; 0x28
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fb8b 	bl	8003c68 <RCCEx_PLL3_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003558:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003564:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003568:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
}
 8003576:	4618      	mov	r0, r3
 8003578:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	58024400 	.word	0x58024400

08003588 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800358c:	f7fe fde2 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4904      	ldr	r1, [pc, #16]	; (80035b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58024400 	.word	0x58024400
 80035b0:	0800534c 	.word	0x0800534c

080035b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035bc:	4ba1      	ldr	r3, [pc, #644]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80035c6:	4b9f      	ldr	r3, [pc, #636]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	0b1b      	lsrs	r3, r3, #12
 80035cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80035d2:	4b9c      	ldr	r3, [pc, #624]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80035de:	4b99      	ldr	r3, [pc, #612]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8111 	beq.w	8003824 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b02      	cmp	r3, #2
 8003606:	f000 8083 	beq.w	8003710 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b02      	cmp	r3, #2
 800360e:	f200 80a1 	bhi.w	8003754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d056      	beq.n	80036cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800361e:	e099      	b.n	8003754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003620:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02d      	beq.n	8003688 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800362c:	4b85      	ldr	r3, [pc, #532]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	08db      	lsrs	r3, r3, #3
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	4a84      	ldr	r2, [pc, #528]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003666:	ed97 6a03 	vldr	s12, [r7, #12]
 800366a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800384c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003686:	e087      	b.n	8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800384c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ca:	e065      	b.n	8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80036da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800384c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800370e:	e043      	b.n	8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800371e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003732:	ed97 6a03 	vldr	s12, [r7, #12]
 8003736:	eddf 5a45 	vldr	s11, [pc, #276]	; 800384c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800373a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003752:	e021      	b.n	8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003766:	4b37      	ldr	r3, [pc, #220]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003776:	ed97 6a03 	vldr	s12, [r7, #12]
 800377a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800384c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800377e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003796:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	0a5b      	lsrs	r3, r3, #9
 800379e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80037b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037be:	ee17 2a90 	vmov	r2, s15
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80037e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ec:	ee17 2a90 	vmov	r2, s15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	0e1b      	lsrs	r3, r3, #24
 80037fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800380e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800381a:	ee17 2a90 	vmov	r2, s15
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003822:	e008      	b.n	8003836 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
}
 8003836:	bf00      	nop
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	58024400 	.word	0x58024400
 8003848:	03d09000 	.word	0x03d09000
 800384c:	46000000 	.word	0x46000000
 8003850:	4c742400 	.word	0x4c742400
 8003854:	4a742400 	.word	0x4a742400
 8003858:	4af42400 	.word	0x4af42400

0800385c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003864:	4ba1      	ldr	r3, [pc, #644]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800386e:	4b9f      	ldr	r3, [pc, #636]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	0d1b      	lsrs	r3, r3, #20
 8003874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003878:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800387a:	4b9c      	ldr	r3, [pc, #624]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003886:	4b99      	ldr	r3, [pc, #612]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	08db      	lsrs	r3, r3, #3
 800388c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8111 	beq.w	8003acc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	f000 8083 	beq.w	80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f200 80a1 	bhi.w	80039fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d056      	beq.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80038c6:	e099      	b.n	80039fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038c8:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02d      	beq.n	8003930 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038d4:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	4a84      	ldr	r2, [pc, #528]	; (8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003912:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800392e:	e087      	b.n	8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a03 	vldr	s12, [r7, #12]
 8003956:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003972:	e065      	b.n	8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003986:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003996:	ed97 6a03 	vldr	s12, [r7, #12]
 800399a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800399e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039b6:	e043      	b.n	8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80039c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ca:	4b48      	ldr	r3, [pc, #288]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039da:	ed97 6a03 	vldr	s12, [r7, #12]
 80039de:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039fa:	e021      	b.n	8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003a40:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	0a5b      	lsrs	r3, r3, #9
 8003a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a66:	ee17 2a90 	vmov	r2, s15
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003a6e:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a94:	ee17 2a90 	vmov	r2, s15
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac2:	ee17 2a90 	vmov	r2, s15
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003aca:	e008      	b.n	8003ade <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
 8003af0:	03d09000 	.word	0x03d09000
 8003af4:	46000000 	.word	0x46000000
 8003af8:	4c742400 	.word	0x4c742400
 8003afc:	4a742400 	.word	0x4a742400
 8003b00:	4af42400 	.word	0x4af42400

08003b04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b12:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d101      	bne.n	8003b22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e099      	b.n	8003c56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b22:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a4e      	ldr	r2, [pc, #312]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003b28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2e:	f7fd f891 	bl	8000c54 <HAL_GetTick>
 8003b32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b36:	f7fd f88d 	bl	8000c54 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e086      	b.n	8003c56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b48:	4b45      	ldr	r3, [pc, #276]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b54:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	031b      	lsls	r3, r3, #12
 8003b62:	493f      	ldr	r1, [pc, #252]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	628b      	str	r3, [r1, #40]	; 0x28
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	025b      	lsls	r3, r3, #9
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b98:	4931      	ldr	r1, [pc, #196]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b9e:	4b30      	ldr	r3, [pc, #192]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	492d      	ldr	r1, [pc, #180]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	f023 0220 	bic.w	r2, r3, #32
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	4928      	ldr	r1, [pc, #160]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bc2:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bc8:	f023 0310 	bic.w	r3, r3, #16
 8003bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd2:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <RCCEx_PLL2_Config+0x160>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	69d2      	ldr	r2, [r2, #28]
 8003bda:	00d2      	lsls	r2, r2, #3
 8003bdc:	4920      	ldr	r1, [pc, #128]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003be8:	f043 0310 	orr.w	r3, r3, #16
 8003bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003bfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c00:	e00f      	b.n	8003c22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c14:	e005      	b.n	8003c22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2e:	f7fd f811 	bl	8000c54 <HAL_GetTick>
 8003c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c34:	e008      	b.n	8003c48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c36:	f7fd f80d 	bl	8000c54 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e006      	b.n	8003c56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <RCCEx_PLL2_Config+0x15c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	58024400 	.word	0x58024400
 8003c64:	ffff0007 	.word	0xffff0007

08003c68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c76:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d101      	bne.n	8003c86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e099      	b.n	8003dba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c86:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4e      	ldr	r2, [pc, #312]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c92:	f7fc ffdf 	bl	8000c54 <HAL_GetTick>
 8003c96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c98:	e008      	b.n	8003cac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c9a:	f7fc ffdb 	bl	8000c54 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e086      	b.n	8003dba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cac:	4b45      	ldr	r3, [pc, #276]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cb8:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	051b      	lsls	r3, r3, #20
 8003cc6:	493f      	ldr	r1, [pc, #252]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	628b      	str	r3, [r1, #40]	; 0x28
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	025b      	lsls	r3, r3, #9
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cfc:	4931      	ldr	r1, [pc, #196]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d02:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	492d      	ldr	r1, [pc, #180]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4928      	ldr	r1, [pc, #160]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <RCCEx_PLL3_Config+0x160>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	69d2      	ldr	r2, [r2, #28]
 8003d3e:	00d2      	lsls	r2, r2, #3
 8003d40:	4920      	ldr	r1, [pc, #128]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d46:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d64:	e00f      	b.n	8003d86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d106      	bne.n	8003d7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d6c:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d78:	e005      	b.n	8003d86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d92:	f7fc ff5f 	bl	8000c54 <HAL_GetTick>
 8003d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d98:	e008      	b.n	8003dac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003d9a:	f7fc ff5b 	bl	8000c54 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e006      	b.n	8003dba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <RCCEx_PLL3_Config+0x15c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	58024400 	.word	0x58024400
 8003dc8:	ffff0007 	.word	0xffff0007

08003dcc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04a      	b.n	8003e74 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fc fd5d 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2224      	movs	r2, #36	; 0x24
 8003dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8c2 	bl	8003f98 <UART_SetConfig>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02a      	b.n	8003e74 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 ff22 	bl	8004c70 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003e4a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0208 	orr.w	r2, r2, #8
 8003e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 ffa1 	bl	8004db4 <UART_CheckIdleState>
 8003e72:	4603      	mov	r3, r0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d17b      	bne.n	8003f8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_Transmit+0x26>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e074      	b.n	8003f90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2221      	movs	r2, #33	; 0x21
 8003eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eb6:	f7fc fecd 	bl	8000c54 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d108      	bne.n	8003ee8 <HAL_UART_Transmit+0x6c>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	e003      	b.n	8003ef0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ef0:	e030      	b.n	8003f54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2180      	movs	r1, #128	; 0x80
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f001 f803 	bl	8004f08 <UART_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e03d      	b.n	8003f90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e007      	b.n	8003f42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1c8      	bne.n	8003ef2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2140      	movs	r1, #64	; 0x40
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 ffcc 	bl	8004f08 <UART_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e006      	b.n	8003f90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	b092      	sub	sp, #72	; 0x48
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4bbe      	ldr	r3, [pc, #760]	; (80042c0 <UART_SetConfig+0x328>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4ab3      	ldr	r2, [pc, #716]	; (80042c4 <UART_SetConfig+0x32c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004000:	4313      	orrs	r3, r2
 8004002:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4baf      	ldr	r3, [pc, #700]	; (80042c8 <UART_SetConfig+0x330>)
 800400c:	4013      	ands	r3, r2
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004014:	430b      	orrs	r3, r1
 8004016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	f023 010f 	bic.w	r1, r3, #15
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4aa6      	ldr	r2, [pc, #664]	; (80042cc <UART_SetConfig+0x334>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d177      	bne.n	8004128 <UART_SetConfig+0x190>
 8004038:	4ba5      	ldr	r3, [pc, #660]	; (80042d0 <UART_SetConfig+0x338>)
 800403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004040:	2b28      	cmp	r3, #40	; 0x28
 8004042:	d86d      	bhi.n	8004120 <UART_SetConfig+0x188>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0xb4>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	080040f1 	.word	0x080040f1
 8004050:	08004121 	.word	0x08004121
 8004054:	08004121 	.word	0x08004121
 8004058:	08004121 	.word	0x08004121
 800405c:	08004121 	.word	0x08004121
 8004060:	08004121 	.word	0x08004121
 8004064:	08004121 	.word	0x08004121
 8004068:	08004121 	.word	0x08004121
 800406c:	080040f9 	.word	0x080040f9
 8004070:	08004121 	.word	0x08004121
 8004074:	08004121 	.word	0x08004121
 8004078:	08004121 	.word	0x08004121
 800407c:	08004121 	.word	0x08004121
 8004080:	08004121 	.word	0x08004121
 8004084:	08004121 	.word	0x08004121
 8004088:	08004121 	.word	0x08004121
 800408c:	08004101 	.word	0x08004101
 8004090:	08004121 	.word	0x08004121
 8004094:	08004121 	.word	0x08004121
 8004098:	08004121 	.word	0x08004121
 800409c:	08004121 	.word	0x08004121
 80040a0:	08004121 	.word	0x08004121
 80040a4:	08004121 	.word	0x08004121
 80040a8:	08004121 	.word	0x08004121
 80040ac:	08004109 	.word	0x08004109
 80040b0:	08004121 	.word	0x08004121
 80040b4:	08004121 	.word	0x08004121
 80040b8:	08004121 	.word	0x08004121
 80040bc:	08004121 	.word	0x08004121
 80040c0:	08004121 	.word	0x08004121
 80040c4:	08004121 	.word	0x08004121
 80040c8:	08004121 	.word	0x08004121
 80040cc:	08004111 	.word	0x08004111
 80040d0:	08004121 	.word	0x08004121
 80040d4:	08004121 	.word	0x08004121
 80040d8:	08004121 	.word	0x08004121
 80040dc:	08004121 	.word	0x08004121
 80040e0:	08004121 	.word	0x08004121
 80040e4:	08004121 	.word	0x08004121
 80040e8:	08004121 	.word	0x08004121
 80040ec:	08004119 	.word	0x08004119
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040f6:	e326      	b.n	8004746 <UART_SetConfig+0x7ae>
 80040f8:	2304      	movs	r3, #4
 80040fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040fe:	e322      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004100:	2308      	movs	r3, #8
 8004102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004106:	e31e      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004108:	2310      	movs	r3, #16
 800410a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800410e:	e31a      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004110:	2320      	movs	r3, #32
 8004112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004116:	e316      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004118:	2340      	movs	r3, #64	; 0x40
 800411a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800411e:	e312      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004126:	e30e      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a69      	ldr	r2, [pc, #420]	; (80042d4 <UART_SetConfig+0x33c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d130      	bne.n	8004194 <UART_SetConfig+0x1fc>
 8004132:	4b67      	ldr	r3, [pc, #412]	; (80042d0 <UART_SetConfig+0x338>)
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	2b05      	cmp	r3, #5
 800413c:	d826      	bhi.n	800418c <UART_SetConfig+0x1f4>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <UART_SetConfig+0x1ac>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004165 	.word	0x08004165
 800414c:	0800416d 	.word	0x0800416d
 8004150:	08004175 	.word	0x08004175
 8004154:	0800417d 	.word	0x0800417d
 8004158:	08004185 	.word	0x08004185
 800415c:	2300      	movs	r3, #0
 800415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004162:	e2f0      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004164:	2304      	movs	r3, #4
 8004166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800416a:	e2ec      	b.n	8004746 <UART_SetConfig+0x7ae>
 800416c:	2308      	movs	r3, #8
 800416e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004172:	e2e8      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004174:	2310      	movs	r3, #16
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417a:	e2e4      	b.n	8004746 <UART_SetConfig+0x7ae>
 800417c:	2320      	movs	r3, #32
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004182:	e2e0      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800418a:	e2dc      	b.n	8004746 <UART_SetConfig+0x7ae>
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004192:	e2d8      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a4f      	ldr	r2, [pc, #316]	; (80042d8 <UART_SetConfig+0x340>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d130      	bne.n	8004200 <UART_SetConfig+0x268>
 800419e:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <UART_SetConfig+0x338>)
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d826      	bhi.n	80041f8 <UART_SetConfig+0x260>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x218>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041c9 	.word	0x080041c9
 80041b4:	080041d1 	.word	0x080041d1
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041f1 	.word	0x080041f1
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ce:	e2ba      	b.n	8004746 <UART_SetConfig+0x7ae>
 80041d0:	2304      	movs	r3, #4
 80041d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d6:	e2b6      	b.n	8004746 <UART_SetConfig+0x7ae>
 80041d8:	2308      	movs	r3, #8
 80041da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041de:	e2b2      	b.n	8004746 <UART_SetConfig+0x7ae>
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041e6:	e2ae      	b.n	8004746 <UART_SetConfig+0x7ae>
 80041e8:	2320      	movs	r3, #32
 80041ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ee:	e2aa      	b.n	8004746 <UART_SetConfig+0x7ae>
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041f6:	e2a6      	b.n	8004746 <UART_SetConfig+0x7ae>
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041fe:	e2a2      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a35      	ldr	r2, [pc, #212]	; (80042dc <UART_SetConfig+0x344>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d130      	bne.n	800426c <UART_SetConfig+0x2d4>
 800420a:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <UART_SetConfig+0x338>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	2b05      	cmp	r3, #5
 8004214:	d826      	bhi.n	8004264 <UART_SetConfig+0x2cc>
 8004216:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x284>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004235 	.word	0x08004235
 8004220:	0800423d 	.word	0x0800423d
 8004224:	08004245 	.word	0x08004245
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004255 	.word	0x08004255
 8004230:	0800425d 	.word	0x0800425d
 8004234:	2300      	movs	r3, #0
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e284      	b.n	8004746 <UART_SetConfig+0x7ae>
 800423c:	2304      	movs	r3, #4
 800423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004242:	e280      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004244:	2308      	movs	r3, #8
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e27c      	b.n	8004746 <UART_SetConfig+0x7ae>
 800424c:	2310      	movs	r3, #16
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e278      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004254:	2320      	movs	r3, #32
 8004256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800425a:	e274      	b.n	8004746 <UART_SetConfig+0x7ae>
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004262:	e270      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800426a:	e26c      	b.n	8004746 <UART_SetConfig+0x7ae>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <UART_SetConfig+0x348>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d142      	bne.n	80042fc <UART_SetConfig+0x364>
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <UART_SetConfig+0x338>)
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	2b05      	cmp	r3, #5
 8004280:	d838      	bhi.n	80042f4 <UART_SetConfig+0x35c>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0x2f0>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042a1 	.word	0x080042a1
 800428c:	080042a9 	.word	0x080042a9
 8004290:	080042b1 	.word	0x080042b1
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042e5 	.word	0x080042e5
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e24e      	b.n	8004746 <UART_SetConfig+0x7ae>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ae:	e24a      	b.n	8004746 <UART_SetConfig+0x7ae>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b6:	e246      	b.n	8004746 <UART_SetConfig+0x7ae>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042be:	e242      	b.n	8004746 <UART_SetConfig+0x7ae>
 80042c0:	cfff69f3 	.word	0xcfff69f3
 80042c4:	58000c00 	.word	0x58000c00
 80042c8:	11fff4ff 	.word	0x11fff4ff
 80042cc:	40011000 	.word	0x40011000
 80042d0:	58024400 	.word	0x58024400
 80042d4:	40004400 	.word	0x40004400
 80042d8:	40004800 	.word	0x40004800
 80042dc:	40004c00 	.word	0x40004c00
 80042e0:	40005000 	.word	0x40005000
 80042e4:	2320      	movs	r3, #32
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ea:	e22c      	b.n	8004746 <UART_SetConfig+0x7ae>
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e228      	b.n	8004746 <UART_SetConfig+0x7ae>
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e224      	b.n	8004746 <UART_SetConfig+0x7ae>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4ab1      	ldr	r2, [pc, #708]	; (80045c8 <UART_SetConfig+0x630>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d176      	bne.n	80043f4 <UART_SetConfig+0x45c>
 8004306:	4bb1      	ldr	r3, [pc, #708]	; (80045cc <UART_SetConfig+0x634>)
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430e:	2b28      	cmp	r3, #40	; 0x28
 8004310:	d86c      	bhi.n	80043ec <UART_SetConfig+0x454>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <UART_SetConfig+0x380>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	080043bd 	.word	0x080043bd
 800431c:	080043ed 	.word	0x080043ed
 8004320:	080043ed 	.word	0x080043ed
 8004324:	080043ed 	.word	0x080043ed
 8004328:	080043ed 	.word	0x080043ed
 800432c:	080043ed 	.word	0x080043ed
 8004330:	080043ed 	.word	0x080043ed
 8004334:	080043ed 	.word	0x080043ed
 8004338:	080043c5 	.word	0x080043c5
 800433c:	080043ed 	.word	0x080043ed
 8004340:	080043ed 	.word	0x080043ed
 8004344:	080043ed 	.word	0x080043ed
 8004348:	080043ed 	.word	0x080043ed
 800434c:	080043ed 	.word	0x080043ed
 8004350:	080043ed 	.word	0x080043ed
 8004354:	080043ed 	.word	0x080043ed
 8004358:	080043cd 	.word	0x080043cd
 800435c:	080043ed 	.word	0x080043ed
 8004360:	080043ed 	.word	0x080043ed
 8004364:	080043ed 	.word	0x080043ed
 8004368:	080043ed 	.word	0x080043ed
 800436c:	080043ed 	.word	0x080043ed
 8004370:	080043ed 	.word	0x080043ed
 8004374:	080043ed 	.word	0x080043ed
 8004378:	080043d5 	.word	0x080043d5
 800437c:	080043ed 	.word	0x080043ed
 8004380:	080043ed 	.word	0x080043ed
 8004384:	080043ed 	.word	0x080043ed
 8004388:	080043ed 	.word	0x080043ed
 800438c:	080043ed 	.word	0x080043ed
 8004390:	080043ed 	.word	0x080043ed
 8004394:	080043ed 	.word	0x080043ed
 8004398:	080043dd 	.word	0x080043dd
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043ed 	.word	0x080043ed
 80043a4:	080043ed 	.word	0x080043ed
 80043a8:	080043ed 	.word	0x080043ed
 80043ac:	080043ed 	.word	0x080043ed
 80043b0:	080043ed 	.word	0x080043ed
 80043b4:	080043ed 	.word	0x080043ed
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c2:	e1c0      	b.n	8004746 <UART_SetConfig+0x7ae>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e1bc      	b.n	8004746 <UART_SetConfig+0x7ae>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e1b8      	b.n	8004746 <UART_SetConfig+0x7ae>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e1b4      	b.n	8004746 <UART_SetConfig+0x7ae>
 80043dc:	2320      	movs	r3, #32
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e1b0      	b.n	8004746 <UART_SetConfig+0x7ae>
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e1ac      	b.n	8004746 <UART_SetConfig+0x7ae>
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f2:	e1a8      	b.n	8004746 <UART_SetConfig+0x7ae>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a75      	ldr	r2, [pc, #468]	; (80045d0 <UART_SetConfig+0x638>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d130      	bne.n	8004460 <UART_SetConfig+0x4c8>
 80043fe:	4b73      	ldr	r3, [pc, #460]	; (80045cc <UART_SetConfig+0x634>)
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b05      	cmp	r3, #5
 8004408:	d826      	bhi.n	8004458 <UART_SetConfig+0x4c0>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <UART_SetConfig+0x478>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	08004429 	.word	0x08004429
 8004414:	08004431 	.word	0x08004431
 8004418:	08004439 	.word	0x08004439
 800441c:	08004441 	.word	0x08004441
 8004420:	08004449 	.word	0x08004449
 8004424:	08004451 	.word	0x08004451
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e18a      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e186      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e182      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004446:	e17e      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004448:	2320      	movs	r3, #32
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444e:	e17a      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004450:	2340      	movs	r3, #64	; 0x40
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004456:	e176      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445e:	e172      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5b      	ldr	r2, [pc, #364]	; (80045d4 <UART_SetConfig+0x63c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d130      	bne.n	80044cc <UART_SetConfig+0x534>
 800446a:	4b58      	ldr	r3, [pc, #352]	; (80045cc <UART_SetConfig+0x634>)
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	2b05      	cmp	r3, #5
 8004474:	d826      	bhi.n	80044c4 <UART_SetConfig+0x52c>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x4e4>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	08004495 	.word	0x08004495
 8004480:	0800449d 	.word	0x0800449d
 8004484:	080044a5 	.word	0x080044a5
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	2300      	movs	r3, #0
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e154      	b.n	8004746 <UART_SetConfig+0x7ae>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a2:	e150      	b.n	8004746 <UART_SetConfig+0x7ae>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044aa:	e14c      	b.n	8004746 <UART_SetConfig+0x7ae>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b2:	e148      	b.n	8004746 <UART_SetConfig+0x7ae>
 80044b4:	2320      	movs	r3, #32
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ba:	e144      	b.n	8004746 <UART_SetConfig+0x7ae>
 80044bc:	2340      	movs	r3, #64	; 0x40
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c2:	e140      	b.n	8004746 <UART_SetConfig+0x7ae>
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ca:	e13c      	b.n	8004746 <UART_SetConfig+0x7ae>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a41      	ldr	r2, [pc, #260]	; (80045d8 <UART_SetConfig+0x640>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	f040 8082 	bne.w	80045dc <UART_SetConfig+0x644>
 80044d8:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <UART_SetConfig+0x634>)
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e0:	2b28      	cmp	r3, #40	; 0x28
 80044e2:	d86d      	bhi.n	80045c0 <UART_SetConfig+0x628>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <UART_SetConfig+0x554>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	08004591 	.word	0x08004591
 80044f0:	080045c1 	.word	0x080045c1
 80044f4:	080045c1 	.word	0x080045c1
 80044f8:	080045c1 	.word	0x080045c1
 80044fc:	080045c1 	.word	0x080045c1
 8004500:	080045c1 	.word	0x080045c1
 8004504:	080045c1 	.word	0x080045c1
 8004508:	080045c1 	.word	0x080045c1
 800450c:	08004599 	.word	0x08004599
 8004510:	080045c1 	.word	0x080045c1
 8004514:	080045c1 	.word	0x080045c1
 8004518:	080045c1 	.word	0x080045c1
 800451c:	080045c1 	.word	0x080045c1
 8004520:	080045c1 	.word	0x080045c1
 8004524:	080045c1 	.word	0x080045c1
 8004528:	080045c1 	.word	0x080045c1
 800452c:	080045a1 	.word	0x080045a1
 8004530:	080045c1 	.word	0x080045c1
 8004534:	080045c1 	.word	0x080045c1
 8004538:	080045c1 	.word	0x080045c1
 800453c:	080045c1 	.word	0x080045c1
 8004540:	080045c1 	.word	0x080045c1
 8004544:	080045c1 	.word	0x080045c1
 8004548:	080045c1 	.word	0x080045c1
 800454c:	080045a9 	.word	0x080045a9
 8004550:	080045c1 	.word	0x080045c1
 8004554:	080045c1 	.word	0x080045c1
 8004558:	080045c1 	.word	0x080045c1
 800455c:	080045c1 	.word	0x080045c1
 8004560:	080045c1 	.word	0x080045c1
 8004564:	080045c1 	.word	0x080045c1
 8004568:	080045c1 	.word	0x080045c1
 800456c:	080045b1 	.word	0x080045b1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c1 	.word	0x080045c1
 800457c:	080045c1 	.word	0x080045c1
 8004580:	080045c1 	.word	0x080045c1
 8004584:	080045c1 	.word	0x080045c1
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045b9 	.word	0x080045b9
 8004590:	2301      	movs	r3, #1
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004596:	e0d6      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004598:	2304      	movs	r3, #4
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459e:	e0d2      	b.n	8004746 <UART_SetConfig+0x7ae>
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045a6:	e0ce      	b.n	8004746 <UART_SetConfig+0x7ae>
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ae:	e0ca      	b.n	8004746 <UART_SetConfig+0x7ae>
 80045b0:	2320      	movs	r3, #32
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b6:	e0c6      	b.n	8004746 <UART_SetConfig+0x7ae>
 80045b8:	2340      	movs	r3, #64	; 0x40
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	e0c2      	b.n	8004746 <UART_SetConfig+0x7ae>
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c6:	e0be      	b.n	8004746 <UART_SetConfig+0x7ae>
 80045c8:	40011400 	.word	0x40011400
 80045cc:	58024400 	.word	0x58024400
 80045d0:	40007800 	.word	0x40007800
 80045d4:	40007c00 	.word	0x40007c00
 80045d8:	40011800 	.word	0x40011800
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4aad      	ldr	r2, [pc, #692]	; (8004898 <UART_SetConfig+0x900>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d176      	bne.n	80046d4 <UART_SetConfig+0x73c>
 80045e6:	4bad      	ldr	r3, [pc, #692]	; (800489c <UART_SetConfig+0x904>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ee:	2b28      	cmp	r3, #40	; 0x28
 80045f0:	d86c      	bhi.n	80046cc <UART_SetConfig+0x734>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x660>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	0800469d 	.word	0x0800469d
 80045fc:	080046cd 	.word	0x080046cd
 8004600:	080046cd 	.word	0x080046cd
 8004604:	080046cd 	.word	0x080046cd
 8004608:	080046cd 	.word	0x080046cd
 800460c:	080046cd 	.word	0x080046cd
 8004610:	080046cd 	.word	0x080046cd
 8004614:	080046cd 	.word	0x080046cd
 8004618:	080046a5 	.word	0x080046a5
 800461c:	080046cd 	.word	0x080046cd
 8004620:	080046cd 	.word	0x080046cd
 8004624:	080046cd 	.word	0x080046cd
 8004628:	080046cd 	.word	0x080046cd
 800462c:	080046cd 	.word	0x080046cd
 8004630:	080046cd 	.word	0x080046cd
 8004634:	080046cd 	.word	0x080046cd
 8004638:	080046ad 	.word	0x080046ad
 800463c:	080046cd 	.word	0x080046cd
 8004640:	080046cd 	.word	0x080046cd
 8004644:	080046cd 	.word	0x080046cd
 8004648:	080046cd 	.word	0x080046cd
 800464c:	080046cd 	.word	0x080046cd
 8004650:	080046cd 	.word	0x080046cd
 8004654:	080046cd 	.word	0x080046cd
 8004658:	080046b5 	.word	0x080046b5
 800465c:	080046cd 	.word	0x080046cd
 8004660:	080046cd 	.word	0x080046cd
 8004664:	080046cd 	.word	0x080046cd
 8004668:	080046cd 	.word	0x080046cd
 800466c:	080046cd 	.word	0x080046cd
 8004670:	080046cd 	.word	0x080046cd
 8004674:	080046cd 	.word	0x080046cd
 8004678:	080046bd 	.word	0x080046bd
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046cd 	.word	0x080046cd
 8004684:	080046cd 	.word	0x080046cd
 8004688:	080046cd 	.word	0x080046cd
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046cd 	.word	0x080046cd
 8004694:	080046cd 	.word	0x080046cd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	2301      	movs	r3, #1
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a2:	e050      	b.n	8004746 <UART_SetConfig+0x7ae>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e04c      	b.n	8004746 <UART_SetConfig+0x7ae>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e048      	b.n	8004746 <UART_SetConfig+0x7ae>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ba:	e044      	b.n	8004746 <UART_SetConfig+0x7ae>
 80046bc:	2320      	movs	r3, #32
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c2:	e040      	b.n	8004746 <UART_SetConfig+0x7ae>
 80046c4:	2340      	movs	r3, #64	; 0x40
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ca:	e03c      	b.n	8004746 <UART_SetConfig+0x7ae>
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d2:	e038      	b.n	8004746 <UART_SetConfig+0x7ae>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a71      	ldr	r2, [pc, #452]	; (80048a0 <UART_SetConfig+0x908>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d130      	bne.n	8004740 <UART_SetConfig+0x7a8>
 80046de:	4b6f      	ldr	r3, [pc, #444]	; (800489c <UART_SetConfig+0x904>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d826      	bhi.n	8004738 <UART_SetConfig+0x7a0>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x758>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004709 	.word	0x08004709
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004719 	.word	0x08004719
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e01a      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e016      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e012      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e00e      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004728:	2320      	movs	r3, #32
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e00a      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004730:	2340      	movs	r3, #64	; 0x40
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e006      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473e:	e002      	b.n	8004746 <UART_SetConfig+0x7ae>
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a55      	ldr	r2, [pc, #340]	; (80048a0 <UART_SetConfig+0x908>)
 800474c:	4293      	cmp	r3, r2
 800474e:	f040 80f8 	bne.w	8004942 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004752:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004756:	2b20      	cmp	r3, #32
 8004758:	dc46      	bgt.n	80047e8 <UART_SetConfig+0x850>
 800475a:	2b02      	cmp	r3, #2
 800475c:	db75      	blt.n	800484a <UART_SetConfig+0x8b2>
 800475e:	3b02      	subs	r3, #2
 8004760:	2b1e      	cmp	r3, #30
 8004762:	d872      	bhi.n	800484a <UART_SetConfig+0x8b2>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0x7d4>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	080047ef 	.word	0x080047ef
 8004770:	0800484b 	.word	0x0800484b
 8004774:	080047f7 	.word	0x080047f7
 8004778:	0800484b 	.word	0x0800484b
 800477c:	0800484b 	.word	0x0800484b
 8004780:	0800484b 	.word	0x0800484b
 8004784:	08004807 	.word	0x08004807
 8004788:	0800484b 	.word	0x0800484b
 800478c:	0800484b 	.word	0x0800484b
 8004790:	0800484b 	.word	0x0800484b
 8004794:	0800484b 	.word	0x0800484b
 8004798:	0800484b 	.word	0x0800484b
 800479c:	0800484b 	.word	0x0800484b
 80047a0:	0800484b 	.word	0x0800484b
 80047a4:	08004817 	.word	0x08004817
 80047a8:	0800484b 	.word	0x0800484b
 80047ac:	0800484b 	.word	0x0800484b
 80047b0:	0800484b 	.word	0x0800484b
 80047b4:	0800484b 	.word	0x0800484b
 80047b8:	0800484b 	.word	0x0800484b
 80047bc:	0800484b 	.word	0x0800484b
 80047c0:	0800484b 	.word	0x0800484b
 80047c4:	0800484b 	.word	0x0800484b
 80047c8:	0800484b 	.word	0x0800484b
 80047cc:	0800484b 	.word	0x0800484b
 80047d0:	0800484b 	.word	0x0800484b
 80047d4:	0800484b 	.word	0x0800484b
 80047d8:	0800484b 	.word	0x0800484b
 80047dc:	0800484b 	.word	0x0800484b
 80047e0:	0800484b 	.word	0x0800484b
 80047e4:	0800483d 	.word	0x0800483d
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d02a      	beq.n	8004842 <UART_SetConfig+0x8aa>
 80047ec:	e02d      	b.n	800484a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047ee:	f7fe fecb 	bl	8003588 <HAL_RCCEx_GetD3PCLK1Freq>
 80047f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80047f4:	e02f      	b.n	8004856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe feda 	bl	80035b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004804:	e027      	b.n	8004856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004806:	f107 0318 	add.w	r3, r7, #24
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff f826 	bl	800385c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004814:	e01f      	b.n	8004856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004816:	4b21      	ldr	r3, [pc, #132]	; (800489c <UART_SetConfig+0x904>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004822:	4b1e      	ldr	r3, [pc, #120]	; (800489c <UART_SetConfig+0x904>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	08db      	lsrs	r3, r3, #3
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <UART_SetConfig+0x90c>)
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004834:	e00f      	b.n	8004856 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004836:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <UART_SetConfig+0x90c>)
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800483a:	e00c      	b.n	8004856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <UART_SetConfig+0x910>)
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004840:	e009      	b.n	8004856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004848:	e005      	b.n	8004856 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 81ee 	beq.w	8004c3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <UART_SetConfig+0x914>)
 8004864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004868:	461a      	mov	r2, r3
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004870:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800487e:	429a      	cmp	r2, r3
 8004880:	d305      	bcc.n	800488e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	429a      	cmp	r2, r3
 800488c:	d910      	bls.n	80048b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004894:	e1d1      	b.n	8004c3a <UART_SetConfig+0xca2>
 8004896:	bf00      	nop
 8004898:	40011c00 	.word	0x40011c00
 800489c:	58024400 	.word	0x58024400
 80048a0:	58000c00 	.word	0x58000c00
 80048a4:	03d09000 	.word	0x03d09000
 80048a8:	003d0900 	.word	0x003d0900
 80048ac:	0800535c 	.word	0x0800535c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b2:	2200      	movs	r2, #0
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	60fa      	str	r2, [r7, #12]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	4ac0      	ldr	r2, [pc, #768]	; (8004bc0 <UART_SetConfig+0xc28>)
 80048be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2200      	movs	r2, #0
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d2:	f7fb fd0b 	bl	80002ec <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	020b      	lsls	r3, r1, #8
 80048e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048ec:	0202      	lsls	r2, r0, #8
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	6849      	ldr	r1, [r1, #4]
 80048f2:	0849      	lsrs	r1, r1, #1
 80048f4:	2000      	movs	r0, #0
 80048f6:	460c      	mov	r4, r1
 80048f8:	4605      	mov	r5, r0
 80048fa:	eb12 0804 	adds.w	r8, r2, r4
 80048fe:	eb43 0905 	adc.w	r9, r3, r5
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	469a      	mov	sl, r3
 800490a:	4693      	mov	fp, r2
 800490c:	4652      	mov	r2, sl
 800490e:	465b      	mov	r3, fp
 8004910:	4640      	mov	r0, r8
 8004912:	4649      	mov	r1, r9
 8004914:	f7fb fcea 	bl	80002ec <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4613      	mov	r3, r2
 800491e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004926:	d308      	bcc.n	800493a <UART_SetConfig+0x9a2>
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492e:	d204      	bcs.n	800493a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	e17f      	b.n	8004c3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004940:	e17b      	b.n	8004c3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	f040 80bd 	bne.w	8004ac8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800494e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004952:	2b20      	cmp	r3, #32
 8004954:	dc48      	bgt.n	80049e8 <UART_SetConfig+0xa50>
 8004956:	2b00      	cmp	r3, #0
 8004958:	db7b      	blt.n	8004a52 <UART_SetConfig+0xaba>
 800495a:	2b20      	cmp	r3, #32
 800495c:	d879      	bhi.n	8004a52 <UART_SetConfig+0xaba>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0x9cc>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	080049ef 	.word	0x080049ef
 8004968:	080049f7 	.word	0x080049f7
 800496c:	08004a53 	.word	0x08004a53
 8004970:	08004a53 	.word	0x08004a53
 8004974:	080049ff 	.word	0x080049ff
 8004978:	08004a53 	.word	0x08004a53
 800497c:	08004a53 	.word	0x08004a53
 8004980:	08004a53 	.word	0x08004a53
 8004984:	08004a0f 	.word	0x08004a0f
 8004988:	08004a53 	.word	0x08004a53
 800498c:	08004a53 	.word	0x08004a53
 8004990:	08004a53 	.word	0x08004a53
 8004994:	08004a53 	.word	0x08004a53
 8004998:	08004a53 	.word	0x08004a53
 800499c:	08004a53 	.word	0x08004a53
 80049a0:	08004a53 	.word	0x08004a53
 80049a4:	08004a1f 	.word	0x08004a1f
 80049a8:	08004a53 	.word	0x08004a53
 80049ac:	08004a53 	.word	0x08004a53
 80049b0:	08004a53 	.word	0x08004a53
 80049b4:	08004a53 	.word	0x08004a53
 80049b8:	08004a53 	.word	0x08004a53
 80049bc:	08004a53 	.word	0x08004a53
 80049c0:	08004a53 	.word	0x08004a53
 80049c4:	08004a53 	.word	0x08004a53
 80049c8:	08004a53 	.word	0x08004a53
 80049cc:	08004a53 	.word	0x08004a53
 80049d0:	08004a53 	.word	0x08004a53
 80049d4:	08004a53 	.word	0x08004a53
 80049d8:	08004a53 	.word	0x08004a53
 80049dc:	08004a53 	.word	0x08004a53
 80049e0:	08004a53 	.word	0x08004a53
 80049e4:	08004a45 	.word	0x08004a45
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d02e      	beq.n	8004a4a <UART_SetConfig+0xab2>
 80049ec:	e031      	b.n	8004a52 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ee:	f7fd fbe1 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 80049f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049f4:	e033      	b.n	8004a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f6:	f7fd fbf3 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 80049fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049fc:	e02f      	b.n	8004a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fdd6 	bl	80035b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a0c:	e027      	b.n	8004a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a0e:	f107 0318 	add.w	r3, r7, #24
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe ff22 	bl	800385c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a1c:	e01f      	b.n	8004a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a1e:	4b69      	ldr	r3, [pc, #420]	; (8004bc4 <UART_SetConfig+0xc2c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a2a:	4b66      	ldr	r3, [pc, #408]	; (8004bc4 <UART_SetConfig+0xc2c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	4a64      	ldr	r2, [pc, #400]	; (8004bc8 <UART_SetConfig+0xc30>)
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a3c:	e00f      	b.n	8004a5e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004a3e:	4b62      	ldr	r3, [pc, #392]	; (8004bc8 <UART_SetConfig+0xc30>)
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a42:	e00c      	b.n	8004a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a44:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <UART_SetConfig+0xc34>)
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a48:	e009      	b.n	8004a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a50:	e005      	b.n	8004a5e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80ea 	beq.w	8004c3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	4a55      	ldr	r2, [pc, #340]	; (8004bc0 <UART_SetConfig+0xc28>)
 8004a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a78:	005a      	lsls	r2, r3, #1
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	441a      	add	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d916      	bls.n	8004ac0 <UART_SetConfig+0xb28>
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d212      	bcs.n	8004ac0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f023 030f 	bic.w	r3, r3, #15
 8004aa2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	e0bc      	b.n	8004c3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ac6:	e0b8      	b.n	8004c3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	dc4b      	bgt.n	8004b68 <UART_SetConfig+0xbd0>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f2c0 8087 	blt.w	8004be4 <UART_SetConfig+0xc4c>
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	f200 8084 	bhi.w	8004be4 <UART_SetConfig+0xc4c>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xb4c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b6f 	.word	0x08004b6f
 8004ae8:	08004b77 	.word	0x08004b77
 8004aec:	08004be5 	.word	0x08004be5
 8004af0:	08004be5 	.word	0x08004be5
 8004af4:	08004b7f 	.word	0x08004b7f
 8004af8:	08004be5 	.word	0x08004be5
 8004afc:	08004be5 	.word	0x08004be5
 8004b00:	08004be5 	.word	0x08004be5
 8004b04:	08004b8f 	.word	0x08004b8f
 8004b08:	08004be5 	.word	0x08004be5
 8004b0c:	08004be5 	.word	0x08004be5
 8004b10:	08004be5 	.word	0x08004be5
 8004b14:	08004be5 	.word	0x08004be5
 8004b18:	08004be5 	.word	0x08004be5
 8004b1c:	08004be5 	.word	0x08004be5
 8004b20:	08004be5 	.word	0x08004be5
 8004b24:	08004b9f 	.word	0x08004b9f
 8004b28:	08004be5 	.word	0x08004be5
 8004b2c:	08004be5 	.word	0x08004be5
 8004b30:	08004be5 	.word	0x08004be5
 8004b34:	08004be5 	.word	0x08004be5
 8004b38:	08004be5 	.word	0x08004be5
 8004b3c:	08004be5 	.word	0x08004be5
 8004b40:	08004be5 	.word	0x08004be5
 8004b44:	08004be5 	.word	0x08004be5
 8004b48:	08004be5 	.word	0x08004be5
 8004b4c:	08004be5 	.word	0x08004be5
 8004b50:	08004be5 	.word	0x08004be5
 8004b54:	08004be5 	.word	0x08004be5
 8004b58:	08004be5 	.word	0x08004be5
 8004b5c:	08004be5 	.word	0x08004be5
 8004b60:	08004be5 	.word	0x08004be5
 8004b64:	08004bd7 	.word	0x08004bd7
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d037      	beq.n	8004bdc <UART_SetConfig+0xc44>
 8004b6c:	e03a      	b.n	8004be4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6e:	f7fd fb21 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8004b72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b74:	e03c      	b.n	8004bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b76:	f7fd fb33 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8004b7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b7c:	e038      	b.n	8004bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fd16 	bl	80035b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b8c:	e030      	b.n	8004bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b8e:	f107 0318 	add.w	r3, r7, #24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe fe62 	bl	800385c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b9c:	e028      	b.n	8004bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <UART_SetConfig+0xc2c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d012      	beq.n	8004bd0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <UART_SetConfig+0xc2c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	08db      	lsrs	r3, r3, #3
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <UART_SetConfig+0xc30>)
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bbc:	e018      	b.n	8004bf0 <UART_SetConfig+0xc58>
 8004bbe:	bf00      	nop
 8004bc0:	0800535c 	.word	0x0800535c
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	03d09000 	.word	0x03d09000
 8004bcc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004bd0:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <UART_SetConfig+0xccc>)
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bd4:	e00c      	b.n	8004bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <UART_SetConfig+0xcd0>)
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bda:	e009      	b.n	8004bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004be2:	e005      	b.n	8004bf0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bee:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d021      	beq.n	8004c3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <UART_SetConfig+0xcd4>)
 8004bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c04:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	441a      	add	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d909      	bls.n	8004c34 <UART_SetConfig+0xc9c>
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d205      	bcs.n	8004c34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e002      	b.n	8004c3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3748      	adds	r7, #72	; 0x48
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	003d0900 	.word	0x003d0900
 8004c6c:	0800535c 	.word	0x0800535c

08004c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d6e:	d10a      	bne.n	8004d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b098      	sub	sp, #96	; 0x60
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc4:	f7fb ff46 	bl	8000c54 <HAL_GetTick>
 8004dc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d12f      	bne.n	8004e38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f88e 	bl	8004f08 <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d022      	beq.n	8004e38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e06:	653b      	str	r3, [r7, #80]	; 0x50
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
 8004e12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e063      	b.n	8004f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d149      	bne.n	8004eda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f857 	bl	8004f08 <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d03c      	beq.n	8004eda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e6      	bne.n	8004e60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb2:	61fa      	str	r2, [r7, #28]
 8004eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	69b9      	ldr	r1, [r7, #24]
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e5      	bne.n	8004e92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e012      	b.n	8004f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3758      	adds	r7, #88	; 0x58
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f18:	e049      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d045      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f22:	f7fb fe97 	bl	8000c54 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e048      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d031      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d110      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f839 	bl	8004fd8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e029      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f88:	d111      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f81f 	bl	8004fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e00f      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d0a6      	beq.n	8004f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b095      	sub	sp, #84	; 0x54
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8005000:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e6      	bne.n	8004fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3308      	adds	r3, #8
 8005018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	61fb      	str	r3, [r7, #28]
   return(result);
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <UART_EndRxTransfer+0xc8>)
 8005026:	4013      	ands	r3, r2
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e5      	bne.n	8005012 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d118      	bne.n	8005080 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	60bb      	str	r3, [r7, #8]
   return(result);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f023 0310 	bic.w	r3, r3, #16
 8005062:	647b      	str	r3, [r7, #68]	; 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6979      	ldr	r1, [r7, #20]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	613b      	str	r3, [r7, #16]
   return(result);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e6      	bne.n	800504e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005094:	bf00      	nop
 8005096:	3754      	adds	r7, #84	; 0x54
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	effffffe 	.word	0xeffffffe

080050a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_UARTEx_DisableFifoMode+0x16>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e027      	b.n	800510a <HAL_UARTEx_DisableFifoMode+0x66>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800512a:	2302      	movs	r3, #2
 800512c:	e02d      	b.n	800518a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2224      	movs	r2, #36	; 0x24
 800513a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f850 	bl	8005210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e02d      	b.n	8005206 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2224      	movs	r2, #36	; 0x24
 80051b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f812 	bl	8005210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800521c:	2b00      	cmp	r3, #0
 800521e:	d108      	bne.n	8005232 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005230:	e031      	b.n	8005296 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005232:	2310      	movs	r3, #16
 8005234:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005236:	2310      	movs	r3, #16
 8005238:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	0e5b      	lsrs	r3, r3, #25
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	0f5b      	lsrs	r3, r3, #29
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	7b3a      	ldrb	r2, [r7, #12]
 800525e:	4911      	ldr	r1, [pc, #68]	; (80052a4 <UARTEx_SetNbDataToProcess+0x94>)
 8005260:	5c8a      	ldrb	r2, [r1, r2]
 8005262:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005266:	7b3a      	ldrb	r2, [r7, #12]
 8005268:	490f      	ldr	r1, [pc, #60]	; (80052a8 <UARTEx_SetNbDataToProcess+0x98>)
 800526a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800526c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	7b7a      	ldrb	r2, [r7, #13]
 800527c:	4909      	ldr	r1, [pc, #36]	; (80052a4 <UARTEx_SetNbDataToProcess+0x94>)
 800527e:	5c8a      	ldrb	r2, [r1, r2]
 8005280:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005284:	7b7a      	ldrb	r2, [r7, #13]
 8005286:	4908      	ldr	r1, [pc, #32]	; (80052a8 <UARTEx_SetNbDataToProcess+0x98>)
 8005288:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800528a:	fb93 f3f2 	sdiv	r3, r3, r2
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	08005374 	.word	0x08005374
 80052a8:	0800537c 	.word	0x0800537c

080052ac <memset>:
 80052ac:	4402      	add	r2, r0
 80052ae:	4603      	mov	r3, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4d0d      	ldr	r5, [pc, #52]	; (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	; (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2600      	movs	r6, #0
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4d0b      	ldr	r5, [pc, #44]	; (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	; (8005300 <__libc_init_array+0x44>)
 80052d0:	f000 f818 	bl	8005304 <_init>
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2600      	movs	r6, #0
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	0800538c 	.word	0x0800538c
 80052f8:	0800538c 	.word	0x0800538c
 80052fc:	0800538c 	.word	0x0800538c
 8005300:	08005390 	.word	0x08005390

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
