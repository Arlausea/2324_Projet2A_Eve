
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c1c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000270  24000010  08007150  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000280  08007150  00020280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010b07  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002201  00000000  00000000  00030b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b30  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000089c  00000000  00000000  000338c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f360  00000000  00000000  0003415c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012144  00000000  00000000  000634bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013330b  00000000  00000000  00075600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002d5c  00000000  00000000  001a890c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001ab668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006eb0 	.word	0x08006eb0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006eb0 	.word	0x08006eb0

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80005f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005f8:	6019      	str	r1, [r3, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000600:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000604:	4602      	mov	r2, r0
 8000606:	801a      	strh	r2, [r3, #0]
 8000608:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800060c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000610:	460a      	mov	r2, r1
 8000612:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 8000614:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000618:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <update_crc+0xd8>)
 800061e:	4618      	mov	r0, r3
 8000620:	4611      	mov	r1, r2
 8000622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000626:	461a      	mov	r2, r3
 8000628:	f006 fc34 	bl	8006e94 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 800062c:	2300      	movs	r3, #0
 800062e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000632:	e031      	b.n	8000698 <update_crc+0xb0>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000634:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000638:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29a      	uxth	r2, r3
 8000642:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000646:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800064a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800064e:	6809      	ldr	r1, [r1, #0]
 8000650:	440b      	add	r3, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4053      	eors	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000660:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000664:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b21a      	sxth	r2, r3
 800066e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000672:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800067a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4053      	eors	r3, r2
 8000682:	b21a      	sxth	r2, r3
 8000684:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000688:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800068c:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 800068e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000692:	3301      	adds	r3, #1
 8000694:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000698:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800069c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80006a0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d3c4      	bcc.n	8000634 <update_crc+0x4c>
    }

    return crc_accum;
 80006aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006ae:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006b2:	881b      	ldrh	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	08006ec8 	.word	0x08006ec8

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b08f      	sub	sp, #60	; 0x3c
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fdd3 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f87d 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fa31 	bl	8000b38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006d6:	f000 f9db 	bl	8000a90 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006da:	f000 fa25 	bl	8000b28 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 80006de:	f000 f8eb 	bl	80008b8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80006e2:	f000 f981 	bl	80009e8 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80006e6:	f000 f933 	bl	8000950 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /*toogle LED*/
  uint8_t Dynamixel_ToogleLED_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <main+0xf8>)
 80006ec:	f107 0420 	add.w	r4, r7, #32
 80006f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f2:	c407      	stmia	r4!, {r0, r1, r2}
 80006f4:	7023      	strb	r3, [r4, #0]
		  /*débutparam, address 65:*/ ,0x41,0x00
		  /*value in the address*/,0x01
  	  	  /*on calcul le CRC après */,0x00,0x00};

  int array_size = sizeof(Dynamixel_ToogleLED_XL430) / sizeof(Dynamixel_ToogleLED_XL430[0]);
 80006f6:	230d      	movs	r3, #13
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34

  unsigned short crc = update_crc(0, Dynamixel_ToogleLED_XL430, array_size);
 80006fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4619      	mov	r1, r3
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff ff6f 	bl	80005e8 <update_crc>
 800070a:	4603      	mov	r3, r0
 800070c:	867b      	strh	r3, [r7, #50]	; 0x32
  unsigned char crc_l = (unsigned char)(crc & 0x00FF);
 800070e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000710:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  unsigned char crc_h = (unsigned char)((crc >> 8) & 0x00FF);
 8000714:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  Dynamixel_ToogleLED_XL430[array_size-2]=crc_l;
 800071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000720:	3b02      	subs	r3, #2
 8000722:	3338      	adds	r3, #56	; 0x38
 8000724:	443b      	add	r3, r7
 8000726:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800072a:	f803 2c18 	strb.w	r2, [r3, #-24]
  Dynamixel_ToogleLED_XL430[array_size-1]=crc_h;
 800072e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000730:	3b01      	subs	r3, #1
 8000732:	3338      	adds	r3, #56	; 0x38
 8000734:	443b      	add	r3, r7
 8000736:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800073a:	f803 2c18 	strb.w	r2, [r3, #-24]


  /*change position to 90*/
  uint8_t Dynamixel_ChangePosition_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x09, 0x00,/*type instruction, ici write*/0x03
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0xfc>)
 8000740:	f107 0410 	add.w	r4, r7, #16
 8000744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   		  /*débutparam, address 116:*/ ,0x74,0x00
   		  /*value in the address : 2048*/,0x00,0x08,0x00,0x00
     	  	  /*CRC*/				,0xCA,0x89};

  /*autorise le moteur a tourner ( pas de transimission/récpetion possible dans ce mode*/
    uint8_t Dynamixel_RotateMode_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <main+0x100>)
 800074c:	463c      	mov	r4, r7
 800074e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000750:	c407      	stmia	r4!, {r0, r1, r2}
 8000752:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  // Enable the UART transmitter by setting the RE bit in USART_CR1
	  huart3.Instance->CR1 |= USART_CR1_TE;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <main+0x104>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <main+0x104>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0208 	orr.w	r2, r2, #8
 8000762:	601a      	str	r2, [r3, #0]
	  // Disable the UART receiver by clearing the RE bit in USART_CR1
	  huart3.Instance->CR1 &= ~USART_CR1_RE;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <main+0x104>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <main+0x104>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0204 	bic.w	r2, r2, #4
 8000772:	601a      	str	r2, [r3, #0]

	  //HAL_UART_Transmit(&huart3,Dynamixel_ToogleLED_XL430,sizeof(Dynamixel_ToogleLED_XL430),100);
	  send_dynamixel(Dynamixel_ToogleLED_XL430, sizeof(Dynamixel_ToogleLED_XL430));
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	210d      	movs	r1, #13
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fafc 	bl	8000d78 <send_dynamixel>
	  while (!(huart3.Instance->ISR & USART_ISR_TC));
 8000780:	bf00      	nop
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <main+0x104>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f8      	beq.n	8000782 <main+0xbe>

	  // Enable the UART receiver by setting the RE bit in USART_CR1
	   huart3.Instance->CR1 |= USART_CR1_RE;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <main+0x104>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <main+0x104>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f042 0204 	orr.w	r2, r2, #4
 800079e:	601a      	str	r2, [r3, #0]
	   // Disable the UART transmitter by clearing the RE bit in USART_CR1
	   huart3.Instance->CR1 &= ~USART_CR1_TE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <main+0x104>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <main+0x104>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f022 0208 	bic.w	r2, r2, #8
 80007ae:	601a      	str	r2, [r3, #0]

	  //sprintf(UART_buf,"LAB:STM32H7A3>>");

	  HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fdf0 	bl	8001398 <HAL_Delay>
	  huart3.Instance->CR1 |= USART_CR1_TE;
 80007b8:	e7cc      	b.n	8000754 <main+0x90>
 80007ba:	bf00      	nop
 80007bc:	080070c8 	.word	0x080070c8
 80007c0:	080070d8 	.word	0x080070d8
 80007c4:	080070e8 	.word	0x080070e8
 80007c8:	240001e8 	.word	0x240001e8

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	; 0x70
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	224c      	movs	r2, #76	; 0x4c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 fb2e 	bl	8006e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2220      	movs	r2, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fb28 	bl	8006e3c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007ec:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <SystemClock_Config+0xe4>)
 80007ee:	f04f 32ff 	mov.w	r2, #4294967295
 80007f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f6:	2004      	movs	r0, #4
 80007f8:	f001 fe30 	bl	800245c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <SystemClock_Config+0xe8>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <SystemClock_Config+0xe8>)
 8000806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <SystemClock_Config+0xe8>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000818:	bf00      	nop
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <SystemClock_Config+0xe8>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000826:	d1f8      	bne.n	800081a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000828:	2321      	movs	r3, #33	; 0x21
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800082c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000832:	2301      	movs	r3, #1
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000842:	2318      	movs	r3, #24
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800084a:	2304      	movs	r3, #4
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fe54 	bl	8002510 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800086e:	f000 fa7d 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	; 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2102      	movs	r1, #2
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fa6c 	bl	8002d74 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008a2:	f000 fa63 	bl	8000d6c <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3770      	adds	r7, #112	; 0x70
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	58024400 	.word	0x58024400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_UART4_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_UART4_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_UART4_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_UART4_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_UART4_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_UART4_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_UART4_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_UART4_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_UART4_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_UART4_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_UART4_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_UART4_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_UART4_Init+0x90>)
 8000902:	f004 fbf3 	bl	80050ec <HAL_HalfDuplex_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 fa2e 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_UART4_Init+0x90>)
 8000914:	f006 f9c8 	bl	8006ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 fa25 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_UART4_Init+0x90>)
 8000926:	f006 f9fd 	bl	8006d24 <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 fa1c 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_UART4_Init+0x90>)
 8000936:	f006 f97e 	bl	8006c36 <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 fa14 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2400002c 	.word	0x2400002c
 800094c:	40004c00 	.word	0x40004c00

08000950 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_UART5_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_UART5_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_UART5_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_UART5_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_UART5_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_UART5_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_UART5_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_UART5_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_UART5_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_UART5_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_UART5_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_UART5_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_UART5_Init+0x90>)
 800099a:	f004 fb57 	bl	800504c <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f9e2 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_UART5_Init+0x90>)
 80009ac:	f006 f97c 	bl	8006ca8 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f9d9 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_UART5_Init+0x90>)
 80009be:	f006 f9b1 	bl	8006d24 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f9d0 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_UART5_Init+0x90>)
 80009ce:	f006 f932 	bl	8006c36 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f9c8 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240000c0 	.word	0x240000c0
 80009e4:	40005000 	.word	0x40005000

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 80009ee:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <MX_USART1_UART_Init+0xa4>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a36:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a40:	f004 fb54 	bl	80050ec <HAL_HalfDuplex_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8000a4a:	f000 f98f 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a52:	f006 f929 	bl	8006ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8000a5c:	f000 f986 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a64:	f006 f95e 	bl	8006d24 <HAL_UARTEx_SetRxFifoThreshold>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000a6e:	f000 f97d 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART1_UART_Init+0xa0>)
 8000a74:	f006 f8df 	bl	8006c36 <HAL_UARTEx_DisableFifoMode>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8000a7e:	f000 f975 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	24000154 	.word	0x24000154
 8000a8c:	40011000 	.word	0x40011000

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <MX_USART3_UART_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ada:	f004 fab7 	bl	800504c <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f000 f942 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aec:	f006 f8dc 	bl	8006ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 f939 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000afe:	f006 f911 	bl	8006d24 <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f000 f930 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f006 f892 	bl	8006c36 <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f928 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	240001e8 	.word	0x240001e8
 8000b24:	40004800 	.word	0x40004800

08000b28 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b54:	4a7e      	ldr	r2, [pc, #504]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b5e:	4b7c      	ldr	r3, [pc, #496]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	623b      	str	r3, [r7, #32]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6c:	4b78      	ldr	r3, [pc, #480]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b72:	4a77      	ldr	r2, [pc, #476]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7c:	4b74      	ldr	r3, [pc, #464]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4b71      	ldr	r3, [pc, #452]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b90:	4a6f      	ldr	r2, [pc, #444]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9a:	4b6d      	ldr	r3, [pc, #436]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b69      	ldr	r3, [pc, #420]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000baa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bae:	4a68      	ldr	r2, [pc, #416]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb8:	4b65      	ldr	r3, [pc, #404]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b62      	ldr	r3, [pc, #392]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000bc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bcc:	4a60      	ldr	r2, [pc, #384]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd6:	4b5e      	ldr	r3, [pc, #376]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be4:	4b5a      	ldr	r3, [pc, #360]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bea:	4a59      	ldr	r2, [pc, #356]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf4:	4b56      	ldr	r3, [pc, #344]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000c04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c08:	4a51      	ldr	r2, [pc, #324]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c12:	4b4f      	ldr	r3, [pc, #316]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c20:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000c22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c26:	4a4a      	ldr	r2, [pc, #296]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c30:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	4843      	ldr	r0, [pc, #268]	; (8000d54 <MX_GPIO_Init+0x21c>)
 8000c46:	f001 fbef 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c50:	4841      	ldr	r0, [pc, #260]	; (8000d58 <MX_GPIO_Init+0x220>)
 8000c52:	f001 fbe9 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4840      	ldr	r0, [pc, #256]	; (8000d5c <MX_GPIO_Init+0x224>)
 8000c5c:	f001 fbe4 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	483a      	ldr	r0, [pc, #232]	; (8000d60 <MX_GPIO_Init+0x228>)
 8000c76:	f001 fa27 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4830      	ldr	r0, [pc, #192]	; (8000d54 <MX_GPIO_Init+0x21c>)
 8000c94:	f001 fa18 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c98:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4829      	ldr	r0, [pc, #164]	; (8000d58 <MX_GPIO_Init+0x220>)
 8000cb2:	f001 fa09 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4826      	ldr	r0, [pc, #152]	; (8000d64 <MX_GPIO_Init+0x22c>)
 8000ccc:	f001 f9fc 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4820      	ldr	r0, [pc, #128]	; (8000d68 <MX_GPIO_Init+0x230>)
 8000ce6:	f001 f9ef 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_GPIO_Init+0x230>)
 8000d08:	f001 f9de 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <MX_GPIO_Init+0x230>)
 8000d26:	f001 f9cf 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_GPIO_Init+0x224>)
 8000d42:	f001 f9c1 	bl	80020c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3738      	adds	r7, #56	; 0x38
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58021400 	.word	0x58021400
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	58021000 	.word	0x58021000
 8000d60:	58020800 	.word	0x58020800
 8000d64:	58021800 	.word	0x58021800
 8000d68:	58020000 	.word	0x58020000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <send_dynamixel>:
#include <stdint.h>
#include "stm32h7xx.h"
extern UART_HandleTypeDef huart3;


void send_dynamixel(uint8_t* instruction,size_t array_size){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	  unsigned short crc = update_crc(0, instruction, array_size);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fc2c 	bl	80005e8 <update_crc>
 8000d90:	4603      	mov	r3, r0
 8000d92:	81fb      	strh	r3, [r7, #14]
	  unsigned char crc_l = (unsigned char)(crc & 0x00FF);
 8000d94:	89fb      	ldrh	r3, [r7, #14]
 8000d96:	737b      	strb	r3, [r7, #13]
	  unsigned char crc_h = (unsigned char)((crc >> 8) & 0x00FF);
 8000d98:	89fb      	ldrh	r3, [r7, #14]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	733b      	strb	r3, [r7, #12]
	  instruction[array_size]=crc_l;
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	7b7a      	ldrb	r2, [r7, #13]
 8000da8:	701a      	strb	r2, [r3, #0]
	  instruction[array_size + 1]=crc_h;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	7b3a      	ldrb	r2, [r7, #12]
 8000db4:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,instruction,array_size + 2,100);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	3302      	adds	r3, #2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	2364      	movs	r3, #100	; 0x64
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <send_dynamixel+0x58>)
 8000dc4:	f004 f9ea 	bl	800519c <HAL_UART_Transmit>
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	240001e8 	.word	0x240001e8

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x30>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x30>)
 8000dec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58024400 	.word	0x58024400

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0c0      	sub	sp, #256	; 0x100
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e24:	22c0      	movs	r2, #192	; 0xc0
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 f807 	bl	8006e3c <memset>
  if(huart->Instance==UART4)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a9e      	ldr	r2, [pc, #632]	; (80010ac <HAL_UART_MspInit+0x2a4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d14e      	bne.n	8000ed6 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e38:	f04f 0202 	mov.w	r2, #2
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fb1c 	bl	800348c <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e5a:	f7ff ff87 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e5e:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000e60:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e64:	4a92      	ldr	r2, [pc, #584]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e6a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e6e:	4b90      	ldr	r3, [pc, #576]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000e70:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	4b8c      	ldr	r3, [pc, #560]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e82:	4a8b      	ldr	r2, [pc, #556]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e8c:	4b88      	ldr	r3, [pc, #544]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	623b      	str	r3, [r7, #32]
 8000e98:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea0:	2312      	movs	r3, #18
 8000ea2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	487d      	ldr	r0, [pc, #500]	; (80010b4 <HAL_UART_MspInit+0x2ac>)
 8000ec0:	f001 f902 	bl	80020c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 4, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	2034      	movs	r0, #52	; 0x34
 8000eca:	f000 fb64 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ece:	2034      	movs	r0, #52	; 0x34
 8000ed0:	f000 fb7b 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed4:	e0e4      	b.n	80010a0 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==UART5)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a77      	ldr	r2, [pc, #476]	; (80010b8 <HAL_UART_MspInit+0x2b0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d147      	bne.n	8000f70 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000ee0:	f04f 0202 	mov.w	r2, #2
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fac8 	bl	800348c <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000f02:	f7ff ff33 	bl	8000d6c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f06:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000f08:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f0c:	4a68      	ldr	r2, [pc, #416]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f12:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f16:	4b66      	ldr	r3, [pc, #408]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000f18:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b62      	ldr	r3, [pc, #392]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000f26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f2a:	4a61      	ldr	r2, [pc, #388]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f34:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000f5c:	230e      	movs	r3, #14
 8000f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f66:	4619      	mov	r1, r3
 8000f68:	4854      	ldr	r0, [pc, #336]	; (80010bc <HAL_UART_MspInit+0x2b4>)
 8000f6a:	f001 f8ad 	bl	80020c8 <HAL_GPIO_Init>
}
 8000f6e:	e097      	b.n	80010a0 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <HAL_UART_MspInit+0x2b8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d146      	bne.n	8001008 <HAL_UART_MspInit+0x200>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f7a:	f04f 0201 	mov.w	r2, #1
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fa7b 	bl	800348c <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8000f9c:	f7ff fee6 	bl	8000d6c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000fa2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fa6:	4a42      	ldr	r2, [pc, #264]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000fb2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000fc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fc4:	4a3a      	ldr	r2, [pc, #232]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8000fd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fdc:	2340      	movs	r3, #64	; 0x40
 8000fde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ffe:	4619      	mov	r1, r3
 8001000:	482e      	ldr	r0, [pc, #184]	; (80010bc <HAL_UART_MspInit+0x2b4>)
 8001002:	f001 f861 	bl	80020c8 <HAL_GPIO_Init>
}
 8001006:	e04b      	b.n	80010a0 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==USART3)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <HAL_UART_MspInit+0x2bc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d146      	bne.n	80010a0 <HAL_UART_MspInit+0x298>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001012:	f04f 0202 	mov.w	r2, #2
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fa2f 	bl	800348c <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8001034:	f7ff fe9a 	bl	8000d6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 800103a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 800104a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800104e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8001058:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_UART_MspInit+0x2a8>)
 8001068:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001074:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800108e:	2307      	movs	r3, #7
 8001090:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001094:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <HAL_UART_MspInit+0x2ac>)
 800109c:	f001 f814 	bl	80020c8 <HAL_GPIO_Init>
}
 80010a0:	bf00      	nop
 80010a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40004c00 	.word	0x40004c00
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020c00 	.word	0x58020c00
 80010b8:	40005000 	.word	0x40005000
 80010bc:	58020400 	.word	0x58020400
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40004800 	.word	0x40004800

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f920 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <UART4_IRQHandler+0x10>)
 8001122:	f004 f8c9 	bl	80052b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2400002c 	.word	0x2400002c

08001130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <SystemInit+0xd0>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113a:	4a31      	ldr	r2, [pc, #196]	; (8001200 <SystemInit+0xd0>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <SystemInit+0xd4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	2b02      	cmp	r3, #2
 800114e:	d807      	bhi.n	8001160 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <SystemInit+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 030f 	bic.w	r3, r3, #15
 8001158:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <SystemInit+0xd4>)
 800115a:	f043 0303 	orr.w	r3, r3, #3
 800115e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <SystemInit+0xd8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a28      	ldr	r2, [pc, #160]	; (8001208 <SystemInit+0xd8>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <SystemInit+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <SystemInit+0xd8>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4924      	ldr	r1, [pc, #144]	; (8001208 <SystemInit+0xd8>)
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <SystemInit+0xdc>)
 800117a:	4013      	ands	r3, r2
 800117c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <SystemInit+0xd4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <SystemInit+0xd4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 030f 	bic.w	r3, r3, #15
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <SystemInit+0xd4>)
 8001194:	f043 0303 	orr.w	r3, r3, #3
 8001198:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <SystemInit+0xd8>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <SystemInit+0xd8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <SystemInit+0xd8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <SystemInit+0xd8>)
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <SystemInit+0xe0>)
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <SystemInit+0xd8>)
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <SystemInit+0xe4>)
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <SystemInit+0xd8>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <SystemInit+0xe8>)
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <SystemInit+0xd8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <SystemInit+0xd8>)
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <SystemInit+0xe8>)
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <SystemInit+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <SystemInit+0xd8>)
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <SystemInit+0xe8>)
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <SystemInit+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <SystemInit+0xd8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <SystemInit+0xd8>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <SystemInit+0xd8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <SystemInit+0xec>)
 80011f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	52002000 	.word	0x52002000
 8001208:	58024400 	.word	0x58024400
 800120c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001210:	02020200 	.word	0x02020200
 8001214:	01ff0000 	.word	0x01ff0000
 8001218:	01010280 	.word	0x01010280
 800121c:	52004000 	.word	0x52004000

08001220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001258 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001224:	f7ff ff84 	bl	8001130 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800122a:	490d      	ldr	r1, [pc, #52]	; (8001260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001240:	4c0a      	ldr	r4, [pc, #40]	; (800126c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800124e:	f005 fdfd 	bl	8006e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001252:	f7ff fa37 	bl	80006c4 <main>
  bx  lr
 8001256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800125c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001260:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001264:	08007140 	.word	0x08007140
  ldr r2, =_sbss
 8001268:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800126c:	24000280 	.word	0x24000280

08001270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC_IRQHandler>
	...

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 f980 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001280:	f001 ff2e 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8001284:	4602      	mov	r2, r0
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_Init+0x68>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	4913      	ldr	r1, [pc, #76]	; (80012e0 <HAL_Init+0x6c>)
 8001292:	5ccb      	ldrb	r3, [r1, r3]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_Init+0x68>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_Init+0x6c>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_Init+0x70>)
 80012b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012b8:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_Init+0x74>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f814 	bl	80012ec <HAL_InitTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e002      	b.n	80012d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ce:	f7ff fd81 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58024400 	.word	0x58024400
 80012e0:	080070f8 	.word	0x080070f8
 80012e4:	24000004 	.word	0x24000004
 80012e8:	24000000 	.word	0x24000000

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_InitTick+0x60>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e021      	b.n	8001344 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_InitTick+0x64>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_InitTick+0x60>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f965 	bl	80015e6 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f92f 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x68>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2400000c 	.word	0x2400000c
 8001350:	24000000 	.word	0x24000000
 8001354:	24000008 	.word	0x24000008

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2400000c 	.word	0x2400000c
 800137c:	2400027c 	.word	0x2400027c

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2400027c 	.word	0x2400027c

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2400000c 	.word	0x2400000c

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	05fa0000 	.word	0x05fa0000

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff40 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff90 	bl	80014d4 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5f 	bl	8001480 <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff33 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa4 	bl	800153c <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff feba 	bl	8001380 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e2dc      	b.n	8001bd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d008      	beq.n	8001636 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e2cd      	b.n	8001bd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a76      	ldr	r2, [pc, #472]	; (8001814 <HAL_DMA_Abort+0x214>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d04a      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a74      	ldr	r2, [pc, #464]	; (8001818 <HAL_DMA_Abort+0x218>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d045      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_DMA_Abort+0x21c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d040      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a71      	ldr	r2, [pc, #452]	; (8001820 <HAL_DMA_Abort+0x220>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d03b      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a70      	ldr	r2, [pc, #448]	; (8001824 <HAL_DMA_Abort+0x224>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d036      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_DMA_Abort+0x228>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d031      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6d      	ldr	r2, [pc, #436]	; (800182c <HAL_DMA_Abort+0x22c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d02c      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <HAL_DMA_Abort+0x230>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d027      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a6a      	ldr	r2, [pc, #424]	; (8001834 <HAL_DMA_Abort+0x234>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d022      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a68      	ldr	r2, [pc, #416]	; (8001838 <HAL_DMA_Abort+0x238>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01d      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a67      	ldr	r2, [pc, #412]	; (800183c <HAL_DMA_Abort+0x23c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d018      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_DMA_Abort+0x240>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a64      	ldr	r2, [pc, #400]	; (8001844 <HAL_DMA_Abort+0x244>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00e      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a62      	ldr	r2, [pc, #392]	; (8001848 <HAL_DMA_Abort+0x248>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d009      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a61      	ldr	r2, [pc, #388]	; (800184c <HAL_DMA_Abort+0x24c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d004      	beq.n	80016d6 <HAL_DMA_Abort+0xd6>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a5f      	ldr	r2, [pc, #380]	; (8001850 <HAL_DMA_Abort+0x250>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_DMA_Abort+0xda>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_DMA_Abort+0xdc>
 80016da:	2300      	movs	r3, #0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 021e 	bic.w	r2, r2, #30
 80016ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e00a      	b.n	800171e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020e 	bic.w	r2, r2, #14
 8001716:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a3c      	ldr	r2, [pc, #240]	; (8001814 <HAL_DMA_Abort+0x214>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d072      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <HAL_DMA_Abort+0x218>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d06d      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a39      	ldr	r2, [pc, #228]	; (800181c <HAL_DMA_Abort+0x21c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d068      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a37      	ldr	r2, [pc, #220]	; (8001820 <HAL_DMA_Abort+0x220>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d063      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a36      	ldr	r2, [pc, #216]	; (8001824 <HAL_DMA_Abort+0x224>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d05e      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a34      	ldr	r2, [pc, #208]	; (8001828 <HAL_DMA_Abort+0x228>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d059      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a33      	ldr	r2, [pc, #204]	; (800182c <HAL_DMA_Abort+0x22c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d054      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a31      	ldr	r2, [pc, #196]	; (8001830 <HAL_DMA_Abort+0x230>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d04f      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a30      	ldr	r2, [pc, #192]	; (8001834 <HAL_DMA_Abort+0x234>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d04a      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2e      	ldr	r2, [pc, #184]	; (8001838 <HAL_DMA_Abort+0x238>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d045      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_DMA_Abort+0x23c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d040      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2b      	ldr	r2, [pc, #172]	; (8001840 <HAL_DMA_Abort+0x240>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d03b      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_DMA_Abort+0x244>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d036      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a28      	ldr	r2, [pc, #160]	; (8001848 <HAL_DMA_Abort+0x248>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d031      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_DMA_Abort+0x24c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d02c      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a25      	ldr	r2, [pc, #148]	; (8001850 <HAL_DMA_Abort+0x250>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d027      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a24      	ldr	r2, [pc, #144]	; (8001854 <HAL_DMA_Abort+0x254>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a22      	ldr	r2, [pc, #136]	; (8001858 <HAL_DMA_Abort+0x258>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01d      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_DMA_Abort+0x25c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d018      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <HAL_DMA_Abort+0x260>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_DMA_Abort+0x264>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_DMA_Abort+0x268>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d009      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_DMA_Abort+0x26c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d004      	beq.n	800180e <HAL_DMA_Abort+0x20e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_DMA_Abort+0x270>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d132      	bne.n	8001874 <HAL_DMA_Abort+0x274>
 800180e:	2301      	movs	r3, #1
 8001810:	e031      	b.n	8001876 <HAL_DMA_Abort+0x276>
 8001812:	bf00      	nop
 8001814:	40020010 	.word	0x40020010
 8001818:	40020028 	.word	0x40020028
 800181c:	40020040 	.word	0x40020040
 8001820:	40020058 	.word	0x40020058
 8001824:	40020070 	.word	0x40020070
 8001828:	40020088 	.word	0x40020088
 800182c:	400200a0 	.word	0x400200a0
 8001830:	400200b8 	.word	0x400200b8
 8001834:	40020410 	.word	0x40020410
 8001838:	40020428 	.word	0x40020428
 800183c:	40020440 	.word	0x40020440
 8001840:	40020458 	.word	0x40020458
 8001844:	40020470 	.word	0x40020470
 8001848:	40020488 	.word	0x40020488
 800184c:	400204a0 	.word	0x400204a0
 8001850:	400204b8 	.word	0x400204b8
 8001854:	58025408 	.word	0x58025408
 8001858:	5802541c 	.word	0x5802541c
 800185c:	58025430 	.word	0x58025430
 8001860:	58025444 	.word	0x58025444
 8001864:	58025458 	.word	0x58025458
 8001868:	5802546c 	.word	0x5802546c
 800186c:	58025480 	.word	0x58025480
 8001870:	58025494 	.word	0x58025494
 8001874:	2300      	movs	r3, #0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001888:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6d      	ldr	r2, [pc, #436]	; (8001a44 <HAL_DMA_Abort+0x444>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04a      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a6b      	ldr	r2, [pc, #428]	; (8001a48 <HAL_DMA_Abort+0x448>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d045      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6a      	ldr	r2, [pc, #424]	; (8001a4c <HAL_DMA_Abort+0x44c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d040      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a68      	ldr	r2, [pc, #416]	; (8001a50 <HAL_DMA_Abort+0x450>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d03b      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a67      	ldr	r2, [pc, #412]	; (8001a54 <HAL_DMA_Abort+0x454>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d036      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a65      	ldr	r2, [pc, #404]	; (8001a58 <HAL_DMA_Abort+0x458>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d031      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a64      	ldr	r2, [pc, #400]	; (8001a5c <HAL_DMA_Abort+0x45c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d02c      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a62      	ldr	r2, [pc, #392]	; (8001a60 <HAL_DMA_Abort+0x460>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d027      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a61      	ldr	r2, [pc, #388]	; (8001a64 <HAL_DMA_Abort+0x464>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d022      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <HAL_DMA_Abort+0x468>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01d      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a5e      	ldr	r2, [pc, #376]	; (8001a6c <HAL_DMA_Abort+0x46c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d018      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5c      	ldr	r2, [pc, #368]	; (8001a70 <HAL_DMA_Abort+0x470>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a5b      	ldr	r2, [pc, #364]	; (8001a74 <HAL_DMA_Abort+0x474>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00e      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a59      	ldr	r2, [pc, #356]	; (8001a78 <HAL_DMA_Abort+0x478>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d009      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_DMA_Abort+0x47c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d004      	beq.n	800192a <HAL_DMA_Abort+0x32a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <HAL_DMA_Abort+0x480>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d108      	bne.n	800193c <HAL_DMA_Abort+0x33c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	e007      	b.n	800194c <HAL_DMA_Abort+0x34c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800194c:	e013      	b.n	8001976 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194e:	f7ff fd17 	bl	8001380 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b05      	cmp	r3, #5
 800195a:	d90c      	bls.n	8001976 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e12d      	b.n	8001bd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1e5      	bne.n	800194e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <HAL_DMA_Abort+0x444>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d04a      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_DMA_Abort+0x448>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d045      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <HAL_DMA_Abort+0x44c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d040      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_DMA_Abort+0x450>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d03b      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_DMA_Abort+0x454>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d036      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_DMA_Abort+0x458>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d031      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_DMA_Abort+0x45c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d02c      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a24      	ldr	r2, [pc, #144]	; (8001a60 <HAL_DMA_Abort+0x460>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d027      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_DMA_Abort+0x464>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_DMA_Abort+0x468>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01d      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_DMA_Abort+0x46c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d018      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <HAL_DMA_Abort+0x470>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <HAL_DMA_Abort+0x474>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00e      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_DMA_Abort+0x478>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HAL_DMA_Abort+0x47c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_DMA_Abort+0x422>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <HAL_DMA_Abort+0x480>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Abort+0x426>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_Abort+0x428>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d02b      	beq.n	8001a84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	223f      	movs	r2, #63	; 0x3f
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	e02a      	b.n	8001a9a <HAL_DMA_Abort+0x49a>
 8001a44:	40020010 	.word	0x40020010
 8001a48:	40020028 	.word	0x40020028
 8001a4c:	40020040 	.word	0x40020040
 8001a50:	40020058 	.word	0x40020058
 8001a54:	40020070 	.word	0x40020070
 8001a58:	40020088 	.word	0x40020088
 8001a5c:	400200a0 	.word	0x400200a0
 8001a60:	400200b8 	.word	0x400200b8
 8001a64:	40020410 	.word	0x40020410
 8001a68:	40020428 	.word	0x40020428
 8001a6c:	40020440 	.word	0x40020440
 8001a70:	40020458 	.word	0x40020458
 8001a74:	40020470 	.word	0x40020470
 8001a78:	40020488 	.word	0x40020488
 8001a7c:	400204a0 	.word	0x400204a0
 8001a80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2201      	movs	r2, #1
 8001a94:	409a      	lsls	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_DMA_Abort+0x5dc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d072      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_DMA_Abort+0x5e0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d06d      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_DMA_Abort+0x5e4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d068      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <HAL_DMA_Abort+0x5e8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d063      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a49      	ldr	r2, [pc, #292]	; (8001bec <HAL_DMA_Abort+0x5ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d05e      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a47      	ldr	r2, [pc, #284]	; (8001bf0 <HAL_DMA_Abort+0x5f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d059      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a46      	ldr	r2, [pc, #280]	; (8001bf4 <HAL_DMA_Abort+0x5f4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d054      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a44      	ldr	r2, [pc, #272]	; (8001bf8 <HAL_DMA_Abort+0x5f8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d04f      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a43      	ldr	r2, [pc, #268]	; (8001bfc <HAL_DMA_Abort+0x5fc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d04a      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a41      	ldr	r2, [pc, #260]	; (8001c00 <HAL_DMA_Abort+0x600>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d045      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a40      	ldr	r2, [pc, #256]	; (8001c04 <HAL_DMA_Abort+0x604>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d040      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3e      	ldr	r2, [pc, #248]	; (8001c08 <HAL_DMA_Abort+0x608>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d03b      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <HAL_DMA_Abort+0x60c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d036      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <HAL_DMA_Abort+0x610>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d031      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a3a      	ldr	r2, [pc, #232]	; (8001c14 <HAL_DMA_Abort+0x614>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d02c      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <HAL_DMA_Abort+0x618>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d027      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a37      	ldr	r2, [pc, #220]	; (8001c1c <HAL_DMA_Abort+0x61c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d022      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a35      	ldr	r2, [pc, #212]	; (8001c20 <HAL_DMA_Abort+0x620>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01d      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a34      	ldr	r2, [pc, #208]	; (8001c24 <HAL_DMA_Abort+0x624>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d018      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_DMA_Abort+0x628>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <HAL_DMA_Abort+0x62c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00e      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2f      	ldr	r2, [pc, #188]	; (8001c30 <HAL_DMA_Abort+0x630>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d009      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <HAL_DMA_Abort+0x634>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d004      	beq.n	8001b8a <HAL_DMA_Abort+0x58a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2c      	ldr	r2, [pc, #176]	; (8001c38 <HAL_DMA_Abort+0x638>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_DMA_Abort+0x58e>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_Abort+0x590>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00c      	beq.n	8001bc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40020010 	.word	0x40020010
 8001be0:	40020028 	.word	0x40020028
 8001be4:	40020040 	.word	0x40020040
 8001be8:	40020058 	.word	0x40020058
 8001bec:	40020070 	.word	0x40020070
 8001bf0:	40020088 	.word	0x40020088
 8001bf4:	400200a0 	.word	0x400200a0
 8001bf8:	400200b8 	.word	0x400200b8
 8001bfc:	40020410 	.word	0x40020410
 8001c00:	40020428 	.word	0x40020428
 8001c04:	40020440 	.word	0x40020440
 8001c08:	40020458 	.word	0x40020458
 8001c0c:	40020470 	.word	0x40020470
 8001c10:	40020488 	.word	0x40020488
 8001c14:	400204a0 	.word	0x400204a0
 8001c18:	400204b8 	.word	0x400204b8
 8001c1c:	58025408 	.word	0x58025408
 8001c20:	5802541c 	.word	0x5802541c
 8001c24:	58025430 	.word	0x58025430
 8001c28:	58025444 	.word	0x58025444
 8001c2c:	58025458 	.word	0x58025458
 8001c30:	5802546c 	.word	0x5802546c
 8001c34:	58025480 	.word	0x58025480
 8001c38:	58025494 	.word	0x58025494

08001c3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e237      	b.n	80020be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e22c      	b.n	80020be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5c      	ldr	r2, [pc, #368]	; (8001ddc <HAL_DMA_Abort_IT+0x1a0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d04a      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a5b      	ldr	r2, [pc, #364]	; (8001de0 <HAL_DMA_Abort_IT+0x1a4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d045      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a59      	ldr	r2, [pc, #356]	; (8001de4 <HAL_DMA_Abort_IT+0x1a8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d040      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_DMA_Abort_IT+0x1ac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d03b      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a56      	ldr	r2, [pc, #344]	; (8001dec <HAL_DMA_Abort_IT+0x1b0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d036      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a55      	ldr	r2, [pc, #340]	; (8001df0 <HAL_DMA_Abort_IT+0x1b4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d031      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <HAL_DMA_Abort_IT+0x1b8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d02c      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_DMA_Abort_IT+0x1bc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d027      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <HAL_DMA_Abort_IT+0x1c0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d022      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a4f      	ldr	r2, [pc, #316]	; (8001e00 <HAL_DMA_Abort_IT+0x1c4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d01d      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a4d      	ldr	r2, [pc, #308]	; (8001e04 <HAL_DMA_Abort_IT+0x1c8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d018      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_DMA_Abort_IT+0x1cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_DMA_Abort_IT+0x1d0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00e      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a49      	ldr	r2, [pc, #292]	; (8001e10 <HAL_DMA_Abort_IT+0x1d4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a47      	ldr	r2, [pc, #284]	; (8001e14 <HAL_DMA_Abort_IT+0x1d8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d004      	beq.n	8001d04 <HAL_DMA_Abort_IT+0xc8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a46      	ldr	r2, [pc, #280]	; (8001e18 <HAL_DMA_Abort_IT+0x1dc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_DMA_Abort_IT+0xcc>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_DMA_Abort_IT+0xce>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8086 	beq.w	8001e1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2204      	movs	r2, #4
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <HAL_DMA_Abort_IT+0x1a0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d04a      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_DMA_Abort_IT+0x1a4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d045      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <HAL_DMA_Abort_IT+0x1a8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d040      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_DMA_Abort_IT+0x1ac>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d03b      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_DMA_Abort_IT+0x1b0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d036      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <HAL_DMA_Abort_IT+0x1b4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d031      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <HAL_DMA_Abort_IT+0x1b8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d02c      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a25      	ldr	r2, [pc, #148]	; (8001df8 <HAL_DMA_Abort_IT+0x1bc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d027      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_DMA_Abort_IT+0x1c0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d022      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_DMA_Abort_IT+0x1c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d01d      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_DMA_Abort_IT+0x1c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d018      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_DMA_Abort_IT+0x1cc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_DMA_Abort_IT+0x1d0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00e      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <HAL_DMA_Abort_IT+0x1d4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d009      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_DMA_Abort_IT+0x1d8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d004      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x17c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_DMA_Abort_IT+0x1dc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <HAL_DMA_Abort_IT+0x18e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e178      	b.n	80020bc <HAL_DMA_Abort_IT+0x480>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e16f      	b.n	80020bc <HAL_DMA_Abort_IT+0x480>
 8001ddc:	40020010 	.word	0x40020010
 8001de0:	40020028 	.word	0x40020028
 8001de4:	40020040 	.word	0x40020040
 8001de8:	40020058 	.word	0x40020058
 8001dec:	40020070 	.word	0x40020070
 8001df0:	40020088 	.word	0x40020088
 8001df4:	400200a0 	.word	0x400200a0
 8001df8:	400200b8 	.word	0x400200b8
 8001dfc:	40020410 	.word	0x40020410
 8001e00:	40020428 	.word	0x40020428
 8001e04:	40020440 	.word	0x40020440
 8001e08:	40020458 	.word	0x40020458
 8001e0c:	40020470 	.word	0x40020470
 8001e10:	40020488 	.word	0x40020488
 8001e14:	400204a0 	.word	0x400204a0
 8001e18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 020e 	bic.w	r2, r2, #14
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6c      	ldr	r2, [pc, #432]	; (8001fe4 <HAL_DMA_Abort_IT+0x3a8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d04a      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6b      	ldr	r2, [pc, #428]	; (8001fe8 <HAL_DMA_Abort_IT+0x3ac>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d045      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a69      	ldr	r2, [pc, #420]	; (8001fec <HAL_DMA_Abort_IT+0x3b0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d040      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a68      	ldr	r2, [pc, #416]	; (8001ff0 <HAL_DMA_Abort_IT+0x3b4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d03b      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a66      	ldr	r2, [pc, #408]	; (8001ff4 <HAL_DMA_Abort_IT+0x3b8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d036      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a65      	ldr	r2, [pc, #404]	; (8001ff8 <HAL_DMA_Abort_IT+0x3bc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d031      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a63      	ldr	r2, [pc, #396]	; (8001ffc <HAL_DMA_Abort_IT+0x3c0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02c      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a62      	ldr	r2, [pc, #392]	; (8002000 <HAL_DMA_Abort_IT+0x3c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d027      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a60      	ldr	r2, [pc, #384]	; (8002004 <HAL_DMA_Abort_IT+0x3c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5f      	ldr	r2, [pc, #380]	; (8002008 <HAL_DMA_Abort_IT+0x3cc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d01d      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a5d      	ldr	r2, [pc, #372]	; (800200c <HAL_DMA_Abort_IT+0x3d0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a5c      	ldr	r2, [pc, #368]	; (8002010 <HAL_DMA_Abort_IT+0x3d4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a5a      	ldr	r2, [pc, #360]	; (8002014 <HAL_DMA_Abort_IT+0x3d8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a59      	ldr	r2, [pc, #356]	; (8002018 <HAL_DMA_Abort_IT+0x3dc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_DMA_Abort_IT+0x3e0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x290>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_DMA_Abort_IT+0x3e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d108      	bne.n	8001ede <HAL_DMA_Abort_IT+0x2a2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e007      	b.n	8001eee <HAL_DMA_Abort_IT+0x2b2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <HAL_DMA_Abort_IT+0x3a8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d072      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_DMA_Abort_IT+0x3ac>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d06d      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_DMA_Abort_IT+0x3b0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d068      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a37      	ldr	r2, [pc, #220]	; (8001ff0 <HAL_DMA_Abort_IT+0x3b4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d063      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a36      	ldr	r2, [pc, #216]	; (8001ff4 <HAL_DMA_Abort_IT+0x3b8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d05e      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a34      	ldr	r2, [pc, #208]	; (8001ff8 <HAL_DMA_Abort_IT+0x3bc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d059      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <HAL_DMA_Abort_IT+0x3c0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d054      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a31      	ldr	r2, [pc, #196]	; (8002000 <HAL_DMA_Abort_IT+0x3c4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d04f      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a30      	ldr	r2, [pc, #192]	; (8002004 <HAL_DMA_Abort_IT+0x3c8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d04a      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a2e      	ldr	r2, [pc, #184]	; (8002008 <HAL_DMA_Abort_IT+0x3cc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d045      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <HAL_DMA_Abort_IT+0x3d0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d040      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_DMA_Abort_IT+0x3d4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d03b      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <HAL_DMA_Abort_IT+0x3d8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d036      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_DMA_Abort_IT+0x3dc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d031      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a27      	ldr	r2, [pc, #156]	; (800201c <HAL_DMA_Abort_IT+0x3e0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d02c      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_DMA_Abort_IT+0x3e4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d027      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_DMA_Abort_IT+0x3e8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_DMA_Abort_IT+0x3ec>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01d      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a21      	ldr	r2, [pc, #132]	; (800202c <HAL_DMA_Abort_IT+0x3f0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d018      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_DMA_Abort_IT+0x3f4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_DMA_Abort_IT+0x3f8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00e      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_DMA_Abort_IT+0x3fc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_DMA_Abort_IT+0x400>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d004      	beq.n	8001fde <HAL_DMA_Abort_IT+0x3a2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_DMA_Abort_IT+0x404>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d132      	bne.n	8002044 <HAL_DMA_Abort_IT+0x408>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e031      	b.n	8002046 <HAL_DMA_Abort_IT+0x40a>
 8001fe2:	bf00      	nop
 8001fe4:	40020010 	.word	0x40020010
 8001fe8:	40020028 	.word	0x40020028
 8001fec:	40020040 	.word	0x40020040
 8001ff0:	40020058 	.word	0x40020058
 8001ff4:	40020070 	.word	0x40020070
 8001ff8:	40020088 	.word	0x40020088
 8001ffc:	400200a0 	.word	0x400200a0
 8002000:	400200b8 	.word	0x400200b8
 8002004:	40020410 	.word	0x40020410
 8002008:	40020428 	.word	0x40020428
 800200c:	40020440 	.word	0x40020440
 8002010:	40020458 	.word	0x40020458
 8002014:	40020470 	.word	0x40020470
 8002018:	40020488 	.word	0x40020488
 800201c:	400204a0 	.word	0x400204a0
 8002020:	400204b8 	.word	0x400204b8
 8002024:	58025408 	.word	0x58025408
 8002028:	5802541c 	.word	0x5802541c
 800202c:	58025430 	.word	0x58025430
 8002030:	58025444 	.word	0x58025444
 8002034:	58025458 	.word	0x58025458
 8002038:	5802546c 	.word	0x5802546c
 800203c:	58025480 	.word	0x58025480
 8002040:	58025494 	.word	0x58025494
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d028      	beq.n	800209c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002058:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2201      	movs	r2, #1
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002078:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00c      	beq.n	800209c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800209a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_GPIO_Init+0x234>)
 80020d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020da:	e194      	b.n	8002406 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8186 	beq.w	8002400 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d005      	beq.n	800210c <HAL_GPIO_Init+0x44>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d130      	bne.n	800216e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002142:	2201      	movs	r2, #1
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 0201 	and.w	r2, r3, #1
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b03      	cmp	r3, #3
 8002178:	d017      	beq.n	80021aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d123      	bne.n	80021fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	69b9      	ldr	r1, [r7, #24]
 80021fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80e0 	beq.w	8002400 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <HAL_GPIO_Init+0x238>)
 8002242:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002246:	4a2e      	ldr	r2, [pc, #184]	; (8002300 <HAL_GPIO_Init+0x238>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_GPIO_Init+0x238>)
 8002252:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_GPIO_Init+0x23c>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_GPIO_Init+0x240>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d052      	beq.n	8002330 <HAL_GPIO_Init+0x268>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_GPIO_Init+0x244>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_GPIO_Init+0x22e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_GPIO_Init+0x248>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <HAL_GPIO_Init+0x22a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x24c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x226>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_GPIO_Init+0x250>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x222>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_GPIO_Init+0x254>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x21e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_GPIO_Init+0x258>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x21a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_GPIO_Init+0x25c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x216>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x260>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x212>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_GPIO_Init+0x264>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022d2:	2309      	movs	r3, #9
 80022d4:	e02d      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022d6:	230a      	movs	r3, #10
 80022d8:	e02b      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022da:	2308      	movs	r3, #8
 80022dc:	e029      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022de:	2307      	movs	r3, #7
 80022e0:	e027      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e025      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e023      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e021      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e01f      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e01d      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e01b      	b.n	8002332 <HAL_GPIO_Init+0x26a>
 80022fa:	bf00      	nop
 80022fc:	58000080 	.word	0x58000080
 8002300:	58024400 	.word	0x58024400
 8002304:	58000400 	.word	0x58000400
 8002308:	58020000 	.word	0x58020000
 800230c:	58020400 	.word	0x58020400
 8002310:	58020800 	.word	0x58020800
 8002314:	58020c00 	.word	0x58020c00
 8002318:	58021000 	.word	0x58021000
 800231c:	58021400 	.word	0x58021400
 8002320:	58021800 	.word	0x58021800
 8002324:	58021c00 	.word	0x58021c00
 8002328:	58022000 	.word	0x58022000
 800232c:	58022400 	.word	0x58022400
 8002330:	2300      	movs	r3, #0
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	f002 0203 	and.w	r2, r2, #3
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	4093      	lsls	r3, r2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002342:	4938      	ldr	r1, [pc, #224]	; (8002424 <HAL_GPIO_Init+0x35c>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3301      	adds	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	f47f ae63 	bne.w	80020dc <HAL_GPIO_Init+0x14>
  }
}
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	3724      	adds	r7, #36	; 0x24
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	58000400 	.word	0x58000400

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	2b06      	cmp	r3, #6
 800246e:	d00a      	beq.n	8002486 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e040      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e03e      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800248e:	491f      	ldr	r1, [pc, #124]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002496:	f7fe ff73 	bl	8001380 <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800249c:	e009      	b.n	80024b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800249e:	f7fe ff6f 	bl	8001380 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ac:	d901      	bls.n	80024b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e028      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024be:	d1ee      	bne.n	800249e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b1e      	cmp	r3, #30
 80024c4:	d008      	beq.n	80024d8 <HAL_PWREx_ConfigSupply+0x7c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b2e      	cmp	r3, #46	; 0x2e
 80024ca:	d005      	beq.n	80024d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b1d      	cmp	r3, #29
 80024d0:	d002      	beq.n	80024d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b2d      	cmp	r3, #45	; 0x2d
 80024d6:	d114      	bne.n	8002502 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024d8:	f7fe ff52 	bl	8001380 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024de:	e009      	b.n	80024f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024e0:	f7fe ff4e 	bl	8001380 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ee:	d901      	bls.n	80024f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d1ee      	bne.n	80024e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	58024800 	.word	0x58024800

08002510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f000 bc1f 	b.w	8002d62 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b3 	beq.w	8002698 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002532:	4b95      	ldr	r3, [pc, #596]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253c:	4b92      	ldr	r3, [pc, #584]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b10      	cmp	r3, #16
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x48>
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b18      	cmp	r3, #24
 800254c:	d112      	bne.n	8002574 <HAL_RCC_OscConfig+0x64>
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d10d      	bne.n	8002574 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	4b8b      	ldr	r3, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8098 	beq.w	8002696 <HAL_RCC_OscConfig+0x186>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8093 	bne.w	8002696 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e3f6      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x7c>
 800257e:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a81      	ldr	r2, [pc, #516]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e058      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d112      	bne.n	80025ba <HAL_RCC_OscConfig+0xaa>
 8002594:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7b      	ldr	r2, [pc, #492]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a78      	ldr	r2, [pc, #480]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a75      	ldr	r2, [pc, #468]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e041      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c2:	d112      	bne.n	80025ea <HAL_RCC_OscConfig+0xda>
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6f      	ldr	r2, [pc, #444]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b6d      	ldr	r3, [pc, #436]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a6c      	ldr	r2, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b6a      	ldr	r3, [pc, #424]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a69      	ldr	r2, [pc, #420]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e029      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80025f2:	d112      	bne.n	800261a <HAL_RCC_OscConfig+0x10a>
 80025f4:	4b64      	ldr	r3, [pc, #400]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a63      	ldr	r2, [pc, #396]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a60      	ldr	r2, [pc, #384]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e011      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
 800261a:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b58      	ldr	r3, [pc, #352]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a57      	ldr	r2, [pc, #348]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800262c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002638:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800263c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d013      	beq.n	800266e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fe9b 	bl	8001380 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264e:	f7fe fe97 	bl	8001380 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e380      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002660:	4b49      	ldr	r3, [pc, #292]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x13e>
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fe87 	bl	8001380 <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002676:	f7fe fe83 	bl	8001380 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	; 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e36c      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x166>
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 808c 	beq.w	80027be <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_RCC_OscConfig+0x1bc>
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2b18      	cmp	r3, #24
 80026c0:	d137      	bne.n	8002732 <HAL_RCC_OscConfig+0x222>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d132      	bne.n	8002732 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x1d4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e33e      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 0219 	bic.w	r2, r3, #25
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4925      	ldr	r1, [pc, #148]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fe43 	bl	8001380 <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fe3f 	bl	8001380 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e328      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	4917      	ldr	r1, [pc, #92]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002730:	e045      	b.n	80027be <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0219 	bic.w	r2, r3, #25
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4910      	ldr	r1, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fe18 	bl	8001380 <HAL_GetTick>
 8002750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002754:	f7fe fe14 	bl	8001380 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e2fd      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	4901      	ldr	r1, [pc, #4]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
 8002786:	e01a      	b.n	80027be <HAL_RCC_OscConfig+0x2ae>
 8002788:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278c:	4b97      	ldr	r3, [pc, #604]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a96      	ldr	r2, [pc, #600]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fdf2 	bl	8001380 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a0:	f7fe fdee 	bl	8001380 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e2d7      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06a      	beq.n	80028a0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ca:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027d4:	4b85      	ldr	r3, [pc, #532]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d007      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2e0>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b18      	cmp	r3, #24
 80027e4:	d11b      	bne.n	800281e <HAL_RCC_OscConfig+0x30e>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d116      	bne.n	800281e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027f0:	4b7e      	ldr	r3, [pc, #504]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_OscConfig+0x2f8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e2ac      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002808:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	4975      	ldr	r1, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281c:	e040      	b.n	80028a0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d023      	beq.n	800286e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002826:	4b71      	ldr	r3, [pc, #452]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a70      	ldr	r2, [pc, #448]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fda5 	bl	8001380 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800283a:	f7fe fda1 	bl	8001380 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e28a      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002858:	4b64      	ldr	r3, [pc, #400]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	4961      	ldr	r1, [pc, #388]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
 800286c:	e018      	b.n	80028a0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5e      	ldr	r2, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe fd81 	bl	8001380 <HAL_GetTick>
 800287e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002882:	f7fe fd7d 	bl	8001380 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e266      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002894:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d036      	beq.n	800291a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d019      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b4:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fd5e 	bl	8001380 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fd5a 	bl	8001380 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e243      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028da:	4b44      	ldr	r3, [pc, #272]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x3b8>
 80028e6:	e018      	b.n	800291a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	4a3f      	ldr	r2, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fd44 	bl	8001380 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fc:	f7fe fd40 	bl	8001380 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e229      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d036      	beq.n	8002994 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d019      	beq.n	8002962 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800292e:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2e      	ldr	r2, [pc, #184]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002938:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800293a:	f7fe fd21 	bl	8001380 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002942:	f7fe fd1d 	bl	8001380 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e206      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x432>
 8002960:	e018      	b.n	8002994 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800296c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800296e:	f7fe fd07 	bl	8001380 <HAL_GetTick>
 8002972:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002976:	f7fe fd03 	bl	8001380 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1ec      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80af 	beq.w	8002b00 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCC_OscConfig+0x4e0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_RCC_OscConfig+0x4e0>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ae:	f7fe fce7 	bl	8001380 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe fce3 	bl	8001380 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	; 0x64
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1cc      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_OscConfig+0x4e0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4e4>
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a02      	ldr	r2, [pc, #8]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e05b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58024800 	.word	0x58024800
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x512>
 80029fc:	4b9d      	ldr	r3, [pc, #628]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a9c      	ldr	r2, [pc, #624]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	4b9a      	ldr	r3, [pc, #616]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a99      	ldr	r2, [pc, #612]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	4b97      	ldr	r3, [pc, #604]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a96      	ldr	r2, [pc, #600]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a1a:	f023 0304 	bic.w	r3, r3, #4
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	e03f      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x540>
 8002a2a:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a91      	ldr	r2, [pc, #580]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	4b8f      	ldr	r3, [pc, #572]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a8e      	ldr	r2, [pc, #568]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a8b      	ldr	r2, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4e:	e028      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b85      	cmp	r3, #133	; 0x85
 8002a56:	d112      	bne.n	8002a7e <HAL_RCC_OscConfig+0x56e>
 8002a58:	4b86      	ldr	r3, [pc, #536]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a85      	ldr	r2, [pc, #532]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	4b83      	ldr	r3, [pc, #524]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a82      	ldr	r2, [pc, #520]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a7f      	ldr	r2, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	e011      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a7c      	ldr	r2, [pc, #496]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a76      	ldr	r2, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fc69 	bl	8001380 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fc65 	bl	8001380 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e14c      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x5a2>
 8002ad4:	e014      	b.n	8002b00 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fc53 	bl	8001380 <HAL_GetTick>
 8002ada:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fc4f 	bl	8001380 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e136      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002af4:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 812b 	beq.w	8002d60 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b0a:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b12:	2b18      	cmp	r3, #24
 8002b14:	f000 80bb 	beq.w	8002c8e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f040 8095 	bne.w	8002c4c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b54      	ldr	r3, [pc, #336]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a53      	ldr	r2, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fc27 	bl	8001380 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fc23 	bl	8001380 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e10c      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b48:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x768>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	430a      	orrs	r2, r1
 8002b68:	4942      	ldr	r1, [pc, #264]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	628b      	str	r3, [r1, #40]	; 0x28
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	025b      	lsls	r3, r3, #9
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	3b01      	subs	r3, #1
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b9e:	4935      	ldr	r1, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ba4:	4b33      	ldr	r3, [pc, #204]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bb0:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bbc:	00d2      	lsls	r2, r2, #3
 8002bbe:	492d      	ldr	r1, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f023 020c 	bic.w	r2, r3, #12
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4928      	ldr	r1, [pc, #160]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bd6:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f023 0202 	bic.w	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4924      	ldr	r1, [pc, #144]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	4a1b      	ldr	r2, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fbac 	bl	8001380 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fba8 	bl	8001380 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e091      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x71c>
 8002c4a:	e089      	b.n	8002d60 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fb92 	bl	8001380 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fb8e 	bl	8001380 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e077      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
 8002c72:	bf00      	nop
 8002c74:	58024400 	.word	0x58024400
 8002c78:	fffffc0c 	.word	0xfffffc0c
 8002c7c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c80:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <HAL_RCC_OscConfig+0x750>
 8002c8c:	e068      	b.n	8002d60 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c94:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d031      	beq.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d12a      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d122      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d11a      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d111      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d108      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02b      	b.n	8002d62 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	08db      	lsrs	r3, r3, #3
 8002d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d14:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d01f      	beq.n	8002d60 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d2c:	f7fe fb28 	bl	8001380 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d32:	bf00      	nop
 8002d34:	f7fe fb24 	bl	8001380 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d0f9      	beq.n	8002d34 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_RCC_OscConfig+0x860>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d4c:	00d2      	lsls	r2, r2, #3
 8002d4e:	4907      	ldr	r1, [pc, #28]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_RCC_OscConfig+0x85c>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	ffff0007 	.word	0xffff0007

08002d74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e19c      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b8a      	ldr	r3, [pc, #552]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b87      	ldr	r3, [pc, #540]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 020f 	bic.w	r2, r3, #15
 8002d9e:	4985      	ldr	r1, [pc, #532]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b83      	ldr	r3, [pc, #524]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e184      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d908      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dd4:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	4975      	ldr	r1, [pc, #468]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e02:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	496a      	ldr	r1, [pc, #424]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d908      	bls.n	8002e42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	495e      	ldr	r1, [pc, #376]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d908      	bls.n	8002e70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e5e:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4953      	ldr	r1, [pc, #332]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d010      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d908      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f023 020f 	bic.w	r2, r3, #15
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4947      	ldr	r1, [pc, #284]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d055      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4940      	ldr	r1, [pc, #256]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d121      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0f6      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0ea      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0de      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f04:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0d6      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f023 0207 	bic.w	r2, r3, #7
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f26:	f7fe fa2b 	bl	8001380 <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2e:	f7fe fa27 	bl	8001380 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0be      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d1eb      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d208      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d214      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 020f 	bic.w	r2, r3, #15
 8002f9a:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e086      	b.n	80030c2 <HAL_RCC_ClockConfig+0x34e>
 8002fb4:	52002000 	.word	0x52002000
 8002fb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d208      	bcs.n	8002fea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	4939      	ldr	r1, [pc, #228]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d010      	beq.n	8003018 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003002:	429a      	cmp	r2, r3
 8003004:	d208      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	492e      	ldr	r1, [pc, #184]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003030:	429a      	cmp	r2, r3
 8003032:	d208      	bcs.n	8003046 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003042:	4313      	orrs	r3, r2
 8003044:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305e:	429a      	cmp	r2, r3
 8003060:	d208      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4917      	ldr	r1, [pc, #92]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003070:	4313      	orrs	r3, r2
 8003072:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003074:	f000 f834 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	4912      	ldr	r1, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x35c>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x358>)
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_RCC_ClockConfig+0x35c>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x360>)
 80030aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x364>)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x368>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe f918 	bl	80012ec <HAL_InitTick>
 80030bc:	4603      	mov	r3, r0
 80030be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	58024400 	.word	0x58024400
 80030d0:	080070f8 	.word	0x080070f8
 80030d4:	24000004 	.word	0x24000004
 80030d8:	24000000 	.word	0x24000000
 80030dc:	24000008 	.word	0x24000008

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e6:	4bb3      	ldr	r3, [pc, #716]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ee:	2b18      	cmp	r3, #24
 80030f0:	f200 8155 	bhi.w	800339e <HAL_RCC_GetSysClockFreq+0x2be>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	08003161 	.word	0x08003161
 8003100:	0800339f 	.word	0x0800339f
 8003104:	0800339f 	.word	0x0800339f
 8003108:	0800339f 	.word	0x0800339f
 800310c:	0800339f 	.word	0x0800339f
 8003110:	0800339f 	.word	0x0800339f
 8003114:	0800339f 	.word	0x0800339f
 8003118:	0800339f 	.word	0x0800339f
 800311c:	08003187 	.word	0x08003187
 8003120:	0800339f 	.word	0x0800339f
 8003124:	0800339f 	.word	0x0800339f
 8003128:	0800339f 	.word	0x0800339f
 800312c:	0800339f 	.word	0x0800339f
 8003130:	0800339f 	.word	0x0800339f
 8003134:	0800339f 	.word	0x0800339f
 8003138:	0800339f 	.word	0x0800339f
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800339f 	.word	0x0800339f
 8003144:	0800339f 	.word	0x0800339f
 8003148:	0800339f 	.word	0x0800339f
 800314c:	0800339f 	.word	0x0800339f
 8003150:	0800339f 	.word	0x0800339f
 8003154:	0800339f 	.word	0x0800339f
 8003158:	0800339f 	.word	0x0800339f
 800315c:	08003193 	.word	0x08003193
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003160:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800316c:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	08db      	lsrs	r3, r3, #3
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
 800317c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800317e:	e111      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003180:	4b8d      	ldr	r3, [pc, #564]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003182:	61bb      	str	r3, [r7, #24]
      break;
 8003184:	e10e      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003186:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003188:	61bb      	str	r3, [r7, #24]
      break;
 800318a:	e10b      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800318c:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800318e:	61bb      	str	r3, [r7, #24]
      break;
 8003190:	e108      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800319c:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031a8:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031b2:	4b80      	ldr	r3, [pc, #512]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	08db      	lsrs	r3, r3, #3
 80031b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80e1 	beq.w	8003398 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	f000 8083 	beq.w	80032e4 <HAL_RCC_GetSysClockFreq+0x204>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	f200 80a1 	bhi.w	8003328 <HAL_RCC_GetSysClockFreq+0x248>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x114>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d056      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031f2:	e099      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02d      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	4a6b      	ldr	r2, [pc, #428]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
 8003210:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b62      	ldr	r3, [pc, #392]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800325a:	e087      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003282:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800329e:	e065      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032e2:	e043      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003326:	e021      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800336a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	0a5b      	lsrs	r3, r3, #9
 8003372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003376:	3301      	adds	r3, #1
 8003378:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	ee07 3a90 	vmov	s15, r3
 8003380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003384:	edd7 6a07 	vldr	s13, [r7, #28]
 8003388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800338c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003390:	ee17 3a90 	vmov	r3, s15
 8003394:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003396:	e005      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
      break;
 800339c:	e002      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033a0:	61bb      	str	r3, [r7, #24]
      break;
 80033a2:	bf00      	nop
  }

  return sysclockfreq;
 80033a4:	69bb      	ldr	r3, [r7, #24]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	58024400 	.word	0x58024400
 80033b8:	03d09000 	.word	0x03d09000
 80033bc:	003d0900 	.word	0x003d0900
 80033c0:	007a1200 	.word	0x007a1200
 80033c4:	46000000 	.word	0x46000000
 80033c8:	4c742400 	.word	0x4c742400
 80033cc:	4a742400 	.word	0x4a742400
 80033d0:	4af42400 	.word	0x4af42400

080033d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80033da:	f7ff fe81 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_GetHCLKFreq+0x50>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490f      	ldr	r1, [pc, #60]	; (8003428 <HAL_RCC_GetHCLKFreq+0x54>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_GetHCLKFreq+0x50>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_RCC_GetHCLKFreq+0x54>)
 8003402:	5cd3      	ldrb	r3, [r2, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a07      	ldr	r2, [pc, #28]	; (800342c <HAL_RCC_GetHCLKFreq+0x58>)
 8003410:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003412:	4a07      	ldr	r2, [pc, #28]	; (8003430 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCC_GetHCLKFreq+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	58024400 	.word	0x58024400
 8003428:	080070f8 	.word	0x080070f8
 800342c:	24000004 	.word	0x24000004
 8003430:	24000000 	.word	0x24000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003438:	f7ff ffcc 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCC_GetPCLK1Freq+0x28>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	58024400 	.word	0x58024400
 800345c:	080070f8 	.word	0x080070f8

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003464:	f7ff ffb6 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	58024400 	.word	0x58024400
 8003488:	080070f8 	.word	0x080070f8

0800348c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800348c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003490:	b0c8      	sub	sp, #288	; 0x120
 8003492:	af00      	add	r7, sp, #0
 8003494:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003498:	2300      	movs	r3, #0
 800349a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80034b0:	2500      	movs	r5, #0
 80034b2:	ea54 0305 	orrs.w	r3, r4, r5
 80034b6:	d049      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034c2:	d02f      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034c8:	d828      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ce:	d01a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d4:	d822      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034de:	d007      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034e0:	e01c      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e2:	4ba7      	ldr	r3, [pc, #668]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	4aa6      	ldr	r2, [pc, #664]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ee:	e01a      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f4:	3308      	adds	r3, #8
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fc43 	bl	8004d84 <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003504:	e00f      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350a:	3328      	adds	r3, #40	; 0x28
 800350c:	2102      	movs	r1, #2
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fcea 	bl	8004ee8 <RCCEx_PLL3_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800351a:	e004      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003522:	e000      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003526:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800352e:	4b94      	ldr	r3, [pc, #592]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353c:	4a90      	ldr	r2, [pc, #576]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353e:	430b      	orrs	r3, r1
 8003540:	6513      	str	r3, [r2, #80]	; 0x50
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003548:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003558:	f04f 0900 	mov.w	r9, #0
 800355c:	ea58 0309 	orrs.w	r3, r8, r9
 8003560:	d047      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	2b04      	cmp	r3, #4
 800356a:	d82a      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003589 	.word	0x08003589
 8003578:	08003597 	.word	0x08003597
 800357c:	080035ad 	.word	0x080035ad
 8003580:	080035cb 	.word	0x080035cb
 8003584:	080035cb 	.word	0x080035cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003588:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	4a7c      	ldr	r2, [pc, #496]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003594:	e01a      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359a:	3308      	adds	r3, #8
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fbf0 	bl	8004d84 <RCCEx_PLL2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035aa:	e00f      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b0:	3328      	adds	r3, #40	; 0x28
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fc97 	bl	8004ee8 <RCCEx_PLL3_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d4:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	f023 0107 	bic.w	r1, r3, #7
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	4a67      	ldr	r2, [pc, #412]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6513      	str	r3, [r2, #80]	; 0x50
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80035f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80035fe:	f04f 0b00 	mov.w	fp, #0
 8003602:	ea5a 030b 	orrs.w	r3, sl, fp
 8003606:	d054      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003612:	d036      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003614:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003618:	d82f      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	d032      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003624:	d829      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003626:	2bc0      	cmp	r3, #192	; 0xc0
 8003628:	d02f      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800362a:	2bc0      	cmp	r3, #192	; 0xc0
 800362c:	d825      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800362e:	2b80      	cmp	r3, #128	; 0x80
 8003630:	d018      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d821      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d007      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800363e:	e01c      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a4e      	ldr	r2, [pc, #312]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800364c:	e01e      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003652:	3308      	adds	r3, #8
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f001 fb94 	bl	8004d84 <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003662:	e013      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003668:	3328      	adds	r3, #40	; 0x28
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fc3b 	bl	8004ee8 <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003678:	e008      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003680:	e004      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800368a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003694:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003698:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800369c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	4a37      	ldr	r2, [pc, #220]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6513      	str	r3, [r2, #80]	; 0x50
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80036b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80036cc:	460b      	mov	r3, r1
 80036ce:	4313      	orrs	r3, r2
 80036d0:	d05c      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80036d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80036dc:	d03b      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80036e2:	d834      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d037      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d82e      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036f4:	d033      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036fa:	d828      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003700:	d01a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d822      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003710:	d007      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003712:	e01c      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003720:	e01e      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003726:	3308      	adds	r3, #8
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f001 fb2a 	bl	8004d84 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003736:	e013      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373c:	3328      	adds	r3, #40	; 0x28
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fbd1 	bl	8004ee8 <RCCEx_PLL3_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003754:	e004      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800375e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10d      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003776:	4a02      	ldr	r2, [pc, #8]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003778:	430b      	orrs	r3, r1
 800377a:	6513      	str	r3, [r2, #80]	; 0x50
 800377c:	e006      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800377e:	bf00      	nop
 8003780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003788:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800378c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80037a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	d03a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80037ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	2b30      	cmp	r3, #48	; 0x30
 80037b4:	d01f      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80037b6:	2b30      	cmp	r3, #48	; 0x30
 80037b8:	d819      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x362>
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d815      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x362>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d019      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d111      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ca:	4bae      	ldr	r3, [pc, #696]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	4aad      	ldr	r2, [pc, #692]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037d6:	e011      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037dc:	3308      	adds	r3, #8
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 facf 	bl	8004d84 <RCCEx_PLL2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80037fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003804:	4b9f      	ldr	r3, [pc, #636]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003808:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800380c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	4a9c      	ldr	r2, [pc, #624]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003814:	430b      	orrs	r3, r1
 8003816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800381e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800382e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003838:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800383c:	460b      	mov	r3, r1
 800383e:	4313      	orrs	r3, r2
 8003840:	d051      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384c:	d035      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800384e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003852:	d82e      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003854:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003858:	d031      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x432>
 800385a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800385e:	d828      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d01a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386a:	d822      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003874:	d007      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003876:	e01c      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4b82      	ldr	r3, [pc, #520]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	4a81      	ldr	r2, [pc, #516]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003884:	e01c      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388a:	3308      	adds	r3, #8
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f001 fa78 	bl	8004d84 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800389a:	e011      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800389c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a0:	3328      	adds	r3, #40	; 0x28
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fb1f 	bl	8004ee8 <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80038be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038c8:	4b6e      	ldr	r3, [pc, #440]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80038d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d6:	4a6b      	ldr	r2, [pc, #428]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6513      	str	r3, [r2, #80]	; 0x50
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d053      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800390a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003910:	d033      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003916:	d82c      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800391c:	d02f      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800391e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003922:	d826      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003924:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003928:	d02b      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800392a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800392e:	d820      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003934:	d012      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800393a:	d81a      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d022      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d115      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394a:	3308      	adds	r3, #8
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fa18 	bl	8004d84 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800395a:	e015      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800395c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003960:	3328      	adds	r3, #40	; 0x28
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fabf 	bl	8004ee8 <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003970:	e00a      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800397a:	bf00      	nop
 800397c:	e004      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800397e:	bf00      	nop
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003990:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800399e:	4a39      	ldr	r2, [pc, #228]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6513      	str	r3, [r2, #80]	; 0x50
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80039ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d060      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039d6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039da:	d039      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80039dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039e0:	d832      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e6:	d035      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80039e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ec:	d82c      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f2:	d031      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d826      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039fe:	d02d      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003a00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a04:	d820      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a0a:	d012      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a10:	d81a      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d024      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a1a:	d115      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a20:	3308      	adds	r3, #8
 8003a22:	2101      	movs	r1, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 f9ad 	bl	8004d84 <RCCEx_PLL2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a30:	e017      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a36:	3328      	adds	r3, #40	; 0x28
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fa54 	bl	8004ee8 <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a46:	e00c      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a4e:	e008      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a50:	bf00      	nop
 8003a52:	e006      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a54:	bf00      	nop
 8003a56:	e004      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a58:	bf00      	nop
 8003a5a:	e002      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10e      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a7a:	4a02      	ldr	r2, [pc, #8]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a82:	bf00      	nop
 8003a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d037      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d00e      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac0:	d816      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d018      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aca:	d111      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003acc:	4bc4      	ldr	r3, [pc, #784]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	4ac3      	ldr	r2, [pc, #780]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ad8:	e00f      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ade:	3308      	adds	r3, #8
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 f94e 	bl	8004d84 <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003aee:	e004      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b02:	4bb7      	ldr	r3, [pc, #732]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b10:	4ab3      	ldr	r2, [pc, #716]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6513      	str	r3, [r2, #80]	; 0x50
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d039      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d81c      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b8d 	.word	0x08003b8d
 8003b54:	08003b61 	.word	0x08003b61
 8003b58:	08003b6f 	.word	0x08003b6f
 8003b5c:	08003b8d 	.word	0x08003b8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b60:	4b9f      	ldr	r3, [pc, #636]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	4a9e      	ldr	r2, [pc, #632]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b6c:	e00f      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b72:	3308      	adds	r3, #8
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f904 	bl	8004d84 <RCCEx_PLL2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b82:	e004      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b96:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	f023 0103 	bic.w	r1, r3, #3
 8003b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	4a8e      	ldr	r2, [pc, #568]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f000 8099 	beq.w	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd6:	4b83      	ldr	r3, [pc, #524]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a82      	ldr	r2, [pc, #520]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be2:	f7fd fbcd 	bl	8001380 <HAL_GetTick>
 8003be6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bea:	e00b      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fd fbc8 	bl	8001380 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	; 0x64
 8003bfa:	d903      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c02:	e005      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c04:	4b77      	ldr	r3, [pc, #476]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ed      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003c10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d173      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c18:	4b71      	ldr	r3, [pc, #452]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c24:	4053      	eors	r3, r2
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d015      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c3a:	4b69      	ldr	r3, [pc, #420]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	4a68      	ldr	r2, [pc, #416]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c46:	4b66      	ldr	r3, [pc, #408]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a65      	ldr	r2, [pc, #404]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c52:	4a63      	ldr	r2, [pc, #396]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c66:	d118      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fb8a 	bl	8001380 <HAL_GetTick>
 8003c6c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c70:	e00d      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fd fb85 	bl	8001380 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c7c:	1ad2      	subs	r2, r2, r3
 8003c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d903      	bls.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003c8c:	e005      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c8e:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0eb      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d129      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb2:	d10e      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cc4:	091a      	lsrs	r2, r3, #4
 8003cc6:	4b48      	ldr	r3, [pc, #288]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	4a45      	ldr	r2, [pc, #276]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6113      	str	r3, [r2, #16]
 8003cd0:	e005      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003cd2:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	4a42      	ldr	r2, [pc, #264]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cdc:	6113      	str	r3, [r2, #16]
 8003cde:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cee:	4a3c      	ldr	r2, [pc, #240]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf4:	e008      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cfa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f002 0301 	and.w	r3, r2, #1
 8003d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f000 8090 	beq.w	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d32:	2b28      	cmp	r3, #40	; 0x28
 8003d34:	d870      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003e21 	.word	0x08003e21
 8003d40:	08003e19 	.word	0x08003e19
 8003d44:	08003e19 	.word	0x08003e19
 8003d48:	08003e19 	.word	0x08003e19
 8003d4c:	08003e19 	.word	0x08003e19
 8003d50:	08003e19 	.word	0x08003e19
 8003d54:	08003e19 	.word	0x08003e19
 8003d58:	08003e19 	.word	0x08003e19
 8003d5c:	08003ded 	.word	0x08003ded
 8003d60:	08003e19 	.word	0x08003e19
 8003d64:	08003e19 	.word	0x08003e19
 8003d68:	08003e19 	.word	0x08003e19
 8003d6c:	08003e19 	.word	0x08003e19
 8003d70:	08003e19 	.word	0x08003e19
 8003d74:	08003e19 	.word	0x08003e19
 8003d78:	08003e19 	.word	0x08003e19
 8003d7c:	08003e03 	.word	0x08003e03
 8003d80:	08003e19 	.word	0x08003e19
 8003d84:	08003e19 	.word	0x08003e19
 8003d88:	08003e19 	.word	0x08003e19
 8003d8c:	08003e19 	.word	0x08003e19
 8003d90:	08003e19 	.word	0x08003e19
 8003d94:	08003e19 	.word	0x08003e19
 8003d98:	08003e19 	.word	0x08003e19
 8003d9c:	08003e21 	.word	0x08003e21
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e19 	.word	0x08003e19
 8003da8:	08003e19 	.word	0x08003e19
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003e19 	.word	0x08003e19
 8003db4:	08003e19 	.word	0x08003e19
 8003db8:	08003e19 	.word	0x08003e19
 8003dbc:	08003e21 	.word	0x08003e21
 8003dc0:	08003e19 	.word	0x08003e19
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003e19 	.word	0x08003e19
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e21 	.word	0x08003e21
 8003de0:	58024400 	.word	0x58024400
 8003de4:	58024800 	.word	0x58024800
 8003de8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df0:	3308      	adds	r3, #8
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 ffc5 	bl	8004d84 <RCCEx_PLL2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e00:	e00f      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e06:	3328      	adds	r3, #40	; 0x28
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 f86c 	bl	8004ee8 <RCCEx_PLL3_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e16:	e004      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e2a:	4bc0      	ldr	r3, [pc, #768]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3a:	4abc      	ldr	r2, [pc, #752]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6553      	str	r3, [r2, #84]	; 0x54
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	f002 0302 	and.w	r3, r2, #2
 8003e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003e64:	460b      	mov	r3, r1
 8003e66:	4313      	orrs	r3, r2
 8003e68:	d043      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d824      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003ec9 	.word	0x08003ec9
 8003e80:	08003e95 	.word	0x08003e95
 8003e84:	08003eab 	.word	0x08003eab
 8003e88:	08003ec9 	.word	0x08003ec9
 8003e8c:	08003ec9 	.word	0x08003ec9
 8003e90:	08003ec9 	.word	0x08003ec9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e98:	3308      	adds	r3, #8
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 ff71 	bl	8004d84 <RCCEx_PLL2_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ea8:	e00f      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eae:	3328      	adds	r3, #40	; 0x28
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f818 	bl	8004ee8 <RCCEx_PLL3_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ebe:	e004      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ec6:	e000      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ed2:	4b96      	ldr	r3, [pc, #600]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f023 0107 	bic.w	r1, r3, #7
 8003eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee2:	4a92      	ldr	r2, [pc, #584]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ee8:	e003      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f002 0304 	and.w	r3, r2, #4
 8003efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f02:	2300      	movs	r3, #0
 8003f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	d043      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d824      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f71 	.word	0x08003f71
 8003f28:	08003f3d 	.word	0x08003f3d
 8003f2c:	08003f53 	.word	0x08003f53
 8003f30:	08003f71 	.word	0x08003f71
 8003f34:	08003f71 	.word	0x08003f71
 8003f38:	08003f71 	.word	0x08003f71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f40:	3308      	adds	r3, #8
 8003f42:	2101      	movs	r1, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 ff1d 	bl	8004d84 <RCCEx_PLL2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f50:	e00f      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f56:	3328      	adds	r3, #40	; 0x28
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 ffc4 	bl	8004ee8 <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f66:	e004      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f7a:	4b6c      	ldr	r3, [pc, #432]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f023 0107 	bic.w	r1, r3, #7
 8003f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8a:	4a68      	ldr	r2, [pc, #416]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f90:	e003      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f002 0320 	and.w	r3, r2, #32
 8003fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	d055      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fc6:	d033      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fcc:	d82c      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d02f      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d826      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fde:	d02b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003fe0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fe4:	d820      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fea:	d012      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff0:	d81a      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d022      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ffa:	d115      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004000:	3308      	adds	r3, #8
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 febd 	bl	8004d84 <RCCEx_PLL2_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004010:	e015      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	3328      	adds	r3, #40	; 0x28
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ff64 	bl	8004ee8 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004026:	e00a      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800402e:	e006      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004030:	bf00      	nop
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800403c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004046:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800404e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004056:	4a35      	ldr	r2, [pc, #212]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6553      	str	r3, [r2, #84]	; 0x54
 800405c:	e003      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004062:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800407c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d058      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800408e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004092:	d033      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004094:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004098:	d82c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409e:	d02f      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d826      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80040a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040aa:	d02b      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80040ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040b0:	d820      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b6:	d012      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80040b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040bc:	d81a      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d022      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d115      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040cc:	3308      	adds	r3, #8
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fe57 	bl	8004d84 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040dc:	e015      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e2:	3328      	adds	r3, #40	; 0x28
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fefe 	bl	8004ee8 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040f2:	e00a      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040fc:	bf00      	nop
 80040fe:	e004      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10e      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800411a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004122:	4a02      	ldr	r2, [pc, #8]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004124:	430b      	orrs	r3, r1
 8004126:	6593      	str	r3, [r2, #88]	; 0x58
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004134:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800414e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004152:	460b      	mov	r3, r1
 8004154:	4313      	orrs	r3, r2
 8004156:	d055      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004160:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004164:	d033      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004166:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800416a:	d82c      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004170:	d02f      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004176:	d826      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004178:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800417c:	d02b      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800417e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004182:	d820      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004188:	d012      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800418a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418e:	d81a      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d022      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004198:	d115      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419e:	3308      	adds	r3, #8
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fdee 	bl	8004d84 <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041ae:	e015      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	3328      	adds	r3, #40	; 0x28
 80041b6:	2102      	movs	r1, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fe95 	bl	8004ee8 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041c4:	e00a      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041ce:	bf00      	nop
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041e4:	4ba1      	ldr	r3, [pc, #644]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80041ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041f4:	4a9d      	ldr	r2, [pc, #628]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6593      	str	r3, [r2, #88]	; 0x58
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004200:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 0308 	and.w	r3, r2, #8
 8004210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800421a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d01e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d10c      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	3328      	adds	r3, #40	; 0x28
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fe54 	bl	8004ee8 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800424c:	4b87      	ldr	r3, [pc, #540]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425c:	4a83      	ldr	r2, [pc, #524]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800425e:	430b      	orrs	r3, r1
 8004260:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f002 0310 	and.w	r3, r2, #16
 800426e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004278:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d01e      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004286:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d10c      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004294:	3328      	adds	r3, #40	; 0x28
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fe25 	bl	8004ee8 <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042aa:	4b70      	ldr	r3, [pc, #448]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ba:	4a6c      	ldr	r2, [pc, #432]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042bc:	430b      	orrs	r3, r1
 80042be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80042cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80042da:	460b      	mov	r3, r1
 80042dc:	4313      	orrs	r3, r2
 80042de:	d03e      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ec:	d022      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80042ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f2:	d81b      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d00b      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80042fe:	e015      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004304:	3308      	adds	r3, #8
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fd3b 	bl	8004d84 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004314:	e00f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431a:	3328      	adds	r3, #40	; 0x28
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fde2 	bl	8004ee8 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800432a:	e004      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800433e:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800434e:	4a47      	ldr	r2, [pc, #284]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004350:	430b      	orrs	r3, r1
 8004352:	6593      	str	r3, [r2, #88]	; 0x58
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800435a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800436a:	67bb      	str	r3, [r7, #120]	; 0x78
 800436c:	2300      	movs	r3, #0
 800436e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004370:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d03b      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004386:	d01f      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800438c:	d818      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800438e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004392:	d003      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004398:	d007      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800439a:	e011      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439c:	4b33      	ldr	r3, [pc, #204]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	4a32      	ldr	r2, [pc, #200]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043a8:	e00f      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ae:	3328      	adds	r3, #40	; 0x28
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fd98 	bl	8004ee8 <RCCEx_PLL3_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80043be:	e004      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043c6:	e000      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80043c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d2:	4b26      	ldr	r3, [pc, #152]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80043da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	4a22      	ldr	r2, [pc, #136]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6553      	str	r3, [r2, #84]	; 0x54
 80043e8:	e003      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80043fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004400:	2300      	movs	r3, #0
 8004402:	677b      	str	r3, [r7, #116]	; 0x74
 8004404:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004408:	460b      	mov	r3, r1
 800440a:	4313      	orrs	r3, r2
 800440c:	d034      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800440e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800441e:	e011      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a11      	ldr	r2, [pc, #68]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800442c:	e00e      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800442e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004432:	3308      	adds	r3, #8
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fca4 	bl	8004d84 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004442:	e003      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800444a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004462:	4a02      	ldr	r2, [pc, #8]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004464:	430b      	orrs	r3, r1
 8004466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800446a:	bf00      	nop
 800446c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004474:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004484:	66bb      	str	r3, [r7, #104]	; 0x68
 8004486:	2300      	movs	r3, #0
 8004488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800448a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800448e:	460b      	mov	r3, r1
 8004490:	4313      	orrs	r3, r2
 8004492:	d00c      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004498:	3328      	adds	r3, #40	; 0x28
 800449a:	2102      	movs	r1, #2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fd23 	bl	8004ee8 <RCCEx_PLL3_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80044ba:	663b      	str	r3, [r7, #96]	; 0x60
 80044bc:	2300      	movs	r3, #0
 80044be:	667b      	str	r3, [r7, #100]	; 0x64
 80044c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d038      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d6:	d018      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80044d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044dc:	d811      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80044de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e2:	d014      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e8:	d80b      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d011      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80044ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f2:	d106      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f4:	4bc3      	ldr	r3, [pc, #780]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4ac2      	ldr	r2, [pc, #776]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004500:	e008      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004508:	e004      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800450a:	bf00      	nop
 800450c:	e002      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004514:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800451c:	4bb9      	ldr	r3, [pc, #740]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	4ab5      	ldr	r2, [pc, #724]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6553      	str	r3, [r2, #84]	; 0x54
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004538:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800453c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004548:	65bb      	str	r3, [r7, #88]	; 0x58
 800454a:	2300      	movs	r3, #0
 800454c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800454e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004558:	4baa      	ldr	r3, [pc, #680]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004566:	4aa7      	ldr	r2, [pc, #668]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004568:	430b      	orrs	r3, r1
 800456a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004578:	653b      	str	r3, [r7, #80]	; 0x50
 800457a:	2300      	movs	r3, #0
 800457c:	657b      	str	r3, [r7, #84]	; 0x54
 800457e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004582:	460b      	mov	r3, r1
 8004584:	4313      	orrs	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004588:	4b9e      	ldr	r3, [pc, #632]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a9b      	ldr	r2, [pc, #620]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004598:	430b      	orrs	r3, r1
 800459a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80045a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045aa:	2300      	movs	r3, #0
 80045ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80045b8:	4b92      	ldr	r3, [pc, #584]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80045c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c6:	4a8f      	ldr	r2, [pc, #572]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
 80045da:	2300      	movs	r3, #0
 80045dc:	647b      	str	r3, [r7, #68]	; 0x44
 80045de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e8:	4b86      	ldr	r3, [pc, #536]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	4a85      	ldr	r2, [pc, #532]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045f2:	6113      	str	r3, [r2, #16]
 80045f4:	4b83      	ldr	r3, [pc, #524]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045f6:	6919      	ldr	r1, [r3, #16]
 80045f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004600:	4a80      	ldr	r2, [pc, #512]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004602:	430b      	orrs	r3, r1
 8004604:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004612:	63bb      	str	r3, [r7, #56]	; 0x38
 8004614:	2300      	movs	r3, #0
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004618:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800461c:	460b      	mov	r3, r1
 800461e:	4313      	orrs	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004622:	4b78      	ldr	r3, [pc, #480]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004626:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	4a74      	ldr	r2, [pc, #464]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004632:	430b      	orrs	r3, r1
 8004634:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
 8004644:	2300      	movs	r3, #0
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
 8004648:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800464c:	460b      	mov	r3, r1
 800464e:	4313      	orrs	r3, r2
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004652:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800465a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004662:	4a68      	ldr	r2, [pc, #416]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004664:	430b      	orrs	r3, r1
 8004666:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	2100      	movs	r1, #0
 8004672:	62b9      	str	r1, [r7, #40]	; 0x28
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d011      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004688:	3308      	adds	r3, #8
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fb79 	bl	8004d84 <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	2100      	movs	r1, #0
 80046b2:	6239      	str	r1, [r7, #32]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d011      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c8:	3308      	adds	r3, #8
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fb59 	bl	8004d84 <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80046d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	2100      	movs	r1, #0
 80046f2:	61b9      	str	r1, [r7, #24]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046fe:	460b      	mov	r3, r1
 8004700:	4313      	orrs	r3, r2
 8004702:	d011      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004708:	3308      	adds	r3, #8
 800470a:	2102      	movs	r1, #2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fb39 	bl	8004d84 <RCCEx_PLL2_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004724:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	2100      	movs	r1, #0
 8004732:	6139      	str	r1, [r7, #16]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d011      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	3328      	adds	r3, #40	; 0x28
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fbcb 	bl	8004ee8 <RCCEx_PLL3_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004764:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	2100      	movs	r1, #0
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800477e:	460b      	mov	r3, r1
 8004780:	4313      	orrs	r3, r2
 8004782:	d011      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004788:	3328      	adds	r3, #40	; 0x28
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fbab 	bl	8004ee8 <RCCEx_PLL3_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	2100      	movs	r1, #0
 80047b2:	6039      	str	r1, [r7, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d011      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c8:	3328      	adds	r3, #40	; 0x28
 80047ca:	2102      	movs	r1, #2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fb8b 	bl	8004ee8 <RCCEx_PLL3_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80047e8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80047fc:	46bd      	mov	sp, r7
 80047fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004802:	bf00      	nop
 8004804:	58024400 	.word	0x58024400

08004808 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800480c:	f7fe fde2 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 8004810:	4602      	mov	r2, r0
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	4904      	ldr	r1, [pc, #16]	; (8004830 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800481e:	5ccb      	ldrb	r3, [r1, r3]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	58024400 	.word	0x58024400
 8004830:	080070f8 	.word	0x080070f8

08004834 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800483c:	4ba1      	ldr	r3, [pc, #644]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004846:	4b9f      	ldr	r3, [pc, #636]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	0b1b      	lsrs	r3, r3, #12
 800484c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004850:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004852:	4b9c      	ldr	r3, [pc, #624]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800485e:	4b99      	ldr	r3, [pc, #612]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	08db      	lsrs	r3, r3, #3
 8004864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8111 	beq.w	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b02      	cmp	r3, #2
 8004886:	f000 8083 	beq.w	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b02      	cmp	r3, #2
 800488e:	f200 80a1 	bhi.w	80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d056      	beq.n	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800489e:	e099      	b.n	80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048a0:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02d      	beq.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048ac:	4b85      	ldr	r3, [pc, #532]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	4a84      	ldr	r2, [pc, #528]	; (8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	4b7b      	ldr	r3, [pc, #492]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004906:	e087      	b.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491a:	4b6a      	ldr	r3, [pc, #424]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492a:	ed97 6a03 	vldr	s12, [r7, #12]
 800492e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494a:	e065      	b.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800495a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495e:	4b59      	ldr	r3, [pc, #356]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004972:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498e:	e043      	b.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800499e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a2:	4b48      	ldr	r3, [pc, #288]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049d2:	e021      	b.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a18:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	0a5b      	lsrs	r3, r3, #9
 8004a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3e:	ee17 2a90 	vmov	r2, s15
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a46:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6c:	ee17 2a90 	vmov	r2, s15
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a74:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	0e1b      	lsrs	r3, r3, #24
 8004a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9a:	ee17 2a90 	vmov	r2, s15
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	609a      	str	r2, [r3, #8]
}
 8004ab6:	bf00      	nop
 8004ab8:	3724      	adds	r7, #36	; 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	03d09000 	.word	0x03d09000
 8004acc:	46000000 	.word	0x46000000
 8004ad0:	4c742400 	.word	0x4c742400
 8004ad4:	4a742400 	.word	0x4a742400
 8004ad8:	4af42400 	.word	0x4af42400

08004adc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ae4:	4ba1      	ldr	r3, [pc, #644]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004aee:	4b9f      	ldr	r3, [pc, #636]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	0d1b      	lsrs	r3, r3, #20
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004afa:	4b9c      	ldr	r3, [pc, #624]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b06:	4b99      	ldr	r3, [pc, #612]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8111 	beq.w	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f000 8083 	beq.w	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	f200 80a1 	bhi.w	8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d056      	beq.n	8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b46:	e099      	b.n	8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b48:	4b88      	ldr	r3, [pc, #544]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02d      	beq.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b54:	4b85      	ldr	r3, [pc, #532]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	4a84      	ldr	r2, [pc, #528]	; (8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
 8004b64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	ee07 3a90 	vmov	s15, r3
 8004b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b7b      	ldr	r3, [pc, #492]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bae:	e087      	b.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf2:	e065      	b.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c36:	e043      	b.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b48      	ldr	r3, [pc, #288]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c7a:	e021      	b.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004cc0:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	0a5b      	lsrs	r3, r3, #9
 8004cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce6:	ee17 2a90 	vmov	r2, s15
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d14:	ee17 2a90 	vmov	r2, s15
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	0e1b      	lsrs	r3, r3, #24
 8004d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d42:	ee17 2a90 	vmov	r2, s15
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d4a:	e008      	b.n	8004d5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	3724      	adds	r7, #36	; 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	03d09000 	.word	0x03d09000
 8004d74:	46000000 	.word	0x46000000
 8004d78:	4c742400 	.word	0x4c742400
 8004d7c:	4a742400 	.word	0x4a742400
 8004d80:	4af42400 	.word	0x4af42400

08004d84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d92:	4b53      	ldr	r3, [pc, #332]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d101      	bne.n	8004da2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e099      	b.n	8004ed6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004da2:	4b4f      	ldr	r3, [pc, #316]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a4e      	ldr	r2, [pc, #312]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dae:	f7fc fae7 	bl	8001380 <HAL_GetTick>
 8004db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004db4:	e008      	b.n	8004dc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004db6:	f7fc fae3 	bl	8001380 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e086      	b.n	8004ed6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dc8:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f0      	bne.n	8004db6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dd4:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	031b      	lsls	r3, r3, #12
 8004de2:	493f      	ldr	r1, [pc, #252]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	628b      	str	r3, [r1, #40]	; 0x28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	025b      	lsls	r3, r3, #9
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e18:	4931      	ldr	r1, [pc, #196]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	492d      	ldr	r1, [pc, #180]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e30:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	f023 0220 	bic.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	4928      	ldr	r1, [pc, #160]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e42:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e4e:	4b24      	ldr	r3, [pc, #144]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <RCCEx_PLL2_Config+0x160>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	69d2      	ldr	r2, [r2, #28]
 8004e5a:	00d2      	lsls	r2, r2, #3
 8004e5c:	4920      	ldr	r1, [pc, #128]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e62:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e68:	f043 0310 	orr.w	r3, r3, #16
 8004e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e80:	e00f      	b.n	8004ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d106      	bne.n	8004e96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e88:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e94:	e005      	b.n	8004ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	4a11      	ldr	r2, [pc, #68]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a0e      	ldr	r2, [pc, #56]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eae:	f7fc fa67 	bl	8001380 <HAL_GetTick>
 8004eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004eb4:	e008      	b.n	8004ec8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eb6:	f7fc fa63 	bl	8001380 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e006      	b.n	8004ed6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <RCCEx_PLL2_Config+0x15c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	ffff0007 	.word	0xffff0007

08004ee8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef6:	4b53      	ldr	r3, [pc, #332]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d101      	bne.n	8004f06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e099      	b.n	800503a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f06:	4b4f      	ldr	r3, [pc, #316]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4e      	ldr	r2, [pc, #312]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f12:	f7fc fa35 	bl	8001380 <HAL_GetTick>
 8004f16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f1a:	f7fc fa31 	bl	8001380 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e086      	b.n	800503a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f2c:	4b45      	ldr	r3, [pc, #276]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f38:	4b42      	ldr	r3, [pc, #264]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	051b      	lsls	r3, r3, #20
 8004f46:	493f      	ldr	r1, [pc, #252]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	025b      	lsls	r3, r3, #9
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f7c:	4931      	ldr	r1, [pc, #196]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f82:	4b30      	ldr	r3, [pc, #192]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	492d      	ldr	r1, [pc, #180]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f94:	4b2b      	ldr	r3, [pc, #172]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	4928      	ldr	r1, [pc, #160]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fa6:	4b27      	ldr	r3, [pc, #156]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a26      	ldr	r2, [pc, #152]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <RCCEx_PLL3_Config+0x160>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	69d2      	ldr	r2, [r2, #28]
 8004fbe:	00d2      	lsls	r2, r2, #3
 8004fc0:	4920      	ldr	r1, [pc, #128]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fc6:	4b1f      	ldr	r3, [pc, #124]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fd8:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	4a19      	ldr	r2, [pc, #100]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fe4:	e00f      	b.n	8005006 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fec:	4b15      	ldr	r3, [pc, #84]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4a14      	ldr	r2, [pc, #80]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004ff2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ff8:	e005      	b.n	8005006 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	4a11      	ldr	r2, [pc, #68]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8005000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005004:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005006:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a0e      	ldr	r2, [pc, #56]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 800500c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005012:	f7fc f9b5 	bl	8001380 <HAL_GetTick>
 8005016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005018:	e008      	b.n	800502c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800501a:	f7fc f9b1 	bl	8001380 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e006      	b.n	800503a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <RCCEx_PLL3_Config+0x15c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	ffff0007 	.word	0xffff0007

0800504c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e042      	b.n	80050e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fb fec9 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2224      	movs	r2, #36	; 0x24
 800507a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fcec 	bl	8005a6c <UART_SetConfig>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e022      	b.n	80050e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 fb4c 	bl	8006744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 fbd3 	bl	8006888 <UART_CheckIdleState>
 80050e2:	4603      	mov	r3, r0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e04a      	b.n	8005194 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fb fe79 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	; 0x24
 800511a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fc9c 	bl	8005a6c <UART_SetConfig>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e02a      	b.n	8005194 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 fafc 	bl	8006744 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800515a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800516a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 fb7b 	bl	8006888 <UART_CheckIdleState>
 8005192:	4603      	mov	r3, r0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d17b      	bne.n	80052ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_UART_Transmit+0x26>
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e074      	b.n	80052b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2221      	movs	r2, #33	; 0x21
 80051d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051d6:	f7fc f8d3 	bl	8001380 <HAL_GetTick>
 80051da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	88fa      	ldrh	r2, [r7, #6]
 80051e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f4:	d108      	bne.n	8005208 <HAL_UART_Transmit+0x6c>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e003      	b.n	8005210 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005210:	e030      	b.n	8005274 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	2180      	movs	r1, #128	; 0x80
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f001 fbdd 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e03d      	b.n	80052b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005248:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	3302      	adds	r3, #2
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e007      	b.n	8005262 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	781a      	ldrb	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3301      	adds	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1c8      	bne.n	8005212 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f001 fba6 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e006      	b.n	80052b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b0ba      	sub	sp, #232	; 0xe8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80052e6:	4013      	ands	r3, r2
 80052e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d11b      	bne.n	800532c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d015      	beq.n	800532c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800530c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8377 	beq.w	8005a10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
      }
      return;
 800532a:	e371      	b.n	8005a10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800532c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8123 	beq.w	800557c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800533a:	4b8d      	ldr	r3, [pc, #564]	; (8005570 <HAL_UART_IRQHandler+0x2b8>)
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005346:	4b8b      	ldr	r3, [pc, #556]	; (8005574 <HAL_UART_IRQHandler+0x2bc>)
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8116 	beq.w	800557c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d011      	beq.n	8005380 <HAL_UART_IRQHandler+0xc8>
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d011      	beq.n	80053b0 <HAL_UART_IRQHandler+0xf8>
 800538c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2202      	movs	r2, #2
 800539e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d011      	beq.n	80053e0 <HAL_UART_IRQHandler+0x128>
 80053bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2204      	movs	r2, #4
 80053ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f043 0202 	orr.w	r2, r3, #2
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d017      	beq.n	800541c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80053f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80053fc:	4b5c      	ldr	r3, [pc, #368]	; (8005570 <HAL_UART_IRQHandler+0x2b8>)
 80053fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2208      	movs	r2, #8
 800540a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005424:	2b00      	cmp	r3, #0
 8005426:	d012      	beq.n	800544e <HAL_UART_IRQHandler+0x196>
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00c      	beq.n	800544e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 82dd 	beq.w	8005a14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d013      	beq.n	800548e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d105      	bne.n	800547e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d005      	beq.n	80054b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d054      	beq.n	800555c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 fafa 	bl	8006aac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d146      	bne.n	8005554 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800550a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1d9      	bne.n	80054c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d017      	beq.n	800554c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <HAL_UART_IRQHandler+0x2c0>)
 8005524:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552c:	4618      	mov	r0, r3
 800552e:	f7fc fb85 	bl	8001c3c <HAL_DMA_Abort_IT>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d019      	beq.n	800556c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005546:	4610      	mov	r0, r2
 8005548:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554a:	e00f      	b.n	800556c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa77 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005552:	e00b      	b.n	800556c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa73 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555a:	e007      	b.n	800556c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa6f 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800556a:	e253      	b.n	8005a14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	bf00      	nop
    return;
 800556e:	e251      	b.n	8005a14 <HAL_UART_IRQHandler+0x75c>
 8005570:	10000001 	.word	0x10000001
 8005574:	04000120 	.word	0x04000120
 8005578:	08006b79 	.word	0x08006b79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005580:	2b01      	cmp	r3, #1
 8005582:	f040 81e7 	bne.w	8005954 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 81e0 	beq.w	8005954 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 81d9 	beq.w	8005954 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2210      	movs	r2, #16
 80055a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	f040 8151 	bne.w	800585c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a96      	ldr	r2, [pc, #600]	; (800581c <HAL_UART_IRQHandler+0x564>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d068      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a93      	ldr	r2, [pc, #588]	; (8005820 <HAL_UART_IRQHandler+0x568>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d061      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a91      	ldr	r2, [pc, #580]	; (8005824 <HAL_UART_IRQHandler+0x56c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d05a      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a8e      	ldr	r2, [pc, #568]	; (8005828 <HAL_UART_IRQHandler+0x570>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d053      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a8c      	ldr	r2, [pc, #560]	; (800582c <HAL_UART_IRQHandler+0x574>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d04c      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a89      	ldr	r2, [pc, #548]	; (8005830 <HAL_UART_IRQHandler+0x578>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d045      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a87      	ldr	r2, [pc, #540]	; (8005834 <HAL_UART_IRQHandler+0x57c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d03e      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a84      	ldr	r2, [pc, #528]	; (8005838 <HAL_UART_IRQHandler+0x580>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d037      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a82      	ldr	r2, [pc, #520]	; (800583c <HAL_UART_IRQHandler+0x584>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d030      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a7f      	ldr	r2, [pc, #508]	; (8005840 <HAL_UART_IRQHandler+0x588>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d029      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7d      	ldr	r2, [pc, #500]	; (8005844 <HAL_UART_IRQHandler+0x58c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d022      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a7a      	ldr	r2, [pc, #488]	; (8005848 <HAL_UART_IRQHandler+0x590>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01b      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a78      	ldr	r2, [pc, #480]	; (800584c <HAL_UART_IRQHandler+0x594>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d014      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a75      	ldr	r2, [pc, #468]	; (8005850 <HAL_UART_IRQHandler+0x598>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00d      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a73      	ldr	r2, [pc, #460]	; (8005854 <HAL_UART_IRQHandler+0x59c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d006      	beq.n	800569a <HAL_UART_IRQHandler+0x3e2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a70      	ldr	r2, [pc, #448]	; (8005858 <HAL_UART_IRQHandler+0x5a0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d106      	bne.n	80056a8 <HAL_UART_IRQHandler+0x3f0>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	e005      	b.n	80056b4 <HAL_UART_IRQHandler+0x3fc>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 81ab 	beq.w	8005a18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056cc:	429a      	cmp	r2, r3
 80056ce:	f080 81a3 	bcs.w	8005a18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e8:	f000 8087 	beq.w	80057fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800571a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800572e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1da      	bne.n	80056ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800575a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800575e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800576c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e1      	bne.n	8005736 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800579c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e3      	bne.n	8005772 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c8:	f023 0310 	bic.w	r3, r3, #16
 80057cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057da:	65bb      	str	r3, [r7, #88]	; 0x58
 80057dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e4      	bne.n	80057b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fb ff03 	bl	8001600 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800580c:	b29b      	uxth	r3, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	b29b      	uxth	r3, r3
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f91d 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800581a:	e0fd      	b.n	8005a18 <HAL_UART_IRQHandler+0x760>
 800581c:	40020010 	.word	0x40020010
 8005820:	40020028 	.word	0x40020028
 8005824:	40020040 	.word	0x40020040
 8005828:	40020058 	.word	0x40020058
 800582c:	40020070 	.word	0x40020070
 8005830:	40020088 	.word	0x40020088
 8005834:	400200a0 	.word	0x400200a0
 8005838:	400200b8 	.word	0x400200b8
 800583c:	40020410 	.word	0x40020410
 8005840:	40020428 	.word	0x40020428
 8005844:	40020440 	.word	0x40020440
 8005848:	40020458 	.word	0x40020458
 800584c:	40020470 	.word	0x40020470
 8005850:	40020488 	.word	0x40020488
 8005854:	400204a0 	.word	0x400204a0
 8005858:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005868:	b29b      	uxth	r3, r3
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80cf 	beq.w	8005a1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800587e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80ca 	beq.w	8005a1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800589c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058aa:	647b      	str	r3, [r7, #68]	; 0x44
 80058ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e4      	bne.n	8005888 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	623b      	str	r3, [r7, #32]
   return(result);
 80058ce:	6a3a      	ldr	r2, [r7, #32]
 80058d0:	4b55      	ldr	r3, [pc, #340]	; (8005a28 <HAL_UART_IRQHandler+0x770>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058e2:	633a      	str	r2, [r7, #48]	; 0x30
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e3      	bne.n	80058be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	60fb      	str	r3, [r7, #12]
   return(result);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0310 	bic.w	r3, r3, #16
 800591e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	617b      	str	r3, [r7, #20]
   return(result);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e4      	bne.n	800590a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f881 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005952:	e063      	b.n	8005a1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <HAL_UART_IRQHandler+0x6c6>
 8005960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 f93f 	bl	8006bfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800597c:	e051      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b00      	cmp	r3, #0
 8005988:	d014      	beq.n	80059b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d105      	bne.n	80059a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d03a      	beq.n	8005a20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	4798      	blx	r3
    }
    return;
 80059b2:	e035      	b.n	8005a20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_UART_IRQHandler+0x71c>
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f8e9 	bl	8006ba4 <UART_EndTransmit_IT>
    return;
 80059d2:	e026      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80059d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <HAL_UART_IRQHandler+0x73c>
 80059e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 f918 	bl	8006c22 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059f2:	e016      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <HAL_UART_IRQHandler+0x76a>
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	da0c      	bge.n	8005a22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f900 	bl	8006c0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a0e:	e008      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
      return;
 8005a10:	bf00      	nop
 8005a12:	e006      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
    return;
 8005a14:	bf00      	nop
 8005a16:	e004      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
      return;
 8005a18:	bf00      	nop
 8005a1a:	e002      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
      return;
 8005a1c:	bf00      	nop
 8005a1e:	e000      	b.n	8005a22 <HAL_UART_IRQHandler+0x76a>
    return;
 8005a20:	bf00      	nop
  }
}
 8005a22:	37e8      	adds	r7, #232	; 0xe8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	effffffe 	.word	0xeffffffe

08005a2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a70:	b092      	sub	sp, #72	; 0x48
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4bbe      	ldr	r3, [pc, #760]	; (8005d94 <UART_SetConfig+0x328>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4ab3      	ldr	r2, [pc, #716]	; (8005d98 <UART_SetConfig+0x32c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	4baf      	ldr	r3, [pc, #700]	; (8005d9c <UART_SetConfig+0x330>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	f023 010f 	bic.w	r1, r3, #15
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4aa6      	ldr	r2, [pc, #664]	; (8005da0 <UART_SetConfig+0x334>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d177      	bne.n	8005bfc <UART_SetConfig+0x190>
 8005b0c:	4ba5      	ldr	r3, [pc, #660]	; (8005da4 <UART_SetConfig+0x338>)
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b14:	2b28      	cmp	r3, #40	; 0x28
 8005b16:	d86d      	bhi.n	8005bf4 <UART_SetConfig+0x188>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0xb4>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005bc5 	.word	0x08005bc5
 8005b24:	08005bf5 	.word	0x08005bf5
 8005b28:	08005bf5 	.word	0x08005bf5
 8005b2c:	08005bf5 	.word	0x08005bf5
 8005b30:	08005bf5 	.word	0x08005bf5
 8005b34:	08005bf5 	.word	0x08005bf5
 8005b38:	08005bf5 	.word	0x08005bf5
 8005b3c:	08005bf5 	.word	0x08005bf5
 8005b40:	08005bcd 	.word	0x08005bcd
 8005b44:	08005bf5 	.word	0x08005bf5
 8005b48:	08005bf5 	.word	0x08005bf5
 8005b4c:	08005bf5 	.word	0x08005bf5
 8005b50:	08005bf5 	.word	0x08005bf5
 8005b54:	08005bf5 	.word	0x08005bf5
 8005b58:	08005bf5 	.word	0x08005bf5
 8005b5c:	08005bf5 	.word	0x08005bf5
 8005b60:	08005bd5 	.word	0x08005bd5
 8005b64:	08005bf5 	.word	0x08005bf5
 8005b68:	08005bf5 	.word	0x08005bf5
 8005b6c:	08005bf5 	.word	0x08005bf5
 8005b70:	08005bf5 	.word	0x08005bf5
 8005b74:	08005bf5 	.word	0x08005bf5
 8005b78:	08005bf5 	.word	0x08005bf5
 8005b7c:	08005bf5 	.word	0x08005bf5
 8005b80:	08005bdd 	.word	0x08005bdd
 8005b84:	08005bf5 	.word	0x08005bf5
 8005b88:	08005bf5 	.word	0x08005bf5
 8005b8c:	08005bf5 	.word	0x08005bf5
 8005b90:	08005bf5 	.word	0x08005bf5
 8005b94:	08005bf5 	.word	0x08005bf5
 8005b98:	08005bf5 	.word	0x08005bf5
 8005b9c:	08005bf5 	.word	0x08005bf5
 8005ba0:	08005be5 	.word	0x08005be5
 8005ba4:	08005bf5 	.word	0x08005bf5
 8005ba8:	08005bf5 	.word	0x08005bf5
 8005bac:	08005bf5 	.word	0x08005bf5
 8005bb0:	08005bf5 	.word	0x08005bf5
 8005bb4:	08005bf5 	.word	0x08005bf5
 8005bb8:	08005bf5 	.word	0x08005bf5
 8005bbc:	08005bf5 	.word	0x08005bf5
 8005bc0:	08005bed 	.word	0x08005bed
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bca:	e326      	b.n	800621a <UART_SetConfig+0x7ae>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd2:	e322      	b.n	800621a <UART_SetConfig+0x7ae>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	e31e      	b.n	800621a <UART_SetConfig+0x7ae>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be2:	e31a      	b.n	800621a <UART_SetConfig+0x7ae>
 8005be4:	2320      	movs	r3, #32
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e316      	b.n	800621a <UART_SetConfig+0x7ae>
 8005bec:	2340      	movs	r3, #64	; 0x40
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e312      	b.n	800621a <UART_SetConfig+0x7ae>
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e30e      	b.n	800621a <UART_SetConfig+0x7ae>
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a69      	ldr	r2, [pc, #420]	; (8005da8 <UART_SetConfig+0x33c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d130      	bne.n	8005c68 <UART_SetConfig+0x1fc>
 8005c06:	4b67      	ldr	r3, [pc, #412]	; (8005da4 <UART_SetConfig+0x338>)
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d826      	bhi.n	8005c60 <UART_SetConfig+0x1f4>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x1ac>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c31 	.word	0x08005c31
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	08005c41 	.word	0x08005c41
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c36:	e2f0      	b.n	800621a <UART_SetConfig+0x7ae>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3e:	e2ec      	b.n	800621a <UART_SetConfig+0x7ae>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c46:	e2e8      	b.n	800621a <UART_SetConfig+0x7ae>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4e:	e2e4      	b.n	800621a <UART_SetConfig+0x7ae>
 8005c50:	2320      	movs	r3, #32
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e2e0      	b.n	800621a <UART_SetConfig+0x7ae>
 8005c58:	2340      	movs	r3, #64	; 0x40
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e2dc      	b.n	800621a <UART_SetConfig+0x7ae>
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e2d8      	b.n	800621a <UART_SetConfig+0x7ae>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a4f      	ldr	r2, [pc, #316]	; (8005dac <UART_SetConfig+0x340>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d130      	bne.n	8005cd4 <UART_SetConfig+0x268>
 8005c72:	4b4c      	ldr	r3, [pc, #304]	; (8005da4 <UART_SetConfig+0x338>)
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	d826      	bhi.n	8005ccc <UART_SetConfig+0x260>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0x218>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005c9d 	.word	0x08005c9d
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	08005cad 	.word	0x08005cad
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cbd 	.word	0x08005cbd
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca2:	e2ba      	b.n	800621a <UART_SetConfig+0x7ae>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005caa:	e2b6      	b.n	800621a <UART_SetConfig+0x7ae>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb2:	e2b2      	b.n	800621a <UART_SetConfig+0x7ae>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e2ae      	b.n	800621a <UART_SetConfig+0x7ae>
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e2aa      	b.n	800621a <UART_SetConfig+0x7ae>
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e2a6      	b.n	800621a <UART_SetConfig+0x7ae>
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e2a2      	b.n	800621a <UART_SetConfig+0x7ae>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a35      	ldr	r2, [pc, #212]	; (8005db0 <UART_SetConfig+0x344>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d130      	bne.n	8005d40 <UART_SetConfig+0x2d4>
 8005cde:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <UART_SetConfig+0x338>)
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d826      	bhi.n	8005d38 <UART_SetConfig+0x2cc>
 8005cea:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x284>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d09 	.word	0x08005d09
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e284      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e280      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e27c      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e278      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e274      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e270      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e26c      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <UART_SetConfig+0x348>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d142      	bne.n	8005dd0 <UART_SetConfig+0x364>
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <UART_SetConfig+0x338>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d838      	bhi.n	8005dc8 <UART_SetConfig+0x35c>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0x2f0>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d75 	.word	0x08005d75
 8005d60:	08005d7d 	.word	0x08005d7d
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005db9 	.word	0x08005db9
 8005d70:	08005dc1 	.word	0x08005dc1
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e24e      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e24a      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d84:	2308      	movs	r3, #8
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e246      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e242      	b.n	800621a <UART_SetConfig+0x7ae>
 8005d94:	cfff69f3 	.word	0xcfff69f3
 8005d98:	58000c00 	.word	0x58000c00
 8005d9c:	11fff4ff 	.word	0x11fff4ff
 8005da0:	40011000 	.word	0x40011000
 8005da4:	58024400 	.word	0x58024400
 8005da8:	40004400 	.word	0x40004400
 8005dac:	40004800 	.word	0x40004800
 8005db0:	40004c00 	.word	0x40004c00
 8005db4:	40005000 	.word	0x40005000
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dbe:	e22c      	b.n	800621a <UART_SetConfig+0x7ae>
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc6:	e228      	b.n	800621a <UART_SetConfig+0x7ae>
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dce:	e224      	b.n	800621a <UART_SetConfig+0x7ae>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4ab1      	ldr	r2, [pc, #708]	; (800609c <UART_SetConfig+0x630>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d176      	bne.n	8005ec8 <UART_SetConfig+0x45c>
 8005dda:	4bb1      	ldr	r3, [pc, #708]	; (80060a0 <UART_SetConfig+0x634>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de2:	2b28      	cmp	r3, #40	; 0x28
 8005de4:	d86c      	bhi.n	8005ec0 <UART_SetConfig+0x454>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x380>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e91 	.word	0x08005e91
 8005df0:	08005ec1 	.word	0x08005ec1
 8005df4:	08005ec1 	.word	0x08005ec1
 8005df8:	08005ec1 	.word	0x08005ec1
 8005dfc:	08005ec1 	.word	0x08005ec1
 8005e00:	08005ec1 	.word	0x08005ec1
 8005e04:	08005ec1 	.word	0x08005ec1
 8005e08:	08005ec1 	.word	0x08005ec1
 8005e0c:	08005e99 	.word	0x08005e99
 8005e10:	08005ec1 	.word	0x08005ec1
 8005e14:	08005ec1 	.word	0x08005ec1
 8005e18:	08005ec1 	.word	0x08005ec1
 8005e1c:	08005ec1 	.word	0x08005ec1
 8005e20:	08005ec1 	.word	0x08005ec1
 8005e24:	08005ec1 	.word	0x08005ec1
 8005e28:	08005ec1 	.word	0x08005ec1
 8005e2c:	08005ea1 	.word	0x08005ea1
 8005e30:	08005ec1 	.word	0x08005ec1
 8005e34:	08005ec1 	.word	0x08005ec1
 8005e38:	08005ec1 	.word	0x08005ec1
 8005e3c:	08005ec1 	.word	0x08005ec1
 8005e40:	08005ec1 	.word	0x08005ec1
 8005e44:	08005ec1 	.word	0x08005ec1
 8005e48:	08005ec1 	.word	0x08005ec1
 8005e4c:	08005ea9 	.word	0x08005ea9
 8005e50:	08005ec1 	.word	0x08005ec1
 8005e54:	08005ec1 	.word	0x08005ec1
 8005e58:	08005ec1 	.word	0x08005ec1
 8005e5c:	08005ec1 	.word	0x08005ec1
 8005e60:	08005ec1 	.word	0x08005ec1
 8005e64:	08005ec1 	.word	0x08005ec1
 8005e68:	08005ec1 	.word	0x08005ec1
 8005e6c:	08005eb1 	.word	0x08005eb1
 8005e70:	08005ec1 	.word	0x08005ec1
 8005e74:	08005ec1 	.word	0x08005ec1
 8005e78:	08005ec1 	.word	0x08005ec1
 8005e7c:	08005ec1 	.word	0x08005ec1
 8005e80:	08005ec1 	.word	0x08005ec1
 8005e84:	08005ec1 	.word	0x08005ec1
 8005e88:	08005ec1 	.word	0x08005ec1
 8005e8c:	08005eb9 	.word	0x08005eb9
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e96:	e1c0      	b.n	800621a <UART_SetConfig+0x7ae>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9e:	e1bc      	b.n	800621a <UART_SetConfig+0x7ae>
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea6:	e1b8      	b.n	800621a <UART_SetConfig+0x7ae>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e1b4      	b.n	800621a <UART_SetConfig+0x7ae>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e1b0      	b.n	800621a <UART_SetConfig+0x7ae>
 8005eb8:	2340      	movs	r3, #64	; 0x40
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ebe:	e1ac      	b.n	800621a <UART_SetConfig+0x7ae>
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e1a8      	b.n	800621a <UART_SetConfig+0x7ae>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a75      	ldr	r2, [pc, #468]	; (80060a4 <UART_SetConfig+0x638>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d130      	bne.n	8005f34 <UART_SetConfig+0x4c8>
 8005ed2:	4b73      	ldr	r3, [pc, #460]	; (80060a0 <UART_SetConfig+0x634>)
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	d826      	bhi.n	8005f2c <UART_SetConfig+0x4c0>
 8005ede:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <UART_SetConfig+0x478>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005efd 	.word	0x08005efd
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	08005f0d 	.word	0x08005f0d
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e18a      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f04:	2304      	movs	r3, #4
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e186      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e182      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f14:	2310      	movs	r3, #16
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e17e      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e17a      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f24:	2340      	movs	r3, #64	; 0x40
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e176      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f2c:	2380      	movs	r3, #128	; 0x80
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e172      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5b      	ldr	r2, [pc, #364]	; (80060a8 <UART_SetConfig+0x63c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d130      	bne.n	8005fa0 <UART_SetConfig+0x534>
 8005f3e:	4b58      	ldr	r3, [pc, #352]	; (80060a0 <UART_SetConfig+0x634>)
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d826      	bhi.n	8005f98 <UART_SetConfig+0x52c>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <UART_SetConfig+0x4e4>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f69 	.word	0x08005f69
 8005f54:	08005f71 	.word	0x08005f71
 8005f58:	08005f79 	.word	0x08005f79
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e154      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f70:	2304      	movs	r3, #4
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e150      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e14c      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e148      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e144      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f90:	2340      	movs	r3, #64	; 0x40
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e140      	b.n	800621a <UART_SetConfig+0x7ae>
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e13c      	b.n	800621a <UART_SetConfig+0x7ae>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a41      	ldr	r2, [pc, #260]	; (80060ac <UART_SetConfig+0x640>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	f040 8082 	bne.w	80060b0 <UART_SetConfig+0x644>
 8005fac:	4b3c      	ldr	r3, [pc, #240]	; (80060a0 <UART_SetConfig+0x634>)
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb4:	2b28      	cmp	r3, #40	; 0x28
 8005fb6:	d86d      	bhi.n	8006094 <UART_SetConfig+0x628>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x554>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08006065 	.word	0x08006065
 8005fc4:	08006095 	.word	0x08006095
 8005fc8:	08006095 	.word	0x08006095
 8005fcc:	08006095 	.word	0x08006095
 8005fd0:	08006095 	.word	0x08006095
 8005fd4:	08006095 	.word	0x08006095
 8005fd8:	08006095 	.word	0x08006095
 8005fdc:	08006095 	.word	0x08006095
 8005fe0:	0800606d 	.word	0x0800606d
 8005fe4:	08006095 	.word	0x08006095
 8005fe8:	08006095 	.word	0x08006095
 8005fec:	08006095 	.word	0x08006095
 8005ff0:	08006095 	.word	0x08006095
 8005ff4:	08006095 	.word	0x08006095
 8005ff8:	08006095 	.word	0x08006095
 8005ffc:	08006095 	.word	0x08006095
 8006000:	08006075 	.word	0x08006075
 8006004:	08006095 	.word	0x08006095
 8006008:	08006095 	.word	0x08006095
 800600c:	08006095 	.word	0x08006095
 8006010:	08006095 	.word	0x08006095
 8006014:	08006095 	.word	0x08006095
 8006018:	08006095 	.word	0x08006095
 800601c:	08006095 	.word	0x08006095
 8006020:	0800607d 	.word	0x0800607d
 8006024:	08006095 	.word	0x08006095
 8006028:	08006095 	.word	0x08006095
 800602c:	08006095 	.word	0x08006095
 8006030:	08006095 	.word	0x08006095
 8006034:	08006095 	.word	0x08006095
 8006038:	08006095 	.word	0x08006095
 800603c:	08006095 	.word	0x08006095
 8006040:	08006085 	.word	0x08006085
 8006044:	08006095 	.word	0x08006095
 8006048:	08006095 	.word	0x08006095
 800604c:	08006095 	.word	0x08006095
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	08006095 	.word	0x08006095
 800605c:	08006095 	.word	0x08006095
 8006060:	0800608d 	.word	0x0800608d
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606a:	e0d6      	b.n	800621a <UART_SetConfig+0x7ae>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006072:	e0d2      	b.n	800621a <UART_SetConfig+0x7ae>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607a:	e0ce      	b.n	800621a <UART_SetConfig+0x7ae>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e0ca      	b.n	800621a <UART_SetConfig+0x7ae>
 8006084:	2320      	movs	r3, #32
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e0c6      	b.n	800621a <UART_SetConfig+0x7ae>
 800608c:	2340      	movs	r3, #64	; 0x40
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e0c2      	b.n	800621a <UART_SetConfig+0x7ae>
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e0be      	b.n	800621a <UART_SetConfig+0x7ae>
 800609c:	40011400 	.word	0x40011400
 80060a0:	58024400 	.word	0x58024400
 80060a4:	40007800 	.word	0x40007800
 80060a8:	40007c00 	.word	0x40007c00
 80060ac:	40011800 	.word	0x40011800
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4aad      	ldr	r2, [pc, #692]	; (800636c <UART_SetConfig+0x900>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d176      	bne.n	80061a8 <UART_SetConfig+0x73c>
 80060ba:	4bad      	ldr	r3, [pc, #692]	; (8006370 <UART_SetConfig+0x904>)
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060c2:	2b28      	cmp	r3, #40	; 0x28
 80060c4:	d86c      	bhi.n	80061a0 <UART_SetConfig+0x734>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <UART_SetConfig+0x660>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	08006171 	.word	0x08006171
 80060d0:	080061a1 	.word	0x080061a1
 80060d4:	080061a1 	.word	0x080061a1
 80060d8:	080061a1 	.word	0x080061a1
 80060dc:	080061a1 	.word	0x080061a1
 80060e0:	080061a1 	.word	0x080061a1
 80060e4:	080061a1 	.word	0x080061a1
 80060e8:	080061a1 	.word	0x080061a1
 80060ec:	08006179 	.word	0x08006179
 80060f0:	080061a1 	.word	0x080061a1
 80060f4:	080061a1 	.word	0x080061a1
 80060f8:	080061a1 	.word	0x080061a1
 80060fc:	080061a1 	.word	0x080061a1
 8006100:	080061a1 	.word	0x080061a1
 8006104:	080061a1 	.word	0x080061a1
 8006108:	080061a1 	.word	0x080061a1
 800610c:	08006181 	.word	0x08006181
 8006110:	080061a1 	.word	0x080061a1
 8006114:	080061a1 	.word	0x080061a1
 8006118:	080061a1 	.word	0x080061a1
 800611c:	080061a1 	.word	0x080061a1
 8006120:	080061a1 	.word	0x080061a1
 8006124:	080061a1 	.word	0x080061a1
 8006128:	080061a1 	.word	0x080061a1
 800612c:	08006189 	.word	0x08006189
 8006130:	080061a1 	.word	0x080061a1
 8006134:	080061a1 	.word	0x080061a1
 8006138:	080061a1 	.word	0x080061a1
 800613c:	080061a1 	.word	0x080061a1
 8006140:	080061a1 	.word	0x080061a1
 8006144:	080061a1 	.word	0x080061a1
 8006148:	080061a1 	.word	0x080061a1
 800614c:	08006191 	.word	0x08006191
 8006150:	080061a1 	.word	0x080061a1
 8006154:	080061a1 	.word	0x080061a1
 8006158:	080061a1 	.word	0x080061a1
 800615c:	080061a1 	.word	0x080061a1
 8006160:	080061a1 	.word	0x080061a1
 8006164:	080061a1 	.word	0x080061a1
 8006168:	080061a1 	.word	0x080061a1
 800616c:	08006199 	.word	0x08006199
 8006170:	2301      	movs	r3, #1
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e050      	b.n	800621a <UART_SetConfig+0x7ae>
 8006178:	2304      	movs	r3, #4
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e04c      	b.n	800621a <UART_SetConfig+0x7ae>
 8006180:	2308      	movs	r3, #8
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006186:	e048      	b.n	800621a <UART_SetConfig+0x7ae>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e044      	b.n	800621a <UART_SetConfig+0x7ae>
 8006190:	2320      	movs	r3, #32
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e040      	b.n	800621a <UART_SetConfig+0x7ae>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e03c      	b.n	800621a <UART_SetConfig+0x7ae>
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e038      	b.n	800621a <UART_SetConfig+0x7ae>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a71      	ldr	r2, [pc, #452]	; (8006374 <UART_SetConfig+0x908>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d130      	bne.n	8006214 <UART_SetConfig+0x7a8>
 80061b2:	4b6f      	ldr	r3, [pc, #444]	; (8006370 <UART_SetConfig+0x904>)
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d826      	bhi.n	800620c <UART_SetConfig+0x7a0>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <UART_SetConfig+0x758>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	080061ed 	.word	0x080061ed
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	2302      	movs	r3, #2
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e01a      	b.n	800621a <UART_SetConfig+0x7ae>
 80061e4:	2304      	movs	r3, #4
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e016      	b.n	800621a <UART_SetConfig+0x7ae>
 80061ec:	2308      	movs	r3, #8
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e012      	b.n	800621a <UART_SetConfig+0x7ae>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e00e      	b.n	800621a <UART_SetConfig+0x7ae>
 80061fc:	2320      	movs	r3, #32
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e00a      	b.n	800621a <UART_SetConfig+0x7ae>
 8006204:	2340      	movs	r3, #64	; 0x40
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e006      	b.n	800621a <UART_SetConfig+0x7ae>
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e002      	b.n	800621a <UART_SetConfig+0x7ae>
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a55      	ldr	r2, [pc, #340]	; (8006374 <UART_SetConfig+0x908>)
 8006220:	4293      	cmp	r3, r2
 8006222:	f040 80f8 	bne.w	8006416 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006226:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800622a:	2b20      	cmp	r3, #32
 800622c:	dc46      	bgt.n	80062bc <UART_SetConfig+0x850>
 800622e:	2b02      	cmp	r3, #2
 8006230:	db75      	blt.n	800631e <UART_SetConfig+0x8b2>
 8006232:	3b02      	subs	r3, #2
 8006234:	2b1e      	cmp	r3, #30
 8006236:	d872      	bhi.n	800631e <UART_SetConfig+0x8b2>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x7d4>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	080062c3 	.word	0x080062c3
 8006244:	0800631f 	.word	0x0800631f
 8006248:	080062cb 	.word	0x080062cb
 800624c:	0800631f 	.word	0x0800631f
 8006250:	0800631f 	.word	0x0800631f
 8006254:	0800631f 	.word	0x0800631f
 8006258:	080062db 	.word	0x080062db
 800625c:	0800631f 	.word	0x0800631f
 8006260:	0800631f 	.word	0x0800631f
 8006264:	0800631f 	.word	0x0800631f
 8006268:	0800631f 	.word	0x0800631f
 800626c:	0800631f 	.word	0x0800631f
 8006270:	0800631f 	.word	0x0800631f
 8006274:	0800631f 	.word	0x0800631f
 8006278:	080062eb 	.word	0x080062eb
 800627c:	0800631f 	.word	0x0800631f
 8006280:	0800631f 	.word	0x0800631f
 8006284:	0800631f 	.word	0x0800631f
 8006288:	0800631f 	.word	0x0800631f
 800628c:	0800631f 	.word	0x0800631f
 8006290:	0800631f 	.word	0x0800631f
 8006294:	0800631f 	.word	0x0800631f
 8006298:	0800631f 	.word	0x0800631f
 800629c:	0800631f 	.word	0x0800631f
 80062a0:	0800631f 	.word	0x0800631f
 80062a4:	0800631f 	.word	0x0800631f
 80062a8:	0800631f 	.word	0x0800631f
 80062ac:	0800631f 	.word	0x0800631f
 80062b0:	0800631f 	.word	0x0800631f
 80062b4:	0800631f 	.word	0x0800631f
 80062b8:	08006311 	.word	0x08006311
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d02a      	beq.n	8006316 <UART_SetConfig+0x8aa>
 80062c0:	e02d      	b.n	800631e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062c2:	f7fe faa1 	bl	8004808 <HAL_RCCEx_GetD3PCLK1Freq>
 80062c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062c8:	e02f      	b.n	800632a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe fab0 	bl	8004834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062d8:	e027      	b.n	800632a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062da:	f107 0318 	add.w	r3, r7, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fbfc 	bl	8004adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062e8:	e01f      	b.n	800632a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ea:	4b21      	ldr	r3, [pc, #132]	; (8006370 <UART_SetConfig+0x904>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062f6:	4b1e      	ldr	r3, [pc, #120]	; (8006370 <UART_SetConfig+0x904>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	08db      	lsrs	r3, r3, #3
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <UART_SetConfig+0x90c>)
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006308:	e00f      	b.n	800632a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <UART_SetConfig+0x90c>)
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800630e:	e00c      	b.n	800632a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <UART_SetConfig+0x910>)
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006314:	e009      	b.n	800632a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800631c:	e005      	b.n	800632a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800632a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 81ee 	beq.w	800670e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <UART_SetConfig+0x914>)
 8006338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633c:	461a      	mov	r2, r3
 800633e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006340:	fbb3 f3f2 	udiv	r3, r3, r2
 8006344:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006352:	429a      	cmp	r2, r3
 8006354:	d305      	bcc.n	8006362 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800635c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635e:	429a      	cmp	r2, r3
 8006360:	d910      	bls.n	8006384 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006368:	e1d1      	b.n	800670e <UART_SetConfig+0xca2>
 800636a:	bf00      	nop
 800636c:	40011c00 	.word	0x40011c00
 8006370:	58024400 	.word	0x58024400
 8006374:	58000c00 	.word	0x58000c00
 8006378:	03d09000 	.word	0x03d09000
 800637c:	003d0900 	.word	0x003d0900
 8006380:	08007108 	.word	0x08007108
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006386:	2200      	movs	r2, #0
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	60fa      	str	r2, [r7, #12]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	4ac0      	ldr	r2, [pc, #768]	; (8006694 <UART_SetConfig+0xc28>)
 8006392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006396:	b29b      	uxth	r3, r3
 8006398:	2200      	movs	r2, #0
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063a6:	f7f9 ffa1 	bl	80002ec <__aeabi_uldivmod>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	020b      	lsls	r3, r1, #8
 80063bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063c0:	0202      	lsls	r2, r0, #8
 80063c2:	6979      	ldr	r1, [r7, #20]
 80063c4:	6849      	ldr	r1, [r1, #4]
 80063c6:	0849      	lsrs	r1, r1, #1
 80063c8:	2000      	movs	r0, #0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4605      	mov	r5, r0
 80063ce:	eb12 0804 	adds.w	r8, r2, r4
 80063d2:	eb43 0905 	adc.w	r9, r3, r5
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	469a      	mov	sl, r3
 80063de:	4693      	mov	fp, r2
 80063e0:	4652      	mov	r2, sl
 80063e2:	465b      	mov	r3, fp
 80063e4:	4640      	mov	r0, r8
 80063e6:	4649      	mov	r1, r9
 80063e8:	f7f9 ff80 	bl	80002ec <__aeabi_uldivmod>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4613      	mov	r3, r2
 80063f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fa:	d308      	bcc.n	800640e <UART_SetConfig+0x9a2>
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006402:	d204      	bcs.n	800640e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640a:	60da      	str	r2, [r3, #12]
 800640c:	e17f      	b.n	800670e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006414:	e17b      	b.n	800670e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800641e:	f040 80bd 	bne.w	800659c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006422:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006426:	2b20      	cmp	r3, #32
 8006428:	dc48      	bgt.n	80064bc <UART_SetConfig+0xa50>
 800642a:	2b00      	cmp	r3, #0
 800642c:	db7b      	blt.n	8006526 <UART_SetConfig+0xaba>
 800642e:	2b20      	cmp	r3, #32
 8006430:	d879      	bhi.n	8006526 <UART_SetConfig+0xaba>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0x9cc>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	080064c3 	.word	0x080064c3
 800643c:	080064cb 	.word	0x080064cb
 8006440:	08006527 	.word	0x08006527
 8006444:	08006527 	.word	0x08006527
 8006448:	080064d3 	.word	0x080064d3
 800644c:	08006527 	.word	0x08006527
 8006450:	08006527 	.word	0x08006527
 8006454:	08006527 	.word	0x08006527
 8006458:	080064e3 	.word	0x080064e3
 800645c:	08006527 	.word	0x08006527
 8006460:	08006527 	.word	0x08006527
 8006464:	08006527 	.word	0x08006527
 8006468:	08006527 	.word	0x08006527
 800646c:	08006527 	.word	0x08006527
 8006470:	08006527 	.word	0x08006527
 8006474:	08006527 	.word	0x08006527
 8006478:	080064f3 	.word	0x080064f3
 800647c:	08006527 	.word	0x08006527
 8006480:	08006527 	.word	0x08006527
 8006484:	08006527 	.word	0x08006527
 8006488:	08006527 	.word	0x08006527
 800648c:	08006527 	.word	0x08006527
 8006490:	08006527 	.word	0x08006527
 8006494:	08006527 	.word	0x08006527
 8006498:	08006527 	.word	0x08006527
 800649c:	08006527 	.word	0x08006527
 80064a0:	08006527 	.word	0x08006527
 80064a4:	08006527 	.word	0x08006527
 80064a8:	08006527 	.word	0x08006527
 80064ac:	08006527 	.word	0x08006527
 80064b0:	08006527 	.word	0x08006527
 80064b4:	08006527 	.word	0x08006527
 80064b8:	08006519 	.word	0x08006519
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d02e      	beq.n	800651e <UART_SetConfig+0xab2>
 80064c0:	e031      	b.n	8006526 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c2:	f7fc ffb7 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 80064c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064c8:	e033      	b.n	8006532 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ca:	f7fc ffc9 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 80064ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064d0:	e02f      	b.n	8006532 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe f9ac 	bl	8004834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e0:	e027      	b.n	8006532 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e2:	f107 0318 	add.w	r3, r7, #24
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe faf8 	bl	8004adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f0:	e01f      	b.n	8006532 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f2:	4b69      	ldr	r3, [pc, #420]	; (8006698 <UART_SetConfig+0xc2c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064fe:	4b66      	ldr	r3, [pc, #408]	; (8006698 <UART_SetConfig+0xc2c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	08db      	lsrs	r3, r3, #3
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	4a64      	ldr	r2, [pc, #400]	; (800669c <UART_SetConfig+0xc30>)
 800650a:	fa22 f303 	lsr.w	r3, r2, r3
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006510:	e00f      	b.n	8006532 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006512:	4b62      	ldr	r3, [pc, #392]	; (800669c <UART_SetConfig+0xc30>)
 8006514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006516:	e00c      	b.n	8006532 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006518:	4b61      	ldr	r3, [pc, #388]	; (80066a0 <UART_SetConfig+0xc34>)
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800651c:	e009      	b.n	8006532 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006524:	e005      	b.n	8006532 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80ea 	beq.w	800670e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	4a55      	ldr	r2, [pc, #340]	; (8006694 <UART_SetConfig+0xc28>)
 8006540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006544:	461a      	mov	r2, r3
 8006546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006548:	fbb3 f3f2 	udiv	r3, r3, r2
 800654c:	005a      	lsls	r2, r3, #1
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	441a      	add	r2, r3
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	2b0f      	cmp	r3, #15
 8006564:	d916      	bls.n	8006594 <UART_SetConfig+0xb28>
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656c:	d212      	bcs.n	8006594 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	b29b      	uxth	r3, r3
 8006572:	f023 030f 	bic.w	r3, r3, #15
 8006576:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	b29b      	uxth	r3, r3
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	b29a      	uxth	r2, r3
 8006584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006586:	4313      	orrs	r3, r2
 8006588:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006590:	60da      	str	r2, [r3, #12]
 8006592:	e0bc      	b.n	800670e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800659a:	e0b8      	b.n	800670e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800659c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	dc4b      	bgt.n	800663c <UART_SetConfig+0xbd0>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f2c0 8087 	blt.w	80066b8 <UART_SetConfig+0xc4c>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	f200 8084 	bhi.w	80066b8 <UART_SetConfig+0xc4c>
 80065b0:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <UART_SetConfig+0xb4c>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	08006643 	.word	0x08006643
 80065bc:	0800664b 	.word	0x0800664b
 80065c0:	080066b9 	.word	0x080066b9
 80065c4:	080066b9 	.word	0x080066b9
 80065c8:	08006653 	.word	0x08006653
 80065cc:	080066b9 	.word	0x080066b9
 80065d0:	080066b9 	.word	0x080066b9
 80065d4:	080066b9 	.word	0x080066b9
 80065d8:	08006663 	.word	0x08006663
 80065dc:	080066b9 	.word	0x080066b9
 80065e0:	080066b9 	.word	0x080066b9
 80065e4:	080066b9 	.word	0x080066b9
 80065e8:	080066b9 	.word	0x080066b9
 80065ec:	080066b9 	.word	0x080066b9
 80065f0:	080066b9 	.word	0x080066b9
 80065f4:	080066b9 	.word	0x080066b9
 80065f8:	08006673 	.word	0x08006673
 80065fc:	080066b9 	.word	0x080066b9
 8006600:	080066b9 	.word	0x080066b9
 8006604:	080066b9 	.word	0x080066b9
 8006608:	080066b9 	.word	0x080066b9
 800660c:	080066b9 	.word	0x080066b9
 8006610:	080066b9 	.word	0x080066b9
 8006614:	080066b9 	.word	0x080066b9
 8006618:	080066b9 	.word	0x080066b9
 800661c:	080066b9 	.word	0x080066b9
 8006620:	080066b9 	.word	0x080066b9
 8006624:	080066b9 	.word	0x080066b9
 8006628:	080066b9 	.word	0x080066b9
 800662c:	080066b9 	.word	0x080066b9
 8006630:	080066b9 	.word	0x080066b9
 8006634:	080066b9 	.word	0x080066b9
 8006638:	080066ab 	.word	0x080066ab
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d037      	beq.n	80066b0 <UART_SetConfig+0xc44>
 8006640:	e03a      	b.n	80066b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006642:	f7fc fef7 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8006646:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006648:	e03c      	b.n	80066c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800664a:	f7fc ff09 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 800664e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006650:	e038      	b.n	80066c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe f8ec 	bl	8004834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006660:	e030      	b.n	80066c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006662:	f107 0318 	add.w	r3, r7, #24
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fa38 	bl	8004adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006670:	e028      	b.n	80066c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <UART_SetConfig+0xc2c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d012      	beq.n	80066a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <UART_SetConfig+0xc2c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	4a04      	ldr	r2, [pc, #16]	; (800669c <UART_SetConfig+0xc30>)
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006690:	e018      	b.n	80066c4 <UART_SetConfig+0xc58>
 8006692:	bf00      	nop
 8006694:	08007108 	.word	0x08007108
 8006698:	58024400 	.word	0x58024400
 800669c:	03d09000 	.word	0x03d09000
 80066a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80066a4:	4b24      	ldr	r3, [pc, #144]	; (8006738 <UART_SetConfig+0xccc>)
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a8:	e00c      	b.n	80066c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <UART_SetConfig+0xcd0>)
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ae:	e009      	b.n	80066c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066b6:	e005      	b.n	80066c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80066c2:	bf00      	nop
    }

    if (pclk != 0U)
 80066c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d021      	beq.n	800670e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <UART_SetConfig+0xcd4>)
 80066d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	441a      	add	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	2b0f      	cmp	r3, #15
 80066f2:	d909      	bls.n	8006708 <UART_SetConfig+0xc9c>
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fa:	d205      	bcs.n	8006708 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	b29a      	uxth	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	e002      	b.n	800670e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2201      	movs	r2, #1
 8006712:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2201      	movs	r2, #1
 800671a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2200      	movs	r2, #0
 8006722:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800672a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800672e:	4618      	mov	r0, r3
 8006730:	3748      	adds	r7, #72	; 0x48
 8006732:	46bd      	mov	sp, r7
 8006734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006738:	03d09000 	.word	0x03d09000
 800673c:	003d0900 	.word	0x003d0900
 8006740:	08007108 	.word	0x08007108

08006744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01a      	beq.n	800685a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006842:	d10a      	bne.n	800685a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b098      	sub	sp, #96	; 0x60
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006898:	f7fa fd72 	bl	8001380 <HAL_GetTick>
 800689c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d12f      	bne.n	800690c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f88e 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d022      	beq.n	800690c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068da:	653b      	str	r3, [r7, #80]	; 0x50
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	647b      	str	r3, [r7, #68]	; 0x44
 80068e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e063      	b.n	80069d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b04      	cmp	r3, #4
 8006918:	d149      	bne.n	80069ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006922:	2200      	movs	r2, #0
 8006924:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f857 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d03c      	beq.n	80069ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006952:	633b      	str	r3, [r7, #48]	; 0x30
 8006954:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e6      	bne.n	8006934 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	60fb      	str	r3, [r7, #12]
   return(result);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	64bb      	str	r3, [r7, #72]	; 0x48
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006986:	61fa      	str	r2, [r7, #28]
 8006988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	69b9      	ldr	r1, [r7, #24]
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	617b      	str	r3, [r7, #20]
   return(result);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e5      	bne.n	8006966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e012      	b.n	80069d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3758      	adds	r7, #88	; 0x58
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ec:	e049      	b.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d045      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fa fcc3 	bl	8001380 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e048      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d031      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d110      	bne.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2208      	movs	r2, #8
 8006a32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f839 	bl	8006aac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e029      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	d111      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f81f 	bl	8006aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e00f      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	bf0c      	ite	eq
 8006a92:	2301      	moveq	r3, #1
 8006a94:	2300      	movne	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d0a6      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b095      	sub	sp, #84	; 0x54
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3308      	adds	r3, #8
 8006aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <UART_EndRxTransfer+0xc8>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e5      	bne.n	8006ae6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d118      	bne.n	8006b54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f023 0310 	bic.w	r3, r3, #16
 8006b36:	647b      	str	r3, [r7, #68]	; 0x44
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b68:	bf00      	nop
 8006b6a:	3754      	adds	r7, #84	; 0x54
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	effffffe 	.word	0xeffffffe

08006b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7fe ff52 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6979      	ldr	r1, [r7, #20]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e6      	bne.n	8006bac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fe ff1d 	bl	8005a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf2:	bf00      	nop
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e027      	b.n	8006c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2224      	movs	r2, #36	; 0x24
 8006c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0201 	bic.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e02d      	b.n	8006d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2224      	movs	r2, #36	; 0x24
 8006ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0201 	bic.w	r2, r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f84f 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e02d      	b.n	8006d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2224      	movs	r2, #36	; 0x24
 8006d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0201 	bic.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f811 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dc0:	e031      	b.n	8006e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	0e5b      	lsrs	r3, r3, #25
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	0f5b      	lsrs	r3, r3, #29
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	7b3a      	ldrb	r2, [r7, #12]
 8006dee:	4911      	ldr	r1, [pc, #68]	; (8006e34 <UARTEx_SetNbDataToProcess+0x94>)
 8006df0:	5c8a      	ldrb	r2, [r1, r2]
 8006df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006df6:	7b3a      	ldrb	r2, [r7, #12]
 8006df8:	490f      	ldr	r1, [pc, #60]	; (8006e38 <UARTEx_SetNbDataToProcess+0x98>)
 8006dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	7b7a      	ldrb	r2, [r7, #13]
 8006e0c:	4909      	ldr	r1, [pc, #36]	; (8006e34 <UARTEx_SetNbDataToProcess+0x94>)
 8006e0e:	5c8a      	ldrb	r2, [r1, r2]
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e14:	7b7a      	ldrb	r2, [r7, #13]
 8006e16:	4908      	ldr	r1, [pc, #32]	; (8006e38 <UARTEx_SetNbDataToProcess+0x98>)
 8006e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	08007120 	.word	0x08007120
 8006e38:	08007128 	.word	0x08007128

08006e3c <memset>:
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d100      	bne.n	8006e46 <memset+0xa>
 8006e44:	4770      	bx	lr
 8006e46:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4a:	e7f9      	b.n	8006e40 <memset+0x4>

08006e4c <__libc_init_array>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4d0d      	ldr	r5, [pc, #52]	; (8006e84 <__libc_init_array+0x38>)
 8006e50:	4c0d      	ldr	r4, [pc, #52]	; (8006e88 <__libc_init_array+0x3c>)
 8006e52:	1b64      	subs	r4, r4, r5
 8006e54:	10a4      	asrs	r4, r4, #2
 8006e56:	2600      	movs	r6, #0
 8006e58:	42a6      	cmp	r6, r4
 8006e5a:	d109      	bne.n	8006e70 <__libc_init_array+0x24>
 8006e5c:	4d0b      	ldr	r5, [pc, #44]	; (8006e8c <__libc_init_array+0x40>)
 8006e5e:	4c0c      	ldr	r4, [pc, #48]	; (8006e90 <__libc_init_array+0x44>)
 8006e60:	f000 f826 	bl	8006eb0 <_init>
 8006e64:	1b64      	subs	r4, r4, r5
 8006e66:	10a4      	asrs	r4, r4, #2
 8006e68:	2600      	movs	r6, #0
 8006e6a:	42a6      	cmp	r6, r4
 8006e6c:	d105      	bne.n	8006e7a <__libc_init_array+0x2e>
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e74:	4798      	blx	r3
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7ee      	b.n	8006e58 <__libc_init_array+0xc>
 8006e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7e:	4798      	blx	r3
 8006e80:	3601      	adds	r6, #1
 8006e82:	e7f2      	b.n	8006e6a <__libc_init_array+0x1e>
 8006e84:	08007138 	.word	0x08007138
 8006e88:	08007138 	.word	0x08007138
 8006e8c:	08007138 	.word	0x08007138
 8006e90:	0800713c 	.word	0x0800713c

08006e94 <memcpy>:
 8006e94:	440a      	add	r2, r1
 8006e96:	4291      	cmp	r1, r2
 8006e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e9c:	d100      	bne.n	8006ea0 <memcpy+0xc>
 8006e9e:	4770      	bx	lr
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	d1f9      	bne.n	8006ea2 <memcpy+0xe>
 8006eae:	bd10      	pop	{r4, pc}

08006eb0 <_init>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	bf00      	nop
 8006eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb6:	bc08      	pop	{r3}
 8006eb8:	469e      	mov	lr, r3
 8006eba:	4770      	bx	lr

08006ebc <_fini>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	bf00      	nop
 8006ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec2:	bc08      	pop	{r3}
 8006ec4:	469e      	mov	lr, r3
 8006ec6:	4770      	bx	lr
