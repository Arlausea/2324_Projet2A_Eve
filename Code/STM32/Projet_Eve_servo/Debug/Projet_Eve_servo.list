
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ec  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  24000010  08005858  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  08005858  00020158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fd26  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000202e  00000000  00000000  0002fda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ac0  00000000  00000000  00031dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000837  00000000  00000000  00032898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f622  00000000  00000000  000330cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001098f  00000000  00000000  000626f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00132ae1  00000000  00000000  00073080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002b50  00000000  00000000  001a5b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001a86b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005580 	.word	0x08005580

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005580 	.word	0x08005580

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005f8:	6019      	str	r1, [r3, #0]
 80005fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005fe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000608:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800060c:	4602      	mov	r2, r0
 800060e:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000610:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000614:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000618:	4a28      	ldr	r2, [pc, #160]	; (80006bc <dyn2_crc+0xd4>)
 800061a:	4618      	mov	r0, r3
 800061c:	4611      	mov	r1, r2
 800061e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000622:	461a      	mov	r2, r3
 8000624:	f004 ff9e 	bl	8005564 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 8000628:	2300      	movs	r3, #0
 800062a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800062e:	e031      	b.n	8000694 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000630:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000634:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	b29a      	uxth	r2, r3
 800063e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000642:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8000646:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800064a:	6809      	ldr	r1, [r1, #0]
 800064c:	440b      	add	r3, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b29b      	uxth	r3, r3
 8000652:	4053      	eors	r3, r2
 8000654:	b29b      	uxth	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800065c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000660:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b21a      	sxth	r2, r3
 800066a:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 800066e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000672:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000676:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800067a:	b21b      	sxth	r3, r3
 800067c:	4053      	eors	r3, r2
 800067e:	b21a      	sxth	r2, r3
 8000680:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000684:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000688:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800068a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 800068e:	3301      	adds	r3, #1
 8000690:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000694:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000698:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800069c:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 80006a0:	6812      	ldr	r2, [r2, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d8c4      	bhi.n	8000630 <dyn2_crc+0x48>
	}
	return crc_accum;
 80006a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006aa:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006ae:	881b      	ldrh	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08005598 	.word	0x08005598

080006c0 <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	3b02      	subs	r3, #2
 80006d0:	461a      	mov	r2, r3
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ff87 	bl	80005e8 <dyn2_crc>
 80006da:	4603      	mov	r3, r0
 80006dc:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 80006de:	89fb      	ldrh	r3, [r7, #14]
 80006e0:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	3b02      	subs	r3, #2
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	7b7a      	ldrb	r2, [r7, #13]
 80006f4:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	7b3a      	ldrb	r2, [r7, #12]
 8000700:	701a      	strb	r2, [r3, #0]

	return instruction;
 8000702:	687b      	ldr	r3, [r7, #4]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000718:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_GPIO_Init+0x6c>)
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000742:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	4a08      	ldr	r2, [pc, #32]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_GPIO_Init+0x6c>)
 8000760:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	58024400 	.word	0x58024400

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000782:	f000 fb11 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000786:	f000 f849 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f7ff ffbf 	bl	800070c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800078e:	f000 f9c7 	bl	8000b20 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000792:	f000 f979 	bl	8000a88 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Dynamixel_PING[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x03, 0x00,/*type instruction, ici Ping*/0x01
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <main+0x94>)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	ca07      	ldmia	r2, {r0, r1, r2}
 800079c:	c303      	stmia	r3!, {r0, r1}
 800079e:	801a      	strh	r2, [r3, #0]
  			/* calcul of CRC after */,0x00,0x00};
  uint16_t size = sizeof(Dynamixel_PING)/sizeof(Dynamixel_PING[0]);
 80007a0:	230a      	movs	r3, #10
 80007a2:	82fb      	strh	r3, [r7, #22]

  uint8_t* Dynamixel_PING_CRC = dyn2_append_crc(Dynamixel_PING,size);
 80007a4:	8afa      	ldrh	r2, [r7, #22]
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff88 	bl	80006c0 <dyn2_append_crc>
 80007b0:	6138      	str	r0, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  HAL_Delay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b6:	f000 fb89 	bl	8000ecc <HAL_Delay>
	  //Acitvate Transmit and disiable Receive, the message transmited need to be between the 2 blocks
	  huart3.Instance->CR1 |= USART_CR1_TE;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <main+0x98>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <main+0x98>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f042 0208 	orr.w	r2, r2, #8
 80007c8:	601a      	str	r2, [r3, #0]
	  huart3.Instance->CR1 &= ~USART_CR1_RE;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <main+0x98>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <main+0x98>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f022 0204 	bic.w	r2, r2, #4
 80007d8:	601a      	str	r2, [r3, #0]

	  //dyn2_debug_sendArrayAsString(Dynamixel_PING_CRC, size);
	  //dyn2_send(Dynamixel_PING_CRC, size);
	  HAL_UART_Transmit(&huart3,"ABCD\n",strlen("ABCD\n"),100);
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	2205      	movs	r2, #5
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <main+0x9c>)
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <main+0x98>)
 80007e2:	f003 fc7b 	bl	80040dc <HAL_UART_Transmit>
	  huart3.Instance->CR1 &= ~USART_CR1_TE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <main+0x98>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <main+0x98>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f022 0208 	bic.w	r2, r2, #8
 80007f4:	601a      	str	r2, [r3, #0]
	  huart3.Instance->CR1 |= USART_CR1_RE;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <main+0x98>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <main+0x98>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f042 0204 	orr.w	r2, r2, #4
 8000804:	601a      	str	r2, [r3, #0]



	  HAL_Delay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080a:	f000 fb5f 	bl	8000ecc <HAL_Delay>
	  HAL_Delay(1000);
 800080e:	e7d0      	b.n	80007b2 <main+0x36>
 8000810:	080057f4 	.word	0x080057f4
 8000814:	240000c0 	.word	0x240000c0
 8000818:	080057ec 	.word	0x080057ec

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09c      	sub	sp, #112	; 0x70
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	224c      	movs	r2, #76	; 0x4c
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fe6e 	bl	800550c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2220      	movs	r2, #32
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fe68 	bl	800550c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800083c:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <SystemClock_Config+0xe0>)
 800083e:	f04f 32ff 	mov.w	r2, #4294967295
 8000842:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000846:	2004      	movs	r0, #4
 8000848:	f000 fdf8 	bl	800143c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <SystemClock_Config+0xe4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a2a      	ldr	r2, [pc, #168]	; (8000900 <SystemClock_Config+0xe4>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <SystemClock_Config+0xe4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000868:	bf00      	nop
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <SystemClock_Config+0xe4>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000876:	d1f8      	bne.n	800086a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	2302      	movs	r3, #2
 8000888:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800088e:	2318      	movs	r3, #24
 8000890:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000896:	2304      	movs	r3, #4
 8000898:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800089e:	230c      	movs	r3, #12
 80008a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fe1e 	bl	80014f0 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ba:	f000 f823 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	233f      	movs	r3, #63	; 0x3f
 80008c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c2:	2303      	movs	r3, #3
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2102      	movs	r1, #2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fa36 	bl	8001d54 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80008ee:	f000 f809 	bl	8000904 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3770      	adds	r7, #112	; 0x70
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	58024400 	.word	0x58024400
 8000900:	58024800 	.word	0x58024800

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_MspInit+0x30>)
 8000918:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800091c:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x30>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x30>)
 8000928:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58024400 	.word	0x58024400

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 fa7c 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <SystemInit+0xd0>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a31      	ldr	r2, [pc, #196]	; (8000a68 <SystemInit+0xd0>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <SystemInit+0xd4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 030f 	and.w	r3, r3, #15
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d807      	bhi.n	80009c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <SystemInit+0xd4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f023 030f 	bic.w	r3, r3, #15
 80009c0:	4a2a      	ldr	r2, [pc, #168]	; (8000a6c <SystemInit+0xd4>)
 80009c2:	f043 0303 	orr.w	r3, r3, #3
 80009c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <SystemInit+0xd8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a28      	ldr	r2, [pc, #160]	; (8000a70 <SystemInit+0xd8>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <SystemInit+0xd8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <SystemInit+0xd8>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4924      	ldr	r1, [pc, #144]	; (8000a70 <SystemInit+0xd8>)
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <SystemInit+0xdc>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <SystemInit+0xd4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 030c 	and.w	r3, r3, #12
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d007      	beq.n	8000a02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <SystemInit+0xd4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f023 030f 	bic.w	r3, r3, #15
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <SystemInit+0xd4>)
 80009fc:	f043 0303 	orr.w	r3, r3, #3
 8000a00:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <SystemInit+0xd8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <SystemInit+0xd8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <SystemInit+0xd8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <SystemInit+0xd8>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <SystemInit+0xe0>)
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <SystemInit+0xd8>)
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <SystemInit+0xe4>)
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <SystemInit+0xd8>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <SystemInit+0xe8>)
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SystemInit+0xd8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <SystemInit+0xd8>)
 8000a2e:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <SystemInit+0xe8>)
 8000a30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0xd8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <SystemInit+0xd8>)
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <SystemInit+0xe8>)
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <SystemInit+0xd8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <SystemInit+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <SystemInit+0xd8>)
 8000a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <SystemInit+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <SystemInit+0xec>)
 8000a58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	52002000 	.word	0x52002000
 8000a70:	58024400 	.word	0x58024400
 8000a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a78:	02020200 	.word	0x02020200
 8000a7c:	01ff0000 	.word	0x01ff0000
 8000a80:	01010280 	.word	0x01010280
 8000a84:	52004000 	.word	0x52004000

08000a88 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_UART4_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_UART4_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_UART4_Init+0x90>)
 8000a94:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_UART4_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_UART4_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_UART4_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_UART4_Init+0x90>)
 8000aae:	2208      	movs	r2, #8
 8000ab0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_UART4_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_UART4_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_UART4_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_UART4_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_UART4_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_UART4_Init+0x90>)
 8000ad2:	f003 faab 	bl	800402c <HAL_HalfDuplex_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000adc:	f7ff ff12 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_UART4_Init+0x90>)
 8000ae4:	f004 fc47 	bl	8005376 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f7ff ff09 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_UART4_Init+0x90>)
 8000af6:	f004 fc7c 	bl	80053f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f7ff ff00 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_UART4_Init+0x90>)
 8000b06:	f004 fbfd 	bl	8005304 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f7ff fef8 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2400002c 	.word	0x2400002c
 8000b1c:	40004c00 	.word	0x40004c00

08000b20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <MX_USART3_UART_Init+0x94>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b6a:	f003 fa5f 	bl	800402c <HAL_HalfDuplex_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b74:	f7ff fec6 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b7c:	f004 fbfb 	bl	8005376 <HAL_UARTEx_SetTxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b86:	f7ff febd 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f004 fc30 	bl	80053f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f7ff feb4 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b9e:	f004 fbb1 	bl	8005304 <HAL_UARTEx_DisableFifoMode>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba8:	f7ff feac 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	240000c0 	.word	0x240000c0
 8000bb4:	40004800 	.word	0x40004800

08000bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0bc      	sub	sp, #240	; 0xf0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	22c0      	movs	r2, #192	; 0xc0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fc97 	bl	800550c <memset>
  if(uartHandle->Instance==UART4)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a58      	ldr	r2, [pc, #352]	; (8000d44 <HAL_UART_MspInit+0x18c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d146      	bne.n	8000c76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000be8:	f04f 0202 	mov.w	r2, #2
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fc34 	bl	800246c <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c0a:	f7ff fe7b 	bl	8000904 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c0e:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000c10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c14:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c1a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c1e:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000c20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b46      	ldr	r3, [pc, #280]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000c2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c32:	4a45      	ldr	r2, [pc, #276]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c3c:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c62:	2308      	movs	r3, #8
 8000c64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4837      	ldr	r0, [pc, #220]	; (8000d4c <HAL_UART_MspInit+0x194>)
 8000c70:	f000 fa34 	bl	80010dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c74:	e061      	b.n	8000d3a <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <HAL_UART_MspInit+0x198>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d15c      	bne.n	8000d3a <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c80:	f04f 0202 	mov.w	r2, #2
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fbe8 	bl	800246c <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000ca2:	f7ff fe2f 	bl	8000904 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000ca8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cac:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000cae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000cb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000cc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_UART_MspInit+0x190>)
 8000cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d06:	4619      	mov	r1, r3
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <HAL_UART_MspInit+0x194>)
 8000d0a:	f000 f9e7 	bl	80010dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_MspInit+0x194>)
 8000d36:	f000 f9d1 	bl	80010dc <HAL_GPIO_Init>
}
 8000d3a:	bf00      	nop
 8000d3c:	37f0      	adds	r7, #240	; 0xf0
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40004c00 	.word	0x40004c00
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020c00 	.word	0x58020c00
 8000d50:	40004800 	.word	0x40004800

08000d54 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f7ff fe1e 	bl	8000998 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f004 fbcb 	bl	800551c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fcf9 	bl	800077c <main>
  bx  lr
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000d90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d94:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d98:	08005848 	.word	0x08005848
  ldr r2, =_sbss
 8000d9c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000da0:	24000158 	.word	0x24000158

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f000 f962 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000db4:	f001 f984 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8000db8:	4602      	mov	r2, r0
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_Init+0x68>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	4913      	ldr	r1, [pc, #76]	; (8000e14 <HAL_Init+0x6c>)
 8000dc6:	5ccb      	ldrb	r3, [r1, r3]
 8000dc8:	f003 031f 	and.w	r3, r3, #31
 8000dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_Init+0x68>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_Init+0x6c>)
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	f003 031f 	and.w	r3, r3, #31
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	fa22 f303 	lsr.w	r3, r2, r3
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <HAL_Init+0x70>)
 8000dea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dec:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_Init+0x74>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f814 	bl	8000e20 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e002      	b.n	8000e08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e02:	f7ff fd85 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	58024400 	.word	0x58024400
 8000e14:	08005800 	.word	0x08005800
 8000e18:	24000004 	.word	0x24000004
 8000e1c:	24000000 	.word	0x24000000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_InitTick+0x60>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e021      	b.n	8000e78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_InitTick+0x64>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_InitTick+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f939 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f911 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x68>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2400000c 	.word	0x2400000c
 8000e84:	24000000 	.word	0x24000000
 8000e88:	24000008 	.word	0x24000008

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2400000c 	.word	0x2400000c
 8000eb0:	24000154 	.word	0x24000154

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	24000154 	.word	0x24000154

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2400000c 	.word	0x2400000c

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <__NVIC_SetPriorityGrouping+0x40>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x40>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	05fa0000 	.word	0x05fa0000

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff47 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff5e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffb2 	bl	8001034 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010ea:	4b89      	ldr	r3, [pc, #548]	; (8001310 <HAL_GPIO_Init+0x234>)
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ee:	e194      	b.n	800141a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8186 	beq.w	8001414 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x44>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	69b9      	ldr	r1, [r7, #24]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80e0 	beq.w	8001414 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_GPIO_Init+0x238>)
 8001256:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800125a:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <HAL_GPIO_Init+0x238>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_GPIO_Init+0x238>)
 8001266:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_GPIO_Init+0x23c>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a20      	ldr	r2, [pc, #128]	; (800131c <HAL_GPIO_Init+0x240>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d052      	beq.n	8001344 <HAL_GPIO_Init+0x268>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_GPIO_Init+0x244>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d031      	beq.n	800130a <HAL_GPIO_Init+0x22e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_GPIO_Init+0x248>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d02b      	beq.n	8001306 <HAL_GPIO_Init+0x22a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_GPIO_Init+0x24c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_GPIO_Init+0x250>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <HAL_GPIO_Init+0x254>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x258>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x21a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_GPIO_Init+0x25c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x216>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a18      	ldr	r2, [pc, #96]	; (800133c <HAL_GPIO_Init+0x260>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x212>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_GPIO_Init+0x264>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x20e>
 80012e6:	2309      	movs	r3, #9
 80012e8:	e02d      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012ea:	230a      	movs	r3, #10
 80012ec:	e02b      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012ee:	2308      	movs	r3, #8
 80012f0:	e029      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e027      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e025      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e023      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012fe:	2304      	movs	r3, #4
 8001300:	e021      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 8001302:	2303      	movs	r3, #3
 8001304:	e01f      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 8001306:	2302      	movs	r3, #2
 8001308:	e01d      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 800130a:	2301      	movs	r3, #1
 800130c:	e01b      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 800130e:	bf00      	nop
 8001310:	58000080 	.word	0x58000080
 8001314:	58024400 	.word	0x58024400
 8001318:	58000400 	.word	0x58000400
 800131c:	58020000 	.word	0x58020000
 8001320:	58020400 	.word	0x58020400
 8001324:	58020800 	.word	0x58020800
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021000 	.word	0x58021000
 8001330:	58021400 	.word	0x58021400
 8001334:	58021800 	.word	0x58021800
 8001338:	58021c00 	.word	0x58021c00
 800133c:	58022000 	.word	0x58022000
 8001340:	58022400 	.word	0x58022400
 8001344:	2300      	movs	r3, #0
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001356:	4938      	ldr	r1, [pc, #224]	; (8001438 <HAL_GPIO_Init+0x35c>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800138a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3301      	adds	r3, #1
 8001418:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f ae63 	bne.w	80010f0 <HAL_GPIO_Init+0x14>
  }
}
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	3724      	adds	r7, #36	; 0x24
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	58000400 	.word	0x58000400

0800143c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	2b06      	cmp	r3, #6
 800144e:	d00a      	beq.n	8001466 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e040      	b.n	80014e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e03e      	b.n	80014e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800146e:	491f      	ldr	r1, [pc, #124]	; (80014ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4313      	orrs	r3, r2
 8001474:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001476:	f7ff fd1d 	bl	8000eb4 <HAL_GetTick>
 800147a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800147c:	e009      	b.n	8001492 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800147e:	f7ff fd19 	bl	8000eb4 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800148c:	d901      	bls.n	8001492 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e028      	b.n	80014e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800149a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800149e:	d1ee      	bne.n	800147e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b1e      	cmp	r3, #30
 80014a4:	d008      	beq.n	80014b8 <HAL_PWREx_ConfigSupply+0x7c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b2e      	cmp	r3, #46	; 0x2e
 80014aa:	d005      	beq.n	80014b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b1d      	cmp	r3, #29
 80014b0:	d002      	beq.n	80014b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b2d      	cmp	r3, #45	; 0x2d
 80014b6:	d114      	bne.n	80014e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014b8:	f7ff fcfc 	bl	8000eb4 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014be:	e009      	b.n	80014d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014c0:	f7ff fcf8 	bl	8000eb4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ce:	d901      	bls.n	80014d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e007      	b.n	80014e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_PWREx_ConfigSupply+0xb0>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d1ee      	bne.n	80014c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	58024800 	.word	0x58024800

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	f000 bc1f 	b.w	8001d42 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80b3 	beq.w	8001678 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001512:	4b95      	ldr	r3, [pc, #596]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	2b10      	cmp	r3, #16
 8001526:	d007      	beq.n	8001538 <HAL_RCC_OscConfig+0x48>
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	2b18      	cmp	r3, #24
 800152c:	d112      	bne.n	8001554 <HAL_RCC_OscConfig+0x64>
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d10d      	bne.n	8001554 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	4b8b      	ldr	r3, [pc, #556]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8098 	beq.w	8001676 <HAL_RCC_OscConfig+0x186>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 8093 	bne.w	8001676 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e3f6      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x7c>
 800155e:	4b82      	ldr	r3, [pc, #520]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a81      	ldr	r2, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e058      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d112      	bne.n	800159a <HAL_RCC_OscConfig+0xaa>
 8001574:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a7b      	ldr	r2, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800157a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b79      	ldr	r3, [pc, #484]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a78      	ldr	r2, [pc, #480]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001586:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a75      	ldr	r2, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e041      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a2:	d112      	bne.n	80015ca <HAL_RCC_OscConfig+0xda>
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6f      	ldr	r2, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a6c      	ldr	r2, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a69      	ldr	r2, [pc, #420]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e029      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80015d2:	d112      	bne.n	80015fa <HAL_RCC_OscConfig+0x10a>
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a63      	ldr	r2, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b61      	ldr	r3, [pc, #388]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a60      	ldr	r2, [pc, #384]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e011      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
 80015fa:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a5a      	ldr	r2, [pc, #360]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b58      	ldr	r3, [pc, #352]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a57      	ldr	r2, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b55      	ldr	r3, [pc, #340]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001618:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800161c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d013      	beq.n	800164e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fc45 	bl	8000eb4 <HAL_GetTick>
 800162a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162e:	f7ff fc41 	bl	8000eb4 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e380      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x13e>
 800164c:	e014      	b.n	8001678 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fc31 	bl	8000eb4 <HAL_GetTick>
 8001652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001656:	f7ff fc2d 	bl	8000eb4 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e36c      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x166>
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 808c 	beq.w	800179e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800168e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_RCC_OscConfig+0x1bc>
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	2b18      	cmp	r3, #24
 80016a0:	d137      	bne.n	8001712 <HAL_RCC_OscConfig+0x222>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d132      	bne.n	8001712 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ac:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1d4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e33e      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 0219 	bic.w	r2, r3, #25
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4925      	ldr	r1, [pc, #148]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fbed 	bl	8000eb4 <HAL_GetTick>
 80016da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fbe9 	bl	8000eb4 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e328      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	4917      	ldr	r1, [pc, #92]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001710:	e045      	b.n	800179e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d028      	beq.n	800176c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0219 	bic.w	r2, r3, #25
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	4910      	ldr	r1, [pc, #64]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fbc2 	bl	8000eb4 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff fbbe 	bl	8000eb4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e2fd      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	061b      	lsls	r3, r3, #24
 8001760:	4901      	ldr	r1, [pc, #4]	; (8001768 <HAL_RCC_OscConfig+0x278>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
 8001766:	e01a      	b.n	800179e <HAL_RCC_OscConfig+0x2ae>
 8001768:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176c:	4b97      	ldr	r3, [pc, #604]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a96      	ldr	r2, [pc, #600]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fb9c 	bl	8000eb4 <HAL_GetTick>
 800177c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fb98 	bl	8000eb4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e2d7      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001792:	4b8e      	ldr	r3, [pc, #568]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d06a      	beq.n	8001880 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017b4:	4b85      	ldr	r3, [pc, #532]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d007      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2e0>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b18      	cmp	r3, #24
 80017c4:	d11b      	bne.n	80017fe <HAL_RCC_OscConfig+0x30e>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d116      	bne.n	80017fe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017d0:	4b7e      	ldr	r3, [pc, #504]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2f8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b80      	cmp	r3, #128	; 0x80
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e2ac      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017e8:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	4975      	ldr	r1, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017fc:	e040      	b.n	8001880 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d023      	beq.n	800184e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001806:	4b71      	ldr	r3, [pc, #452]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a70      	ldr	r2, [pc, #448]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fb4f 	bl	8000eb4 <HAL_GetTick>
 8001816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800181a:	f7ff fb4b 	bl	8000eb4 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e28a      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800182c:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001838:	4b64      	ldr	r3, [pc, #400]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	4961      	ldr	r1, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5e      	ldr	r2, [pc, #376]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fb2b 	bl	8000eb4 <HAL_GetTick>
 800185e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001862:	f7ff fb27 	bl	8000eb4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e266      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001874:	4b55      	ldr	r3, [pc, #340]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d036      	beq.n	80018fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d019      	beq.n	80018c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001894:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001898:	4a4c      	ldr	r2, [pc, #304]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb08 	bl	8000eb4 <HAL_GetTick>
 80018a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb04 	bl	8000eb4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e243      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ba:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80018bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x3b8>
 80018c6:	e018      	b.n	80018fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80018ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018cc:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff faee 	bl	8000eb4 <HAL_GetTick>
 80018d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff faea 	bl	8000eb4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e229      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80018f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d036      	beq.n	8001974 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800190e:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001918:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800191a:	f7ff facb 	bl	8000eb4 <HAL_GetTick>
 800191e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001922:	f7ff fac7 	bl	8000eb4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e206      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x432>
 8001940:	e018      	b.n	8001974 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a21      	ldr	r2, [pc, #132]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 8001948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800194c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800194e:	f7ff fab1 	bl	8000eb4 <HAL_GetTick>
 8001952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001956:	f7ff faad 	bl	8000eb4 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1ec      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80af 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_RCC_OscConfig+0x4e0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_RCC_OscConfig+0x4e0>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800198e:	f7ff fa91 	bl	8000eb4 <HAL_GetTick>
 8001992:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff fa8d 	bl	8000eb4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1cc      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_OscConfig+0x4e0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4e4>
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a02      	ldr	r2, [pc, #8]	; (80019cc <HAL_RCC_OscConfig+0x4dc>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e05b      	b.n	8001a82 <HAL_RCC_OscConfig+0x592>
 80019ca:	bf00      	nop
 80019cc:	58024400 	.word	0x58024400
 80019d0:	58024800 	.word	0x58024800
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x512>
 80019dc:	4b9d      	ldr	r3, [pc, #628]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a9c      	ldr	r2, [pc, #624]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
 80019e8:	4b9a      	ldr	r3, [pc, #616]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a99      	ldr	r2, [pc, #612]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 80019ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	4b97      	ldr	r3, [pc, #604]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a96      	ldr	r2, [pc, #600]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 80019fa:	f023 0304 	bic.w	r3, r3, #4
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	e03f      	b.n	8001a82 <HAL_RCC_OscConfig+0x592>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d112      	bne.n	8001a30 <HAL_RCC_OscConfig+0x540>
 8001a0a:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a91      	ldr	r2, [pc, #580]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a8e      	ldr	r2, [pc, #568]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a8b      	ldr	r2, [pc, #556]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	e028      	b.n	8001a82 <HAL_RCC_OscConfig+0x592>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b85      	cmp	r3, #133	; 0x85
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_OscConfig+0x56e>
 8001a38:	4b86      	ldr	r3, [pc, #536]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a85      	ldr	r2, [pc, #532]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a82      	ldr	r2, [pc, #520]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	e011      	b.n	8001a82 <HAL_RCC_OscConfig+0x592>
 8001a5e:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	4a7c      	ldr	r2, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6a:	4b7a      	ldr	r3, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a79      	ldr	r2, [pc, #484]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	4a76      	ldr	r2, [pc, #472]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa13 	bl	8000eb4 <HAL_GetTick>
 8001a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fa0f 	bl	8000eb4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e14c      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x5a2>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff f9fd 	bl	8000eb4 <HAL_GetTick>
 8001aba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff f9f9 	bl	8000eb4 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e136      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ad4:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 812b 	beq.w	8001d40 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001aea:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001af2:	2b18      	cmp	r3, #24
 8001af4:	f000 80bb 	beq.w	8001c6e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	f040 8095 	bne.w	8001c2c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a53      	ldr	r2, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f9d1 	bl	8000eb4 <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff f9cd 	bl	8000eb4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e10c      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x768>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	430a      	orrs	r2, r1
 8001b48:	4942      	ldr	r1, [pc, #264]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	628b      	str	r3, [r1, #40]	; 0x28
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	3b01      	subs	r3, #1
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b7e:	4935      	ldr	r1, [pc, #212]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	4a32      	ldr	r2, [pc, #200]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_OscConfig+0x76c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b9c:	00d2      	lsls	r2, r2, #3
 8001b9e:	492d      	ldr	r1, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	f023 020c 	bic.w	r2, r3, #12
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4928      	ldr	r1, [pc, #160]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	f023 0202 	bic.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4924      	ldr	r1, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f956 	bl	8000eb4 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f952 	bl	8000eb4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e091      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x71c>
 8001c2a:	e089      	b.n	8001d40 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_RCC_OscConfig+0x764>)
 8001c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f93c 	bl	8000eb4 <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f938 	bl	8000eb4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d908      	bls.n	8001c60 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e077      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
 8001c52:	bf00      	nop
 8001c54:	58024400 	.word	0x58024400
 8001c58:	fffffc0c 	.word	0xfffffc0c
 8001c5c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e9      	bne.n	8001c40 <HAL_RCC_OscConfig+0x750>
 8001c6c:	e068      	b.n	8001d40 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d031      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d12a      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d122      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d11a      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0a5b      	lsrs	r3, r3, #9
 8001cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d111      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d108      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	0e1b      	lsrs	r3, r3, #24
 8001cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e02b      	b.n	8001d42 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cf4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d01f      	beq.n	8001d40 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d0c:	f7ff f8d2 	bl	8000eb4 <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d12:	bf00      	nop
 8001d14:	f7ff f8ce 	bl	8000eb4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d0f9      	beq.n	8001d14 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x860>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d2c:	00d2      	lsls	r2, r2, #3
 8001d2e:	4907      	ldr	r1, [pc, #28]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_RCC_OscConfig+0x85c>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	ffff0007 	.word	0xffff0007

08001d54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e19c      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b8a      	ldr	r3, [pc, #552]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b87      	ldr	r3, [pc, #540]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 020f 	bic.w	r2, r3, #15
 8001d7e:	4985      	ldr	r1, [pc, #532]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e184      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	4b7b      	ldr	r3, [pc, #492]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d908      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001db4:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4975      	ldr	r1, [pc, #468]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d908      	bls.n	8001df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001de2:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	496a      	ldr	r1, [pc, #424]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d010      	beq.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d908      	bls.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e10:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	495e      	ldr	r1, [pc, #376]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d010      	beq.n	8001e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d908      	bls.n	8001e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e3e:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4953      	ldr	r1, [pc, #332]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d010      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d908      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f023 020f 	bic.w	r2, r3, #15
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4947      	ldr	r1, [pc, #284]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d055      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4940      	ldr	r1, [pc, #256]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea4:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d121      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0f6      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d115      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0ea      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0de      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0d6      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f023 0207 	bic.w	r2, r3, #7
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4925      	ldr	r1, [pc, #148]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f06:	f7fe ffd5 	bl	8000eb4 <HAL_GetTick>
 8001f0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7fe ffd1 	bl	8000eb4 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0be      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d1eb      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d010      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d208      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f023 020f 	bic.w	r2, r3, #15
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_RCC_ClockConfig+0x244>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d214      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 020f 	bic.w	r2, r3, #15
 8001f7a:	4906      	ldr	r1, [pc, #24]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCC_ClockConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e086      	b.n	80020a2 <HAL_RCC_ClockConfig+0x34e>
 8001f94:	52002000 	.word	0x52002000
 8001f98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d208      	bcs.n	8001fca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fb8:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	4939      	ldr	r1, [pc, #228]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d010      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d208      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fe6:	4b31      	ldr	r3, [pc, #196]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	492e      	ldr	r1, [pc, #184]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	d010      	beq.n	8002026 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002010:	429a      	cmp	r2, r3
 8002012:	d208      	bcs.n	8002026 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4922      	ldr	r1, [pc, #136]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8002022:	4313      	orrs	r3, r2
 8002024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d010      	beq.n	8002054 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800203e:	429a      	cmp	r2, r3
 8002040:	d208      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4917      	ldr	r1, [pc, #92]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8002050:	4313      	orrs	r3, r2
 8002052:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002054:	f000 f834 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	4912      	ldr	r1, [pc, #72]	; (80020b0 <HAL_RCC_ClockConfig+0x35c>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_RCC_ClockConfig+0x358>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_RCC_ClockConfig+0x35c>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x360>)
 800208a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x364>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_ClockConfig+0x368>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fec2 	bl	8000e20 <HAL_InitTick>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	58024400 	.word	0x58024400
 80020b0:	08005800 	.word	0x08005800
 80020b4:	24000004 	.word	0x24000004
 80020b8:	24000000 	.word	0x24000000
 80020bc:	24000008 	.word	0x24000008

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c6:	4bb3      	ldr	r3, [pc, #716]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ce:	2b18      	cmp	r3, #24
 80020d0:	f200 8155 	bhi.w	800237e <HAL_RCC_GetSysClockFreq+0x2be>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	08002141 	.word	0x08002141
 80020e0:	0800237f 	.word	0x0800237f
 80020e4:	0800237f 	.word	0x0800237f
 80020e8:	0800237f 	.word	0x0800237f
 80020ec:	0800237f 	.word	0x0800237f
 80020f0:	0800237f 	.word	0x0800237f
 80020f4:	0800237f 	.word	0x0800237f
 80020f8:	0800237f 	.word	0x0800237f
 80020fc:	08002167 	.word	0x08002167
 8002100:	0800237f 	.word	0x0800237f
 8002104:	0800237f 	.word	0x0800237f
 8002108:	0800237f 	.word	0x0800237f
 800210c:	0800237f 	.word	0x0800237f
 8002110:	0800237f 	.word	0x0800237f
 8002114:	0800237f 	.word	0x0800237f
 8002118:	0800237f 	.word	0x0800237f
 800211c:	0800216d 	.word	0x0800216d
 8002120:	0800237f 	.word	0x0800237f
 8002124:	0800237f 	.word	0x0800237f
 8002128:	0800237f 	.word	0x0800237f
 800212c:	0800237f 	.word	0x0800237f
 8002130:	0800237f 	.word	0x0800237f
 8002134:	0800237f 	.word	0x0800237f
 8002138:	0800237f 	.word	0x0800237f
 800213c:	08002173 	.word	0x08002173
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002140:	4b94      	ldr	r3, [pc, #592]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d009      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800214c:	4b91      	ldr	r3, [pc, #580]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	4a90      	ldr	r2, [pc, #576]	; (8002398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800215e:	e111      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002160:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002162:	61bb      	str	r3, [r7, #24]
      break;
 8002164:	e10e      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002168:	61bb      	str	r3, [r7, #24]
      break;
 800216a:	e10b      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800216c:	4b8c      	ldr	r3, [pc, #560]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800216e:	61bb      	str	r3, [r7, #24]
      break;
 8002170:	e108      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002172:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800217c:	4b85      	ldr	r3, [pc, #532]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002186:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002188:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002192:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80e1 	beq.w	8002378 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	f000 8083 	beq.w	80022c4 <HAL_RCC_GetSysClockFreq+0x204>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	f200 80a1 	bhi.w	8002308 <HAL_RCC_GetSysClockFreq+0x248>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x114>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d056      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021d2:	e099      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02d      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021e0:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	4a6b      	ldr	r2, [pc, #428]	; (8002398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800220a:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800221a:	ed97 6a02 	vldr	s12, [r7, #8]
 800221e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800222a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800222e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800223a:	e087      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002246:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800224a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224e:	4b51      	ldr	r3, [pc, #324]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002262:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800226a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800227e:	e065      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800228e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022c2:	e043      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d6:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002306:	e021      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800234a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	0a5b      	lsrs	r3, r3, #9
 8002352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002356:	3301      	adds	r3, #1
 8002358:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002364:	edd7 6a07 	vldr	s13, [r7, #28]
 8002368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002370:	ee17 3a90 	vmov	r3, s15
 8002374:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002376:	e005      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
      break;
 800237c:	e002      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002380:	61bb      	str	r3, [r7, #24]
      break;
 8002382:	bf00      	nop
  }

  return sysclockfreq;
 8002384:	69bb      	ldr	r3, [r7, #24]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	58024400 	.word	0x58024400
 8002398:	03d09000 	.word	0x03d09000
 800239c:	003d0900 	.word	0x003d0900
 80023a0:	007a1200 	.word	0x007a1200
 80023a4:	46000000 	.word	0x46000000
 80023a8:	4c742400 	.word	0x4c742400
 80023ac:	4a742400 	.word	0x4a742400
 80023b0:	4af42400 	.word	0x4af42400

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023ba:	f7ff fe81 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_GetHCLKFreq+0x50>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	490f      	ldr	r1, [pc, #60]	; (8002408 <HAL_RCC_GetHCLKFreq+0x54>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_GetHCLKFreq+0x50>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	4a09      	ldr	r2, [pc, #36]	; (8002408 <HAL_RCC_GetHCLKFreq+0x54>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <HAL_RCC_GetHCLKFreq+0x58>)
 80023f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_RCC_GetHCLKFreq+0x5c>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <HAL_RCC_GetHCLKFreq+0x58>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	58024400 	.word	0x58024400
 8002408:	08005800 	.word	0x08005800
 800240c:	24000004 	.word	0x24000004
 8002410:	24000000 	.word	0x24000000

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002418:	f7ff ffcc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4904      	ldr	r1, [pc, #16]	; (800243c <HAL_RCC_GetPCLK1Freq+0x28>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58024400 	.word	0x58024400
 800243c:	08005800 	.word	0x08005800

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002444:	f7ff ffb6 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	58024400 	.word	0x58024400
 8002468:	08005800 	.word	0x08005800

0800246c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b0c8      	sub	sp, #288	; 0x120
 8002472:	af00      	add	r7, sp, #0
 8002474:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002478:	2300      	movs	r3, #0
 800247a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800247e:	2300      	movs	r3, #0
 8002480:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002490:	2500      	movs	r5, #0
 8002492:	ea54 0305 	orrs.w	r3, r4, r5
 8002496:	d049      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800249e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024a2:	d02f      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024a8:	d828      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ae:	d01a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024b4:	d822      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024be:	d007      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024c0:	e01c      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c2:	4ba7      	ldr	r3, [pc, #668]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	4aa6      	ldr	r2, [pc, #664]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024ce:	e01a      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024d4:	3308      	adds	r3, #8
 80024d6:	2102      	movs	r1, #2
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 fc43 	bl	8003d64 <RCCEx_PLL2_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024e4:	e00f      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80024e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ea:	3328      	adds	r3, #40	; 0x28
 80024ec:	2102      	movs	r1, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fcea 	bl	8003ec8 <RCCEx_PLL3_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024fa:	e004      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002502:	e000      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002506:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800250e:	4b94      	ldr	r3, [pc, #592]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002512:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800251a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251c:	4a90      	ldr	r2, [pc, #576]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800251e:	430b      	orrs	r3, r1
 8002520:	6513      	str	r3, [r2, #80]	; 0x50
 8002522:	e003      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002524:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002528:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800252c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002538:	f04f 0900 	mov.w	r9, #0
 800253c:	ea58 0309 	orrs.w	r3, r8, r9
 8002540:	d047      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	2b04      	cmp	r3, #4
 800254a:	d82a      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002569 	.word	0x08002569
 8002558:	08002577 	.word	0x08002577
 800255c:	0800258d 	.word	0x0800258d
 8002560:	080025ab 	.word	0x080025ab
 8002564:	080025ab 	.word	0x080025ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002568:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	4a7c      	ldr	r2, [pc, #496]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800256e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002572:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002574:	e01a      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800257a:	3308      	adds	r3, #8
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f001 fbf0 	bl	8003d64 <RCCEx_PLL2_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800258a:	e00f      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800258c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002590:	3328      	adds	r3, #40	; 0x28
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f001 fc97 	bl	8003ec8 <RCCEx_PLL3_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025a0:	e004      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025a8:	e000      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80025aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b8:	f023 0107 	bic.w	r1, r3, #7
 80025bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	4a67      	ldr	r2, [pc, #412]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6513      	str	r3, [r2, #80]	; 0x50
 80025c8:	e003      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80025d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80025de:	f04f 0b00 	mov.w	fp, #0
 80025e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80025e6:	d054      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80025e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025f2:	d036      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80025f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025f8:	d82f      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fe:	d032      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002604:	d829      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002606:	2bc0      	cmp	r3, #192	; 0xc0
 8002608:	d02f      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800260a:	2bc0      	cmp	r3, #192	; 0xc0
 800260c:	d825      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800260e:	2b80      	cmp	r3, #128	; 0x80
 8002610:	d018      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002612:	2b80      	cmp	r3, #128	; 0x80
 8002614:	d821      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d007      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800261e:	e01c      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800262c:	e01e      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800262e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002632:	3308      	adds	r3, #8
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fb94 	bl	8003d64 <RCCEx_PLL2_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002642:	e013      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002648:	3328      	adds	r3, #40	; 0x28
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f001 fc3b 	bl	8003ec8 <RCCEx_PLL3_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002658:	e008      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002660:	e004      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002662:	bf00      	nop
 8002664:	e002      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800266a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800266c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002678:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800267c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	4a37      	ldr	r2, [pc, #220]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002684:	430b      	orrs	r3, r1
 8002686:	6513      	str	r3, [r2, #80]	; 0x50
 8002688:	e003      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800268e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800269e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80026ac:	460b      	mov	r3, r1
 80026ae:	4313      	orrs	r3, r2
 80026b0:	d05c      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80026b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026bc:	d03b      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026be:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026c2:	d834      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c8:	d037      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80026ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ce:	d82e      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026d4:	d033      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80026d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026da:	d828      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e0:	d01a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d822      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80026ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f0:	d007      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80026f2:	e01c      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002700:	e01e      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002706:	3308      	adds	r3, #8
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fb2a 	bl	8003d64 <RCCEx_PLL2_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002716:	e013      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800271c:	3328      	adds	r3, #40	; 0x28
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f001 fbd1 	bl	8003ec8 <RCCEx_PLL3_Config>
 8002726:	4603      	mov	r3, r0
 8002728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800272c:	e008      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002734:	e004      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002736:	bf00      	nop
 8002738:	e002      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800273e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002740:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	4a02      	ldr	r2, [pc, #8]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002758:	430b      	orrs	r3, r1
 800275a:	6513      	str	r3, [r2, #80]	; 0x50
 800275c:	e006      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800275e:	bf00      	nop
 8002760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002768:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800276c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002782:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002786:	460b      	mov	r3, r1
 8002788:	4313      	orrs	r3, r2
 800278a:	d03a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800278c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	2b30      	cmp	r3, #48	; 0x30
 8002794:	d01f      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002796:	2b30      	cmp	r3, #48	; 0x30
 8002798:	d819      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 800279a:	2b20      	cmp	r3, #32
 800279c:	d00c      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d815      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d111      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027aa:	4bae      	ldr	r3, [pc, #696]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	4aad      	ldr	r2, [pc, #692]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027b6:	e011      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027bc:	3308      	adds	r3, #8
 80027be:	2102      	movs	r1, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 facf 	bl	8003d64 <RCCEx_PLL2_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027cc:	e006      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027e4:	4b9f      	ldr	r3, [pc, #636]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80027ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a9c      	ldr	r2, [pc, #624]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027f4:	430b      	orrs	r3, r1
 80027f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800280e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002818:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800281c:	460b      	mov	r3, r1
 800281e:	4313      	orrs	r3, r2
 8002820:	d051      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800282c:	d035      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800282e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002832:	d82e      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002838:	d031      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800283a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800283e:	d828      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d01a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284a:	d822      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002854:	d007      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002856:	e01c      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002858:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	4a81      	ldr	r2, [pc, #516]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800285e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002864:	e01c      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800286a:	3308      	adds	r3, #8
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f001 fa78 	bl	8003d64 <RCCEx_PLL2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800287a:	e011      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800287c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002880:	3328      	adds	r3, #40	; 0x28
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f001 fb1f 	bl	8003ec8 <RCCEx_PLL3_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002898:	e002      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800289e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028a8:	4b6e      	ldr	r3, [pc, #440]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80028b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b6:	4a6b      	ldr	r2, [pc, #428]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6513      	str	r3, [r2, #80]	; 0x50
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80028d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80028dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80028e0:	460b      	mov	r3, r1
 80028e2:	4313      	orrs	r3, r2
 80028e4:	d053      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80028e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d033      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80028f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f6:	d82c      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fc:	d02f      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80028fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002902:	d826      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002908:	d02b      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800290a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800290e:	d820      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002914:	d012      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800291a:	d81a      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800291c:	2b00      	cmp	r3, #0
 800291e:	d022      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d115      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800292a:	3308      	adds	r3, #8
 800292c:	2101      	movs	r1, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f001 fa18 	bl	8003d64 <RCCEx_PLL2_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800293a:	e015      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800293c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002940:	3328      	adds	r3, #40	; 0x28
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f001 fabf 	bl	8003ec8 <RCCEx_PLL3_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002950:	e00a      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002958:	e006      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800295a:	bf00      	nop
 800295c:	e004      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800295e:	bf00      	nop
 8002960:	e002      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002968:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002970:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800297c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297e:	4a39      	ldr	r2, [pc, #228]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002980:	430b      	orrs	r3, r1
 8002982:	6513      	str	r3, [r2, #80]	; 0x50
 8002984:	e003      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800298a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800298e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800299a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029a4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4313      	orrs	r3, r2
 80029ac:	d060      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80029ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029b6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029ba:	d039      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80029bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029c0:	d832      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c6:	d035      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80029c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029cc:	d82c      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d031      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d826      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029de:	d02d      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80029e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029e4:	d820      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ea:	d012      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80029ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f0:	d81a      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d024      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80029f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029fa:	d115      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a00:	3308      	adds	r3, #8
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f9ad 	bl	8003d64 <RCCEx_PLL2_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a10:	e017      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a16:	3328      	adds	r3, #40	; 0x28
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fa54 	bl	8003ec8 <RCCEx_PLL3_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a26:	e00c      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a2e:	e008      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a30:	bf00      	nop
 8002a32:	e006      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a34:	bf00      	nop
 8002a36:	e004      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a38:	bf00      	nop
 8002a3a:	e002      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a3c:	bf00      	nop
 8002a3e:	e000      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a5a:	4a02      	ldr	r2, [pc, #8]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a60:	e006      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002a62:	bf00      	nop
 8002a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	d037      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a9a:	d00e      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa0:	d816      	bhi.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aaa:	d111      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aac:	4bc4      	ldr	r3, [pc, #784]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	4ac3      	ldr	r2, [pc, #780]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ab8:	e00f      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002abe:	3308      	adds	r3, #8
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 f94e 	bl	8003d64 <RCCEx_PLL2_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ace:	e004      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ad6:	e000      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ada:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ae2:	4bb7      	ldr	r3, [pc, #732]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002af0:	4ab3      	ldr	r2, [pc, #716]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6513      	str	r3, [r2, #80]	; 0x50
 8002af6:	e003      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002afc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	d039      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d81c      	bhi.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b6d 	.word	0x08002b6d
 8002b34:	08002b41 	.word	0x08002b41
 8002b38:	08002b4f 	.word	0x08002b4f
 8002b3c:	08002b6d 	.word	0x08002b6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b40:	4b9f      	ldr	r3, [pc, #636]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	4a9e      	ldr	r2, [pc, #632]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b4c:	e00f      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b52:	3308      	adds	r3, #8
 8002b54:	2102      	movs	r1, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f904 	bl	8003d64 <RCCEx_PLL2_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b62:	e004      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b6a:	e000      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b76:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	f023 0103 	bic.w	r1, r3, #3
 8002b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	4a8e      	ldr	r2, [pc, #568]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b86:	430b      	orrs	r3, r1
 8002b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8a:	e003      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002baa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f000 8099 	beq.w	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb6:	4b83      	ldr	r3, [pc, #524]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a82      	ldr	r2, [pc, #520]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc2:	f7fe f977 	bl	8000eb4 <HAL_GetTick>
 8002bc6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bca:	e00b      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe f972 	bl	8000eb4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d903      	bls.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002be2:	e005      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be4:	4b77      	ldr	r3, [pc, #476]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ed      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d173      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bf8:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c04:	4053      	eors	r3, r2
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0e:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c1a:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a68      	ldr	r2, [pc, #416]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c26:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a65      	ldr	r2, [pc, #404]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c32:	4a63      	ldr	r2, [pc, #396]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c46:	d118      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f934 	bl	8000eb4 <HAL_GetTick>
 8002c4c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c50:	e00d      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe f92f 	bl	8000eb4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d903      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002c6c:	e005      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0eb      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d129      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c92:	d10e      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ca4:	091a      	lsrs	r2, r3, #4
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6113      	str	r3, [r2, #16]
 8002cb0:	e005      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cbc:	6113      	str	r3, [r2, #16]
 8002cbe:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cce:	4a3c      	ldr	r2, [pc, #240]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002cde:	e003      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ce4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f002 0301 	and.w	r3, r2, #1
 8002cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f000 8090 	beq.w	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d12:	2b28      	cmp	r3, #40	; 0x28
 8002d14:	d870      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002e01 	.word	0x08002e01
 8002d20:	08002df9 	.word	0x08002df9
 8002d24:	08002df9 	.word	0x08002df9
 8002d28:	08002df9 	.word	0x08002df9
 8002d2c:	08002df9 	.word	0x08002df9
 8002d30:	08002df9 	.word	0x08002df9
 8002d34:	08002df9 	.word	0x08002df9
 8002d38:	08002df9 	.word	0x08002df9
 8002d3c:	08002dcd 	.word	0x08002dcd
 8002d40:	08002df9 	.word	0x08002df9
 8002d44:	08002df9 	.word	0x08002df9
 8002d48:	08002df9 	.word	0x08002df9
 8002d4c:	08002df9 	.word	0x08002df9
 8002d50:	08002df9 	.word	0x08002df9
 8002d54:	08002df9 	.word	0x08002df9
 8002d58:	08002df9 	.word	0x08002df9
 8002d5c:	08002de3 	.word	0x08002de3
 8002d60:	08002df9 	.word	0x08002df9
 8002d64:	08002df9 	.word	0x08002df9
 8002d68:	08002df9 	.word	0x08002df9
 8002d6c:	08002df9 	.word	0x08002df9
 8002d70:	08002df9 	.word	0x08002df9
 8002d74:	08002df9 	.word	0x08002df9
 8002d78:	08002df9 	.word	0x08002df9
 8002d7c:	08002e01 	.word	0x08002e01
 8002d80:	08002df9 	.word	0x08002df9
 8002d84:	08002df9 	.word	0x08002df9
 8002d88:	08002df9 	.word	0x08002df9
 8002d8c:	08002df9 	.word	0x08002df9
 8002d90:	08002df9 	.word	0x08002df9
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002df9 	.word	0x08002df9
 8002d9c:	08002e01 	.word	0x08002e01
 8002da0:	08002df9 	.word	0x08002df9
 8002da4:	08002df9 	.word	0x08002df9
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002df9 	.word	0x08002df9
 8002db0:	08002df9 	.word	0x08002df9
 8002db4:	08002df9 	.word	0x08002df9
 8002db8:	08002df9 	.word	0x08002df9
 8002dbc:	08002e01 	.word	0x08002e01
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	58024800 	.word	0x58024800
 8002dc8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 ffc5 	bl	8003d64 <RCCEx_PLL2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002de0:	e00f      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002de6:	3328      	adds	r3, #40	; 0x28
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 f86c 	bl	8003ec8 <RCCEx_PLL3_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002df6:	e004      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dfe:	e000      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e0a:	4bc0      	ldr	r3, [pc, #768]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1a:	4abc      	ldr	r2, [pc, #752]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6553      	str	r3, [r2, #84]	; 0x54
 8002e20:	e003      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f002 0302 	and.w	r3, r2, #2
 8002e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e40:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002e44:	460b      	mov	r3, r1
 8002e46:	4313      	orrs	r3, r2
 8002e48:	d043      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d824      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002ea9 	.word	0x08002ea9
 8002e60:	08002e75 	.word	0x08002e75
 8002e64:	08002e8b 	.word	0x08002e8b
 8002e68:	08002ea9 	.word	0x08002ea9
 8002e6c:	08002ea9 	.word	0x08002ea9
 8002e70:	08002ea9 	.word	0x08002ea9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e78:	3308      	adds	r3, #8
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 ff71 	bl	8003d64 <RCCEx_PLL2_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e88:	e00f      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e8e:	3328      	adds	r3, #40	; 0x28
 8002e90:	2101      	movs	r1, #1
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 f818 	bl	8003ec8 <RCCEx_PLL3_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e9e:	e004      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ea6:	e000      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002eb2:	4b96      	ldr	r3, [pc, #600]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f023 0107 	bic.w	r1, r3, #7
 8002eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec2:	4a92      	ldr	r2, [pc, #584]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6553      	str	r3, [r2, #84]	; 0x54
 8002ec8:	e003      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ece:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f002 0304 	and.w	r3, r2, #4
 8002ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ee8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	d043      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d824      	bhi.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f51 	.word	0x08002f51
 8002f08:	08002f1d 	.word	0x08002f1d
 8002f0c:	08002f33 	.word	0x08002f33
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f51 	.word	0x08002f51
 8002f18:	08002f51 	.word	0x08002f51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f20:	3308      	adds	r3, #8
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 ff1d 	bl	8003d64 <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f30:	e00f      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f36:	3328      	adds	r3, #40	; 0x28
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 ffc4 	bl	8003ec8 <RCCEx_PLL3_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f46:	e004      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f4e:	e000      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f5a:	4b6c      	ldr	r3, [pc, #432]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	f023 0107 	bic.w	r1, r3, #7
 8002f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f6a:	4a68      	ldr	r2, [pc, #416]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f70:	e003      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f002 0320 	and.w	r3, r2, #32
 8002f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f94:	460b      	mov	r3, r1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	d055      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa6:	d033      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fac:	d82c      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d02f      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d826      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fbe:	d02b      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002fc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fc4:	d820      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fca:	d012      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd0:	d81a      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d022      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fda:	d115      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 febd 	bl	8003d64 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002ff0:	e015      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff6:	3328      	adds	r3, #40	; 0x28
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 ff64 	bl	8003ec8 <RCCEx_PLL3_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003006:	e00a      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800300e:	e006      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003010:	bf00      	nop
 8003012:	e004      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003014:	bf00      	nop
 8003016:	e002      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800301c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800302e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003036:	4a35      	ldr	r2, [pc, #212]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003038:	430b      	orrs	r3, r1
 800303a:	6553      	str	r3, [r2, #84]	; 0x54
 800303c:	e003      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003042:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800305c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003060:	460b      	mov	r3, r1
 8003062:	4313      	orrs	r3, r2
 8003064:	d058      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800306a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800306e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003072:	d033      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003074:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003078:	d82c      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d02f      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d826      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800308a:	d02b      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800308c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003090:	d820      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003096:	d012      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309c:	d81a      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d022      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a6:	d115      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ac:	3308      	adds	r3, #8
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fe57 	bl	8003d64 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030bc:	e015      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c2:	3328      	adds	r3, #40	; 0x28
 80030c4:	2102      	movs	r1, #2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fefe 	bl	8003ec8 <RCCEx_PLL3_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030d2:	e00a      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030da:	e006      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030dc:	bf00      	nop
 80030de:	e004      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030e0:	bf00      	nop
 80030e2:	e002      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10e      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80030fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003102:	4a02      	ldr	r2, [pc, #8]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003104:	430b      	orrs	r3, r1
 8003106:	6593      	str	r3, [r2, #88]	; 0x58
 8003108:	e006      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800310a:	bf00      	nop
 800310c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003114:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800312e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003132:	460b      	mov	r3, r1
 8003134:	4313      	orrs	r3, r2
 8003136:	d055      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800313c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003140:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003144:	d033      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003146:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800314a:	d82c      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800314c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003150:	d02f      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d826      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003158:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800315c:	d02b      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800315e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003162:	d820      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003168:	d012      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800316a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800316e:	d81a      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d022      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003178:	d115      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800317a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317e:	3308      	adds	r3, #8
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fdee 	bl	8003d64 <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800318e:	e015      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003194:	3328      	adds	r3, #40	; 0x28
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fe95 	bl	8003ec8 <RCCEx_PLL3_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031a4:	e00a      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031ae:	bf00      	nop
 80031b0:	e004      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031b2:	bf00      	nop
 80031b4:	e002      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031c4:	4ba1      	ldr	r3, [pc, #644]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80031cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031d4:	4a9d      	ldr	r2, [pc, #628]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031d6:	430b      	orrs	r3, r1
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80031e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f002 0308 	and.w	r3, r2, #8
 80031f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80031fe:	460b      	mov	r3, r1
 8003200:	4313      	orrs	r3, r2
 8003202:	d01e      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003210:	d10c      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003216:	3328      	adds	r3, #40	; 0x28
 8003218:	2102      	movs	r1, #2
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fe54 	bl	8003ec8 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800322c:	4b87      	ldr	r3, [pc, #540]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	4a83      	ldr	r2, [pc, #524]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800323e:	430b      	orrs	r3, r1
 8003240:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f002 0310 	and.w	r3, r2, #16
 800324e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003258:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800325c:	460b      	mov	r3, r1
 800325e:	4313      	orrs	r3, r2
 8003260:	d01e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800326a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800326e:	d10c      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003274:	3328      	adds	r3, #40	; 0x28
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fe25 	bl	8003ec8 <RCCEx_PLL3_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800328a:	4b70      	ldr	r3, [pc, #448]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003296:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800329a:	4a6c      	ldr	r2, [pc, #432]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80032ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80032ba:	460b      	mov	r3, r1
 80032bc:	4313      	orrs	r3, r2
 80032be:	d03e      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80032c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032cc:	d022      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80032ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032d2:	d81b      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80032de:	e015      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e4:	3308      	adds	r3, #8
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fd3b 	bl	8003d64 <RCCEx_PLL2_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032f4:	e00f      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fa:	3328      	adds	r3, #40	; 0x28
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fde2 	bl	8003ec8 <RCCEx_PLL3_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800330a:	e004      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800331e:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800332e:	4a47      	ldr	r2, [pc, #284]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003330:	430b      	orrs	r3, r1
 8003332:	6593      	str	r3, [r2, #88]	; 0x58
 8003334:	e003      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800333a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800333e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800334a:	67bb      	str	r3, [r7, #120]	; 0x78
 800334c:	2300      	movs	r3, #0
 800334e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003350:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003366:	d01f      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800336c:	d818      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800336e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003372:	d003      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003378:	d007      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337c:	4b33      	ldr	r3, [pc, #204]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4a32      	ldr	r2, [pc, #200]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003388:	e00f      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800338a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338e:	3328      	adds	r3, #40	; 0x28
 8003390:	2101      	movs	r1, #1
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fd98 	bl	8003ec8 <RCCEx_PLL3_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800339e:	e004      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80033a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6553      	str	r3, [r2, #84]	; 0x54
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80033de:	673b      	str	r3, [r7, #112]	; 0x70
 80033e0:	2300      	movs	r3, #0
 80033e2:	677b      	str	r3, [r7, #116]	; 0x74
 80033e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80033e8:	460b      	mov	r3, r1
 80033ea:	4313      	orrs	r3, r2
 80033ec:	d034      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80033ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d007      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80033fe:	e011      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800340c:	e00e      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800340e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003412:	3308      	adds	r3, #8
 8003414:	2102      	movs	r1, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fca4 	bl	8003d64 <RCCEx_PLL2_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003422:	e003      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	4a02      	ldr	r2, [pc, #8]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003444:	430b      	orrs	r3, r1
 8003446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800344a:	bf00      	nop
 800344c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003454:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003464:	66bb      	str	r3, [r7, #104]	; 0x68
 8003466:	2300      	movs	r3, #0
 8003468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800346a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800346e:	460b      	mov	r3, r1
 8003470:	4313      	orrs	r3, r2
 8003472:	d00c      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003478:	3328      	adds	r3, #40	; 0x28
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fd23 	bl	8003ec8 <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800348e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800349a:	663b      	str	r3, [r7, #96]	; 0x60
 800349c:	2300      	movs	r3, #0
 800349e:	667b      	str	r3, [r7, #100]	; 0x64
 80034a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80034a4:	460b      	mov	r3, r1
 80034a6:	4313      	orrs	r3, r2
 80034a8:	d038      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80034aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034b6:	d018      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80034b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034bc:	d811      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80034be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c2:	d014      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c8:	d80b      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d011      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80034ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d2:	d106      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d4:	4bc3      	ldr	r3, [pc, #780]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4ac2      	ldr	r2, [pc, #776]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80034e0:	e008      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80034f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034fc:	4bb9      	ldr	r3, [pc, #740]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	4ab5      	ldr	r2, [pc, #724]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800350e:	430b      	orrs	r3, r1
 8003510:	6553      	str	r3, [r2, #84]	; 0x54
 8003512:	e003      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003518:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800351c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003528:	65bb      	str	r3, [r7, #88]	; 0x58
 800352a:	2300      	movs	r3, #0
 800352c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003532:	460b      	mov	r3, r1
 8003534:	4313      	orrs	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003538:	4baa      	ldr	r3, [pc, #680]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003546:	4aa7      	ldr	r2, [pc, #668]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003558:	653b      	str	r3, [r7, #80]	; 0x50
 800355a:	2300      	movs	r3, #0
 800355c:	657b      	str	r3, [r7, #84]	; 0x54
 800355e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003568:	4b9e      	ldr	r3, [pc, #632]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a9b      	ldr	r2, [pc, #620]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800357c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
 800358a:	2300      	movs	r3, #0
 800358c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800358e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003598:	4b92      	ldr	r3, [pc, #584]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80035a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a6:	4a8f      	ldr	r2, [pc, #572]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80035b8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ba:	2300      	movs	r3, #0
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
 80035be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035c8:	4b86      	ldr	r3, [pc, #536]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	4a85      	ldr	r2, [pc, #532]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035d2:	6113      	str	r3, [r2, #16]
 80035d4:	4b83      	ldr	r3, [pc, #524]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035d6:	6919      	ldr	r1, [r3, #16]
 80035d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035e0:	4a80      	ldr	r2, [pc, #512]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f4:	2300      	movs	r3, #0
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003602:	4b78      	ldr	r3, [pc, #480]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	4a74      	ldr	r2, [pc, #464]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003612:	430b      	orrs	r3, r1
 8003614:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
 8003624:	2300      	movs	r3, #0
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
 8003628:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003632:	4b6c      	ldr	r3, [pc, #432]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003642:	4a68      	ldr	r2, [pc, #416]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003644:	430b      	orrs	r3, r1
 8003646:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	2100      	movs	r1, #0
 8003652:	62b9      	str	r1, [r7, #40]	; 0x28
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	d011      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003668:	3308      	adds	r3, #8
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fb79 	bl	8003d64 <RCCEx_PLL2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003678:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003684:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	2100      	movs	r1, #0
 8003692:	6239      	str	r1, [r7, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d011      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a8:	3308      	adds	r3, #8
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fb59 	bl	8003d64 <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80036c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	2100      	movs	r1, #0
 80036d2:	61b9      	str	r1, [r7, #24]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80036de:	460b      	mov	r3, r1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	d011      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e8:	3308      	adds	r3, #8
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fb39 	bl	8003d64 <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003704:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	2100      	movs	r1, #0
 8003712:	6139      	str	r1, [r7, #16]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	d011      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003728:	3328      	adds	r3, #40	; 0x28
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fbcb 	bl	8003ec8 <RCCEx_PLL3_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003744:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	2100      	movs	r1, #0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d011      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003768:	3328      	adds	r3, #40	; 0x28
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fbab 	bl	8003ec8 <RCCEx_PLL3_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003778:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003784:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	2100      	movs	r1, #0
 8003792:	6039      	str	r1, [r7, #0]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800379e:	460b      	mov	r3, r1
 80037a0:	4313      	orrs	r3, r2
 80037a2:	d011      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a8:	3328      	adds	r3, #40	; 0x28
 80037aa:	2102      	movs	r1, #2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fb8b 	bl	8003ec8 <RCCEx_PLL3_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80037c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e2:	bf00      	nop
 80037e4:	58024400 	.word	0x58024400

080037e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80037ec:	f7fe fde2 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4904      	ldr	r1, [pc, #16]	; (8003810 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	58024400 	.word	0x58024400
 8003810:	08005800 	.word	0x08005800

08003814 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800381c:	4ba1      	ldr	r3, [pc, #644]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003826:	4b9f      	ldr	r3, [pc, #636]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	0b1b      	lsrs	r3, r3, #12
 800382c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003830:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003832:	4b9c      	ldr	r3, [pc, #624]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800383e:	4b99      	ldr	r3, [pc, #612]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8111 	beq.w	8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	f000 8083 	beq.w	8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b02      	cmp	r3, #2
 800386e:	f200 80a1 	bhi.w	80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d056      	beq.n	800392c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800387e:	e099      	b.n	80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003880:	4b88      	ldr	r3, [pc, #544]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02d      	beq.n	80038e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800388c:	4b85      	ldr	r3, [pc, #532]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	4a84      	ldr	r2, [pc, #528]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
 800389c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b6:	4b7b      	ldr	r3, [pc, #492]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80038e6:	e087      	b.n	80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fa:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390a:	ed97 6a03 	vldr	s12, [r7, #12]
 800390e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800392a:	e065      	b.n	80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003936:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800393a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393e:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003952:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800396e:	e043      	b.n	80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800397e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003982:	4b48      	ldr	r3, [pc, #288]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003992:	ed97 6a03 	vldr	s12, [r7, #12]
 8003996:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800399a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800399e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039b2:	e021      	b.n	80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039da:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	0a5b      	lsrs	r3, r3, #9
 80039fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a1e:	ee17 2a90 	vmov	r2, s15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4c:	ee17 2a90 	vmov	r2, s15
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	0e1b      	lsrs	r3, r3, #24
 8003a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7a:	ee17 2a90 	vmov	r2, s15
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a82:	e008      	b.n	8003a96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
}
 8003a96:	bf00      	nop
 8003a98:	3724      	adds	r7, #36	; 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	03d09000 	.word	0x03d09000
 8003aac:	46000000 	.word	0x46000000
 8003ab0:	4c742400 	.word	0x4c742400
 8003ab4:	4a742400 	.word	0x4a742400
 8003ab8:	4af42400 	.word	0x4af42400

08003abc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ac4:	4ba1      	ldr	r3, [pc, #644]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ace:	4b9f      	ldr	r3, [pc, #636]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	0d1b      	lsrs	r3, r3, #20
 8003ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ada:	4b9c      	ldr	r3, [pc, #624]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ae6:	4b99      	ldr	r3, [pc, #612]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	08db      	lsrs	r3, r3, #3
 8003aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8111 	beq.w	8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	f000 8083 	beq.w	8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	f200 80a1 	bhi.w	8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d056      	beq.n	8003bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b26:	e099      	b.n	8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b28:	4b88      	ldr	r3, [pc, #544]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02d      	beq.n	8003b90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b34:	4b85      	ldr	r3, [pc, #532]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	08db      	lsrs	r3, r3, #3
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	4a84      	ldr	r2, [pc, #528]	; (8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
 8003b44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5e:	4b7b      	ldr	r3, [pc, #492]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b8e:	e087      	b.n	8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba2:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd2:	e065      	b.n	8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be6:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c16:	e043      	b.n	8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c5a:	e021      	b.n	8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	0a5b      	lsrs	r3, r3, #9
 8003ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc6:	ee17 2a90 	vmov	r2, s15
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003cce:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf4:	ee17 2a90 	vmov	r2, s15
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003cfc:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	0e1b      	lsrs	r3, r3, #24
 8003d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d22:	ee17 2a90 	vmov	r2, s15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d2a:	e008      	b.n	8003d3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	bf00      	nop
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	03d09000 	.word	0x03d09000
 8003d54:	46000000 	.word	0x46000000
 8003d58:	4c742400 	.word	0x4c742400
 8003d5c:	4a742400 	.word	0x4a742400
 8003d60:	4af42400 	.word	0x4af42400

08003d64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d72:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d101      	bne.n	8003d82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e099      	b.n	8003eb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d82:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a4e      	ldr	r2, [pc, #312]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003d88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d8e:	f7fd f891 	bl	8000eb4 <HAL_GetTick>
 8003d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d94:	e008      	b.n	8003da8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d96:	f7fd f88d 	bl	8000eb4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e086      	b.n	8003eb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003da8:	4b45      	ldr	r3, [pc, #276]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f0      	bne.n	8003d96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	493f      	ldr	r1, [pc, #252]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	628b      	str	r3, [r1, #40]	; 0x28
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	025b      	lsls	r3, r3, #9
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	061b      	lsls	r3, r3, #24
 8003df4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003df8:	4931      	ldr	r1, [pc, #196]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dfe:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	492d      	ldr	r1, [pc, #180]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	f023 0220 	bic.w	r2, r3, #32
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	4928      	ldr	r1, [pc, #160]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	4a26      	ldr	r2, [pc, #152]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	f023 0310 	bic.w	r3, r3, #16
 8003e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e2e:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <RCCEx_PLL2_Config+0x160>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	69d2      	ldr	r2, [r2, #28]
 8003e3a:	00d2      	lsls	r2, r2, #3
 8003e3c:	4920      	ldr	r1, [pc, #128]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e48:	f043 0310 	orr.w	r3, r3, #16
 8003e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e60:	e00f      	b.n	8003e82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e74:	e005      	b.n	8003e82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003e88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8e:	f7fd f811 	bl	8000eb4 <HAL_GetTick>
 8003e92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e96:	f7fd f80d 	bl	8000eb4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e006      	b.n	8003eb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <RCCEx_PLL2_Config+0x15c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	ffff0007 	.word	0xffff0007

08003ec8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ed6:	4b53      	ldr	r3, [pc, #332]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d101      	bne.n	8003ee6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e099      	b.n	800401a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ee6:	4b4f      	ldr	r3, [pc, #316]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a4e      	ldr	r2, [pc, #312]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef2:	f7fc ffdf 	bl	8000eb4 <HAL_GetTick>
 8003ef6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003efa:	f7fc ffdb 	bl	8000eb4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e086      	b.n	800401a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f0c:	4b45      	ldr	r3, [pc, #276]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	051b      	lsls	r3, r3, #20
 8003f26:	493f      	ldr	r1, [pc, #252]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	025b      	lsls	r3, r3, #9
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f5c:	4931      	ldr	r1, [pc, #196]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f62:	4b30      	ldr	r3, [pc, #192]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	492d      	ldr	r1, [pc, #180]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4928      	ldr	r1, [pc, #160]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	4a26      	ldr	r2, [pc, #152]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <RCCEx_PLL3_Config+0x160>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	69d2      	ldr	r2, [r2, #28]
 8003f9e:	00d2      	lsls	r2, r2, #3
 8003fa0:	4920      	ldr	r1, [pc, #128]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fc4:	e00f      	b.n	8003fe6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fcc:	4b15      	ldr	r3, [pc, #84]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4a14      	ldr	r2, [pc, #80]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fd8:	e005      	b.n	8003fe6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4a11      	ldr	r2, [pc, #68]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff2:	f7fc ff5f 	bl	8000eb4 <HAL_GetTick>
 8003ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ff8:	e008      	b.n	800400c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ffa:	f7fc ff5b 	bl	8000eb4 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e006      	b.n	800401a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <RCCEx_PLL3_Config+0x15c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
 8004028:	ffff0007 	.word	0xffff0007

0800402c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e04a      	b.n	80040d4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fc fdb1 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2224      	movs	r2, #36	; 0x24
 800405a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8c2 	bl	80041f8 <UART_SetConfig>
 8004074:	4603      	mov	r3, r0
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e02a      	b.n	80040d4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 ff22 	bl	8004ed0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800409a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80040aa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 ffa1 	bl	8005014 <UART_CheckIdleState>
 80040d2:	4603      	mov	r3, r0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d17b      	bne.n	80041ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_UART_Transmit+0x26>
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e074      	b.n	80041f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2221      	movs	r2, #33	; 0x21
 8004112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004116:	f7fc fecd 	bl	8000eb4 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	88fa      	ldrh	r2, [r7, #6]
 8004128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004134:	d108      	bne.n	8004148 <HAL_UART_Transmit+0x6c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e003      	b.n	8004150 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004150:	e030      	b.n	80041b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f001 f803 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e03d      	b.n	80041f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10b      	bne.n	8004192 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004188:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	3302      	adds	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	e007      	b.n	80041a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	3301      	adds	r3, #1
 80041a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1c8      	bne.n	8004152 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2200      	movs	r2, #0
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 ffcc 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e006      	b.n	80041f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041fc:	b092      	sub	sp, #72	; 0x48
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	431a      	orrs	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	431a      	orrs	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4313      	orrs	r3, r2
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4bbe      	ldr	r3, [pc, #760]	; (8004520 <UART_SetConfig+0x328>)
 8004228:	4013      	ands	r3, r2
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004230:	430b      	orrs	r3, r1
 8004232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4ab3      	ldr	r2, [pc, #716]	; (8004524 <UART_SetConfig+0x32c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004260:	4313      	orrs	r3, r2
 8004262:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	4baf      	ldr	r3, [pc, #700]	; (8004528 <UART_SetConfig+0x330>)
 800426c:	4013      	ands	r3, r2
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004274:	430b      	orrs	r3, r1
 8004276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	f023 010f 	bic.w	r1, r3, #15
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4aa6      	ldr	r2, [pc, #664]	; (800452c <UART_SetConfig+0x334>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d177      	bne.n	8004388 <UART_SetConfig+0x190>
 8004298:	4ba5      	ldr	r3, [pc, #660]	; (8004530 <UART_SetConfig+0x338>)
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042a0:	2b28      	cmp	r3, #40	; 0x28
 80042a2:	d86d      	bhi.n	8004380 <UART_SetConfig+0x188>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0xb4>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	08004351 	.word	0x08004351
 80042b0:	08004381 	.word	0x08004381
 80042b4:	08004381 	.word	0x08004381
 80042b8:	08004381 	.word	0x08004381
 80042bc:	08004381 	.word	0x08004381
 80042c0:	08004381 	.word	0x08004381
 80042c4:	08004381 	.word	0x08004381
 80042c8:	08004381 	.word	0x08004381
 80042cc:	08004359 	.word	0x08004359
 80042d0:	08004381 	.word	0x08004381
 80042d4:	08004381 	.word	0x08004381
 80042d8:	08004381 	.word	0x08004381
 80042dc:	08004381 	.word	0x08004381
 80042e0:	08004381 	.word	0x08004381
 80042e4:	08004381 	.word	0x08004381
 80042e8:	08004381 	.word	0x08004381
 80042ec:	08004361 	.word	0x08004361
 80042f0:	08004381 	.word	0x08004381
 80042f4:	08004381 	.word	0x08004381
 80042f8:	08004381 	.word	0x08004381
 80042fc:	08004381 	.word	0x08004381
 8004300:	08004381 	.word	0x08004381
 8004304:	08004381 	.word	0x08004381
 8004308:	08004381 	.word	0x08004381
 800430c:	08004369 	.word	0x08004369
 8004310:	08004381 	.word	0x08004381
 8004314:	08004381 	.word	0x08004381
 8004318:	08004381 	.word	0x08004381
 800431c:	08004381 	.word	0x08004381
 8004320:	08004381 	.word	0x08004381
 8004324:	08004381 	.word	0x08004381
 8004328:	08004381 	.word	0x08004381
 800432c:	08004371 	.word	0x08004371
 8004330:	08004381 	.word	0x08004381
 8004334:	08004381 	.word	0x08004381
 8004338:	08004381 	.word	0x08004381
 800433c:	08004381 	.word	0x08004381
 8004340:	08004381 	.word	0x08004381
 8004344:	08004381 	.word	0x08004381
 8004348:	08004381 	.word	0x08004381
 800434c:	08004379 	.word	0x08004379
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e326      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e322      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e31e      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436e:	e31a      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004370:	2320      	movs	r3, #32
 8004372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004376:	e316      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437e:	e312      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004386:	e30e      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a69      	ldr	r2, [pc, #420]	; (8004534 <UART_SetConfig+0x33c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d130      	bne.n	80043f4 <UART_SetConfig+0x1fc>
 8004392:	4b67      	ldr	r3, [pc, #412]	; (8004530 <UART_SetConfig+0x338>)
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	2b05      	cmp	r3, #5
 800439c:	d826      	bhi.n	80043ec <UART_SetConfig+0x1f4>
 800439e:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0x1ac>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	080043bd 	.word	0x080043bd
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	080043cd 	.word	0x080043cd
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c2:	e2f0      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e2ec      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e2e8      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e2e4      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80043dc:	2320      	movs	r3, #32
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e2e0      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e2dc      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f2:	e2d8      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a4f      	ldr	r2, [pc, #316]	; (8004538 <UART_SetConfig+0x340>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d130      	bne.n	8004460 <UART_SetConfig+0x268>
 80043fe:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <UART_SetConfig+0x338>)
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b05      	cmp	r3, #5
 8004408:	d826      	bhi.n	8004458 <UART_SetConfig+0x260>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <UART_SetConfig+0x218>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	08004429 	.word	0x08004429
 8004414:	08004431 	.word	0x08004431
 8004418:	08004439 	.word	0x08004439
 800441c:	08004441 	.word	0x08004441
 8004420:	08004449 	.word	0x08004449
 8004424:	08004451 	.word	0x08004451
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e2ba      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e2b6      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e2b2      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004446:	e2ae      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004448:	2320      	movs	r3, #32
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444e:	e2aa      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004450:	2340      	movs	r3, #64	; 0x40
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004456:	e2a6      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445e:	e2a2      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a35      	ldr	r2, [pc, #212]	; (800453c <UART_SetConfig+0x344>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d130      	bne.n	80044cc <UART_SetConfig+0x2d4>
 800446a:	4b31      	ldr	r3, [pc, #196]	; (8004530 <UART_SetConfig+0x338>)
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	2b05      	cmp	r3, #5
 8004474:	d826      	bhi.n	80044c4 <UART_SetConfig+0x2cc>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x284>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	08004495 	.word	0x08004495
 8004480:	0800449d 	.word	0x0800449d
 8004484:	080044a5 	.word	0x080044a5
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	2300      	movs	r3, #0
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e284      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a2:	e280      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044aa:	e27c      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b2:	e278      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80044b4:	2320      	movs	r3, #32
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ba:	e274      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80044bc:	2340      	movs	r3, #64	; 0x40
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c2:	e270      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ca:	e26c      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1b      	ldr	r2, [pc, #108]	; (8004540 <UART_SetConfig+0x348>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d142      	bne.n	800455c <UART_SetConfig+0x364>
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <UART_SetConfig+0x338>)
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d838      	bhi.n	8004554 <UART_SetConfig+0x35c>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0x2f0>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	08004501 	.word	0x08004501
 80044ec:	08004509 	.word	0x08004509
 80044f0:	08004511 	.word	0x08004511
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004545 	.word	0x08004545
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	2300      	movs	r3, #0
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004506:	e24e      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004508:	2304      	movs	r3, #4
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450e:	e24a      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004510:	2308      	movs	r3, #8
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004516:	e246      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004518:	2310      	movs	r3, #16
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451e:	e242      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004520:	cfff69f3 	.word	0xcfff69f3
 8004524:	58000c00 	.word	0x58000c00
 8004528:	11fff4ff 	.word	0x11fff4ff
 800452c:	40011000 	.word	0x40011000
 8004530:	58024400 	.word	0x58024400
 8004534:	40004400 	.word	0x40004400
 8004538:	40004800 	.word	0x40004800
 800453c:	40004c00 	.word	0x40004c00
 8004540:	40005000 	.word	0x40005000
 8004544:	2320      	movs	r3, #32
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e22c      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800454c:	2340      	movs	r3, #64	; 0x40
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e228      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455a:	e224      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4ab1      	ldr	r2, [pc, #708]	; (8004828 <UART_SetConfig+0x630>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d176      	bne.n	8004654 <UART_SetConfig+0x45c>
 8004566:	4bb1      	ldr	r3, [pc, #708]	; (800482c <UART_SetConfig+0x634>)
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456e:	2b28      	cmp	r3, #40	; 0x28
 8004570:	d86c      	bhi.n	800464c <UART_SetConfig+0x454>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0x380>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	0800461d 	.word	0x0800461d
 800457c:	0800464d 	.word	0x0800464d
 8004580:	0800464d 	.word	0x0800464d
 8004584:	0800464d 	.word	0x0800464d
 8004588:	0800464d 	.word	0x0800464d
 800458c:	0800464d 	.word	0x0800464d
 8004590:	0800464d 	.word	0x0800464d
 8004594:	0800464d 	.word	0x0800464d
 8004598:	08004625 	.word	0x08004625
 800459c:	0800464d 	.word	0x0800464d
 80045a0:	0800464d 	.word	0x0800464d
 80045a4:	0800464d 	.word	0x0800464d
 80045a8:	0800464d 	.word	0x0800464d
 80045ac:	0800464d 	.word	0x0800464d
 80045b0:	0800464d 	.word	0x0800464d
 80045b4:	0800464d 	.word	0x0800464d
 80045b8:	0800462d 	.word	0x0800462d
 80045bc:	0800464d 	.word	0x0800464d
 80045c0:	0800464d 	.word	0x0800464d
 80045c4:	0800464d 	.word	0x0800464d
 80045c8:	0800464d 	.word	0x0800464d
 80045cc:	0800464d 	.word	0x0800464d
 80045d0:	0800464d 	.word	0x0800464d
 80045d4:	0800464d 	.word	0x0800464d
 80045d8:	08004635 	.word	0x08004635
 80045dc:	0800464d 	.word	0x0800464d
 80045e0:	0800464d 	.word	0x0800464d
 80045e4:	0800464d 	.word	0x0800464d
 80045e8:	0800464d 	.word	0x0800464d
 80045ec:	0800464d 	.word	0x0800464d
 80045f0:	0800464d 	.word	0x0800464d
 80045f4:	0800464d 	.word	0x0800464d
 80045f8:	0800463d 	.word	0x0800463d
 80045fc:	0800464d 	.word	0x0800464d
 8004600:	0800464d 	.word	0x0800464d
 8004604:	0800464d 	.word	0x0800464d
 8004608:	0800464d 	.word	0x0800464d
 800460c:	0800464d 	.word	0x0800464d
 8004610:	0800464d 	.word	0x0800464d
 8004614:	0800464d 	.word	0x0800464d
 8004618:	08004645 	.word	0x08004645
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e1c0      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e1bc      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004632:	e1b8      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463a:	e1b4      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800463c:	2320      	movs	r3, #32
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004642:	e1b0      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004644:	2340      	movs	r3, #64	; 0x40
 8004646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464a:	e1ac      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004652:	e1a8      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a75      	ldr	r2, [pc, #468]	; (8004830 <UART_SetConfig+0x638>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d130      	bne.n	80046c0 <UART_SetConfig+0x4c8>
 800465e:	4b73      	ldr	r3, [pc, #460]	; (800482c <UART_SetConfig+0x634>)
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b05      	cmp	r3, #5
 8004668:	d826      	bhi.n	80046b8 <UART_SetConfig+0x4c0>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x478>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004689 	.word	0x08004689
 8004674:	08004691 	.word	0x08004691
 8004678:	08004699 	.word	0x08004699
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468e:	e18a      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004690:	2304      	movs	r3, #4
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004696:	e186      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004698:	2308      	movs	r3, #8
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469e:	e182      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a6:	e17e      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80046a8:	2320      	movs	r3, #32
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ae:	e17a      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80046b0:	2340      	movs	r3, #64	; 0x40
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b6:	e176      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046be:	e172      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5b      	ldr	r2, [pc, #364]	; (8004834 <UART_SetConfig+0x63c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d130      	bne.n	800472c <UART_SetConfig+0x534>
 80046ca:	4b58      	ldr	r3, [pc, #352]	; (800482c <UART_SetConfig+0x634>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d826      	bhi.n	8004724 <UART_SetConfig+0x52c>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0x4e4>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	08004705 	.word	0x08004705
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fa:	e154      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004702:	e150      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470a:	e14c      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004712:	e148      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004714:	2320      	movs	r3, #32
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471a:	e144      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004722:	e140      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472a:	e13c      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <UART_SetConfig+0x640>)
 8004732:	4293      	cmp	r3, r2
 8004734:	f040 8082 	bne.w	800483c <UART_SetConfig+0x644>
 8004738:	4b3c      	ldr	r3, [pc, #240]	; (800482c <UART_SetConfig+0x634>)
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004740:	2b28      	cmp	r3, #40	; 0x28
 8004742:	d86d      	bhi.n	8004820 <UART_SetConfig+0x628>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x554>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	080047f1 	.word	0x080047f1
 8004750:	08004821 	.word	0x08004821
 8004754:	08004821 	.word	0x08004821
 8004758:	08004821 	.word	0x08004821
 800475c:	08004821 	.word	0x08004821
 8004760:	08004821 	.word	0x08004821
 8004764:	08004821 	.word	0x08004821
 8004768:	08004821 	.word	0x08004821
 800476c:	080047f9 	.word	0x080047f9
 8004770:	08004821 	.word	0x08004821
 8004774:	08004821 	.word	0x08004821
 8004778:	08004821 	.word	0x08004821
 800477c:	08004821 	.word	0x08004821
 8004780:	08004821 	.word	0x08004821
 8004784:	08004821 	.word	0x08004821
 8004788:	08004821 	.word	0x08004821
 800478c:	08004801 	.word	0x08004801
 8004790:	08004821 	.word	0x08004821
 8004794:	08004821 	.word	0x08004821
 8004798:	08004821 	.word	0x08004821
 800479c:	08004821 	.word	0x08004821
 80047a0:	08004821 	.word	0x08004821
 80047a4:	08004821 	.word	0x08004821
 80047a8:	08004821 	.word	0x08004821
 80047ac:	08004809 	.word	0x08004809
 80047b0:	08004821 	.word	0x08004821
 80047b4:	08004821 	.word	0x08004821
 80047b8:	08004821 	.word	0x08004821
 80047bc:	08004821 	.word	0x08004821
 80047c0:	08004821 	.word	0x08004821
 80047c4:	08004821 	.word	0x08004821
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004811 	.word	0x08004811
 80047d0:	08004821 	.word	0x08004821
 80047d4:	08004821 	.word	0x08004821
 80047d8:	08004821 	.word	0x08004821
 80047dc:	08004821 	.word	0x08004821
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004821 	.word	0x08004821
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004819 	.word	0x08004819
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e0d6      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fe:	e0d2      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004806:	e0ce      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480e:	e0ca      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004810:	2320      	movs	r3, #32
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004816:	e0c6      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004818:	2340      	movs	r3, #64	; 0x40
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481e:	e0c2      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004826:	e0be      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004828:	40011400 	.word	0x40011400
 800482c:	58024400 	.word	0x58024400
 8004830:	40007800 	.word	0x40007800
 8004834:	40007c00 	.word	0x40007c00
 8004838:	40011800 	.word	0x40011800
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4aad      	ldr	r2, [pc, #692]	; (8004af8 <UART_SetConfig+0x900>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d176      	bne.n	8004934 <UART_SetConfig+0x73c>
 8004846:	4bad      	ldr	r3, [pc, #692]	; (8004afc <UART_SetConfig+0x904>)
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800484e:	2b28      	cmp	r3, #40	; 0x28
 8004850:	d86c      	bhi.n	800492c <UART_SetConfig+0x734>
 8004852:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <UART_SetConfig+0x660>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	080048fd 	.word	0x080048fd
 800485c:	0800492d 	.word	0x0800492d
 8004860:	0800492d 	.word	0x0800492d
 8004864:	0800492d 	.word	0x0800492d
 8004868:	0800492d 	.word	0x0800492d
 800486c:	0800492d 	.word	0x0800492d
 8004870:	0800492d 	.word	0x0800492d
 8004874:	0800492d 	.word	0x0800492d
 8004878:	08004905 	.word	0x08004905
 800487c:	0800492d 	.word	0x0800492d
 8004880:	0800492d 	.word	0x0800492d
 8004884:	0800492d 	.word	0x0800492d
 8004888:	0800492d 	.word	0x0800492d
 800488c:	0800492d 	.word	0x0800492d
 8004890:	0800492d 	.word	0x0800492d
 8004894:	0800492d 	.word	0x0800492d
 8004898:	0800490d 	.word	0x0800490d
 800489c:	0800492d 	.word	0x0800492d
 80048a0:	0800492d 	.word	0x0800492d
 80048a4:	0800492d 	.word	0x0800492d
 80048a8:	0800492d 	.word	0x0800492d
 80048ac:	0800492d 	.word	0x0800492d
 80048b0:	0800492d 	.word	0x0800492d
 80048b4:	0800492d 	.word	0x0800492d
 80048b8:	08004915 	.word	0x08004915
 80048bc:	0800492d 	.word	0x0800492d
 80048c0:	0800492d 	.word	0x0800492d
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	0800492d 	.word	0x0800492d
 80048cc:	0800492d 	.word	0x0800492d
 80048d0:	0800492d 	.word	0x0800492d
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	0800491d 	.word	0x0800491d
 80048dc:	0800492d 	.word	0x0800492d
 80048e0:	0800492d 	.word	0x0800492d
 80048e4:	0800492d 	.word	0x0800492d
 80048e8:	0800492d 	.word	0x0800492d
 80048ec:	0800492d 	.word	0x0800492d
 80048f0:	0800492d 	.word	0x0800492d
 80048f4:	0800492d 	.word	0x0800492d
 80048f8:	08004925 	.word	0x08004925
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004902:	e050      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490a:	e04c      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004912:	e048      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491a:	e044      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800491c:	2320      	movs	r3, #32
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004922:	e040      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492a:	e03c      	b.n	80049a6 <UART_SetConfig+0x7ae>
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004932:	e038      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a71      	ldr	r2, [pc, #452]	; (8004b00 <UART_SetConfig+0x908>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d130      	bne.n	80049a0 <UART_SetConfig+0x7a8>
 800493e:	4b6f      	ldr	r3, [pc, #444]	; (8004afc <UART_SetConfig+0x904>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b05      	cmp	r3, #5
 8004948:	d826      	bhi.n	8004998 <UART_SetConfig+0x7a0>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x758>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	08004969 	.word	0x08004969
 8004954:	08004971 	.word	0x08004971
 8004958:	08004979 	.word	0x08004979
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	2302      	movs	r3, #2
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496e:	e01a      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004976:	e016      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497e:	e012      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004986:	e00e      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004988:	2320      	movs	r3, #32
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498e:	e00a      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004990:	2340      	movs	r3, #64	; 0x40
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004996:	e006      	b.n	80049a6 <UART_SetConfig+0x7ae>
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499e:	e002      	b.n	80049a6 <UART_SetConfig+0x7ae>
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a55      	ldr	r2, [pc, #340]	; (8004b00 <UART_SetConfig+0x908>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f040 80f8 	bne.w	8004ba2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	dc46      	bgt.n	8004a48 <UART_SetConfig+0x850>
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	db75      	blt.n	8004aaa <UART_SetConfig+0x8b2>
 80049be:	3b02      	subs	r3, #2
 80049c0:	2b1e      	cmp	r3, #30
 80049c2:	d872      	bhi.n	8004aaa <UART_SetConfig+0x8b2>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x7d4>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a4f 	.word	0x08004a4f
 80049d0:	08004aab 	.word	0x08004aab
 80049d4:	08004a57 	.word	0x08004a57
 80049d8:	08004aab 	.word	0x08004aab
 80049dc:	08004aab 	.word	0x08004aab
 80049e0:	08004aab 	.word	0x08004aab
 80049e4:	08004a67 	.word	0x08004a67
 80049e8:	08004aab 	.word	0x08004aab
 80049ec:	08004aab 	.word	0x08004aab
 80049f0:	08004aab 	.word	0x08004aab
 80049f4:	08004aab 	.word	0x08004aab
 80049f8:	08004aab 	.word	0x08004aab
 80049fc:	08004aab 	.word	0x08004aab
 8004a00:	08004aab 	.word	0x08004aab
 8004a04:	08004a77 	.word	0x08004a77
 8004a08:	08004aab 	.word	0x08004aab
 8004a0c:	08004aab 	.word	0x08004aab
 8004a10:	08004aab 	.word	0x08004aab
 8004a14:	08004aab 	.word	0x08004aab
 8004a18:	08004aab 	.word	0x08004aab
 8004a1c:	08004aab 	.word	0x08004aab
 8004a20:	08004aab 	.word	0x08004aab
 8004a24:	08004aab 	.word	0x08004aab
 8004a28:	08004aab 	.word	0x08004aab
 8004a2c:	08004aab 	.word	0x08004aab
 8004a30:	08004aab 	.word	0x08004aab
 8004a34:	08004aab 	.word	0x08004aab
 8004a38:	08004aab 	.word	0x08004aab
 8004a3c:	08004aab 	.word	0x08004aab
 8004a40:	08004aab 	.word	0x08004aab
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d02a      	beq.n	8004aa2 <UART_SetConfig+0x8aa>
 8004a4c:	e02d      	b.n	8004aaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a4e:	f7fe fecb 	bl	80037e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a54:	e02f      	b.n	8004ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe feda 	bl	8003814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a64:	e027      	b.n	8004ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a66:	f107 0318 	add.w	r3, r7, #24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f826 	bl	8003abc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a74:	e01f      	b.n	8004ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a76:	4b21      	ldr	r3, [pc, #132]	; (8004afc <UART_SetConfig+0x904>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a82:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <UART_SetConfig+0x904>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <UART_SetConfig+0x90c>)
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a94:	e00f      	b.n	8004ab6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <UART_SetConfig+0x90c>)
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a9a:	e00c      	b.n	8004ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <UART_SetConfig+0x910>)
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa0:	e009      	b.n	8004ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa8:	e005      	b.n	8004ab6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ab4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 81ee 	beq.w	8004e9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <UART_SetConfig+0x914>)
 8004ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ad0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d305      	bcc.n	8004aee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d910      	bls.n	8004b10 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004af4:	e1d1      	b.n	8004e9a <UART_SetConfig+0xca2>
 8004af6:	bf00      	nop
 8004af8:	40011c00 	.word	0x40011c00
 8004afc:	58024400 	.word	0x58024400
 8004b00:	58000c00 	.word	0x58000c00
 8004b04:	03d09000 	.word	0x03d09000
 8004b08:	003d0900 	.word	0x003d0900
 8004b0c:	08005810 	.word	0x08005810
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	2200      	movs	r2, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	60fa      	str	r2, [r7, #12]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	4ac0      	ldr	r2, [pc, #768]	; (8004e20 <UART_SetConfig+0xc28>)
 8004b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2200      	movs	r2, #0
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b32:	f7fb fbdb 	bl	80002ec <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	020b      	lsls	r3, r1, #8
 8004b48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b4c:	0202      	lsls	r2, r0, #8
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	6849      	ldr	r1, [r1, #4]
 8004b52:	0849      	lsrs	r1, r1, #1
 8004b54:	2000      	movs	r0, #0
 8004b56:	460c      	mov	r4, r1
 8004b58:	4605      	mov	r5, r0
 8004b5a:	eb12 0804 	adds.w	r8, r2, r4
 8004b5e:	eb43 0905 	adc.w	r9, r3, r5
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	469a      	mov	sl, r3
 8004b6a:	4693      	mov	fp, r2
 8004b6c:	4652      	mov	r2, sl
 8004b6e:	465b      	mov	r3, fp
 8004b70:	4640      	mov	r0, r8
 8004b72:	4649      	mov	r1, r9
 8004b74:	f7fb fbba 	bl	80002ec <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b86:	d308      	bcc.n	8004b9a <UART_SetConfig+0x9a2>
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	d204      	bcs.n	8004b9a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b96:	60da      	str	r2, [r3, #12]
 8004b98:	e17f      	b.n	8004e9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ba0:	e17b      	b.n	8004e9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004baa:	f040 80bd 	bne.w	8004d28 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004bae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	dc48      	bgt.n	8004c48 <UART_SetConfig+0xa50>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db7b      	blt.n	8004cb2 <UART_SetConfig+0xaba>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d879      	bhi.n	8004cb2 <UART_SetConfig+0xaba>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x9cc>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004c4f 	.word	0x08004c4f
 8004bc8:	08004c57 	.word	0x08004c57
 8004bcc:	08004cb3 	.word	0x08004cb3
 8004bd0:	08004cb3 	.word	0x08004cb3
 8004bd4:	08004c5f 	.word	0x08004c5f
 8004bd8:	08004cb3 	.word	0x08004cb3
 8004bdc:	08004cb3 	.word	0x08004cb3
 8004be0:	08004cb3 	.word	0x08004cb3
 8004be4:	08004c6f 	.word	0x08004c6f
 8004be8:	08004cb3 	.word	0x08004cb3
 8004bec:	08004cb3 	.word	0x08004cb3
 8004bf0:	08004cb3 	.word	0x08004cb3
 8004bf4:	08004cb3 	.word	0x08004cb3
 8004bf8:	08004cb3 	.word	0x08004cb3
 8004bfc:	08004cb3 	.word	0x08004cb3
 8004c00:	08004cb3 	.word	0x08004cb3
 8004c04:	08004c7f 	.word	0x08004c7f
 8004c08:	08004cb3 	.word	0x08004cb3
 8004c0c:	08004cb3 	.word	0x08004cb3
 8004c10:	08004cb3 	.word	0x08004cb3
 8004c14:	08004cb3 	.word	0x08004cb3
 8004c18:	08004cb3 	.word	0x08004cb3
 8004c1c:	08004cb3 	.word	0x08004cb3
 8004c20:	08004cb3 	.word	0x08004cb3
 8004c24:	08004cb3 	.word	0x08004cb3
 8004c28:	08004cb3 	.word	0x08004cb3
 8004c2c:	08004cb3 	.word	0x08004cb3
 8004c30:	08004cb3 	.word	0x08004cb3
 8004c34:	08004cb3 	.word	0x08004cb3
 8004c38:	08004cb3 	.word	0x08004cb3
 8004c3c:	08004cb3 	.word	0x08004cb3
 8004c40:	08004cb3 	.word	0x08004cb3
 8004c44:	08004ca5 	.word	0x08004ca5
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d02e      	beq.n	8004caa <UART_SetConfig+0xab2>
 8004c4c:	e031      	b.n	8004cb2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c4e:	f7fd fbe1 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8004c52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c54:	e033      	b.n	8004cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c56:	f7fd fbf3 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8004c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c5c:	e02f      	b.n	8004cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fdd6 	bl	8003814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c6c:	e027      	b.n	8004cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c6e:	f107 0318 	add.w	r3, r7, #24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe ff22 	bl	8003abc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c7c:	e01f      	b.n	8004cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c7e:	4b69      	ldr	r3, [pc, #420]	; (8004e24 <UART_SetConfig+0xc2c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c8a:	4b66      	ldr	r3, [pc, #408]	; (8004e24 <UART_SetConfig+0xc2c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	4a64      	ldr	r2, [pc, #400]	; (8004e28 <UART_SetConfig+0xc30>)
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c9c:	e00f      	b.n	8004cbe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004c9e:	4b62      	ldr	r3, [pc, #392]	; (8004e28 <UART_SetConfig+0xc30>)
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ca2:	e00c      	b.n	8004cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ca4:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <UART_SetConfig+0xc34>)
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ca8:	e009      	b.n	8004cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb0:	e005      	b.n	8004cbe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80ea 	beq.w	8004e9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	4a55      	ldr	r2, [pc, #340]	; (8004e20 <UART_SetConfig+0xc28>)
 8004ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd8:	005a      	lsls	r2, r3, #1
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	441a      	add	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	2b0f      	cmp	r3, #15
 8004cf0:	d916      	bls.n	8004d20 <UART_SetConfig+0xb28>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d212      	bcs.n	8004d20 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f023 030f 	bic.w	r3, r3, #15
 8004d02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d12:	4313      	orrs	r3, r2
 8004d14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	e0bc      	b.n	8004e9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d26:	e0b8      	b.n	8004e9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	dc4b      	bgt.n	8004dc8 <UART_SetConfig+0xbd0>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f2c0 8087 	blt.w	8004e44 <UART_SetConfig+0xc4c>
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	f200 8084 	bhi.w	8004e44 <UART_SetConfig+0xc4c>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0xb4c>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004dcf 	.word	0x08004dcf
 8004d48:	08004dd7 	.word	0x08004dd7
 8004d4c:	08004e45 	.word	0x08004e45
 8004d50:	08004e45 	.word	0x08004e45
 8004d54:	08004ddf 	.word	0x08004ddf
 8004d58:	08004e45 	.word	0x08004e45
 8004d5c:	08004e45 	.word	0x08004e45
 8004d60:	08004e45 	.word	0x08004e45
 8004d64:	08004def 	.word	0x08004def
 8004d68:	08004e45 	.word	0x08004e45
 8004d6c:	08004e45 	.word	0x08004e45
 8004d70:	08004e45 	.word	0x08004e45
 8004d74:	08004e45 	.word	0x08004e45
 8004d78:	08004e45 	.word	0x08004e45
 8004d7c:	08004e45 	.word	0x08004e45
 8004d80:	08004e45 	.word	0x08004e45
 8004d84:	08004dff 	.word	0x08004dff
 8004d88:	08004e45 	.word	0x08004e45
 8004d8c:	08004e45 	.word	0x08004e45
 8004d90:	08004e45 	.word	0x08004e45
 8004d94:	08004e45 	.word	0x08004e45
 8004d98:	08004e45 	.word	0x08004e45
 8004d9c:	08004e45 	.word	0x08004e45
 8004da0:	08004e45 	.word	0x08004e45
 8004da4:	08004e45 	.word	0x08004e45
 8004da8:	08004e45 	.word	0x08004e45
 8004dac:	08004e45 	.word	0x08004e45
 8004db0:	08004e45 	.word	0x08004e45
 8004db4:	08004e45 	.word	0x08004e45
 8004db8:	08004e45 	.word	0x08004e45
 8004dbc:	08004e45 	.word	0x08004e45
 8004dc0:	08004e45 	.word	0x08004e45
 8004dc4:	08004e37 	.word	0x08004e37
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d037      	beq.n	8004e3c <UART_SetConfig+0xc44>
 8004dcc:	e03a      	b.n	8004e44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7fd fb21 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8004dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004dd4:	e03c      	b.n	8004e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd6:	f7fd fb33 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8004dda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ddc:	e038      	b.n	8004e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fd16 	bl	8003814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dec:	e030      	b.n	8004e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dee:	f107 0318 	add.w	r3, r7, #24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe fe62 	bl	8003abc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dfc:	e028      	b.n	8004e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <UART_SetConfig+0xc2c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d012      	beq.n	8004e30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <UART_SetConfig+0xc2c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <UART_SetConfig+0xc30>)
 8004e16:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e1c:	e018      	b.n	8004e50 <UART_SetConfig+0xc58>
 8004e1e:	bf00      	nop
 8004e20:	08005810 	.word	0x08005810
 8004e24:	58024400 	.word	0x58024400
 8004e28:	03d09000 	.word	0x03d09000
 8004e2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <UART_SetConfig+0xccc>)
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e34:	e00c      	b.n	8004e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <UART_SetConfig+0xcd0>)
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e3a:	e009      	b.n	8004e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e42:	e005      	b.n	8004e50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d021      	beq.n	8004e9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <UART_SetConfig+0xcd4>)
 8004e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e64:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	441a      	add	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	2b0f      	cmp	r3, #15
 8004e7e:	d909      	bls.n	8004e94 <UART_SetConfig+0xc9c>
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e86:	d205      	bcs.n	8004e94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e002      	b.n	8004e9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004eb6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3748      	adds	r7, #72	; 0x48
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec4:	03d09000 	.word	0x03d09000
 8004ec8:	003d0900 	.word	0x003d0900
 8004ecc:	08005810 	.word	0x08005810

08004ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d10a      	bne.n	8004fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b098      	sub	sp, #96	; 0x60
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005024:	f7fb ff46 	bl	8000eb4 <HAL_GetTick>
 8005028:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d12f      	bne.n	8005098 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f88e 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d022      	beq.n	8005098 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005070:	647b      	str	r3, [r7, #68]	; 0x44
 8005072:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e063      	b.n	8005160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d149      	bne.n	800513a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ae:	2200      	movs	r2, #0
 80050b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f857 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03c      	beq.n	800513a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	623b      	str	r3, [r7, #32]
   return(result);
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050de:	633b      	str	r3, [r7, #48]	; 0x30
 80050e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e6      	bne.n	80050c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	60fb      	str	r3, [r7, #12]
   return(result);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	64bb      	str	r3, [r7, #72]	; 0x48
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005112:	61fa      	str	r2, [r7, #28]
 8005114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	617b      	str	r3, [r7, #20]
   return(result);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e5      	bne.n	80050f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e012      	b.n	8005160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3758      	adds	r7, #88	; 0x58
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005178:	e049      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d045      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fb fe97 	bl	8000eb4 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <UART_WaitOnFlagUntilTimeout+0x30>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e048      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d031      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d110      	bne.n	80051da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2208      	movs	r2, #8
 80051be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f839 	bl	8005238 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2208      	movs	r2, #8
 80051ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e029      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e8:	d111      	bne.n	800520e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f81f 	bl	8005238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e00f      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4013      	ands	r3, r2
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	429a      	cmp	r2, r3
 800522a:	d0a6      	beq.n	800517a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005238:	b480      	push	{r7}
 800523a:	b095      	sub	sp, #84	; 0x54
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	643b      	str	r3, [r7, #64]	; 0x40
 8005260:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e6      	bne.n	8005240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3308      	adds	r3, #8
 8005278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	61fb      	str	r3, [r7, #28]
   return(result);
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <UART_EndRxTransfer+0xc8>)
 8005286:	4013      	ands	r3, r2
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d118      	bne.n	80052e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f023 0310 	bic.w	r3, r3, #16
 80052c2:	647b      	str	r3, [r7, #68]	; 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6979      	ldr	r1, [r7, #20]
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	613b      	str	r3, [r7, #16]
   return(result);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e6      	bne.n	80052ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052f4:	bf00      	nop
 80052f6:	3754      	adds	r7, #84	; 0x54
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	effffffe 	.word	0xeffffffe

08005304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_UARTEx_DisableFifoMode+0x16>
 8005316:	2302      	movs	r3, #2
 8005318:	e027      	b.n	800536a <HAL_UARTEx_DisableFifoMode+0x66>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2224      	movs	r2, #36	; 0x24
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800538a:	2302      	movs	r3, #2
 800538c:	e02d      	b.n	80053ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2224      	movs	r2, #36	; 0x24
 800539a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f850 	bl	8005470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005406:	2302      	movs	r3, #2
 8005408:	e02d      	b.n	8005466 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2224      	movs	r2, #36	; 0x24
 8005416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f812 	bl	8005470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005490:	e031      	b.n	80054f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005492:	2310      	movs	r3, #16
 8005494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005496:	2310      	movs	r3, #16
 8005498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	0e5b      	lsrs	r3, r3, #25
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	0f5b      	lsrs	r3, r3, #29
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ba:	7bbb      	ldrb	r3, [r7, #14]
 80054bc:	7b3a      	ldrb	r2, [r7, #12]
 80054be:	4911      	ldr	r1, [pc, #68]	; (8005504 <UARTEx_SetNbDataToProcess+0x94>)
 80054c0:	5c8a      	ldrb	r2, [r1, r2]
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054c6:	7b3a      	ldrb	r2, [r7, #12]
 80054c8:	490f      	ldr	r1, [pc, #60]	; (8005508 <UARTEx_SetNbDataToProcess+0x98>)
 80054ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	7b7a      	ldrb	r2, [r7, #13]
 80054dc:	4909      	ldr	r1, [pc, #36]	; (8005504 <UARTEx_SetNbDataToProcess+0x94>)
 80054de:	5c8a      	ldrb	r2, [r1, r2]
 80054e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054e4:	7b7a      	ldrb	r2, [r7, #13]
 80054e6:	4908      	ldr	r1, [pc, #32]	; (8005508 <UARTEx_SetNbDataToProcess+0x98>)
 80054e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	08005828 	.word	0x08005828
 8005508:	08005830 	.word	0x08005830

0800550c <memset>:
 800550c:	4402      	add	r2, r0
 800550e:	4603      	mov	r3, r0
 8005510:	4293      	cmp	r3, r2
 8005512:	d100      	bne.n	8005516 <memset+0xa>
 8005514:	4770      	bx	lr
 8005516:	f803 1b01 	strb.w	r1, [r3], #1
 800551a:	e7f9      	b.n	8005510 <memset+0x4>

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4d0d      	ldr	r5, [pc, #52]	; (8005554 <__libc_init_array+0x38>)
 8005520:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005522:	1b64      	subs	r4, r4, r5
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	2600      	movs	r6, #0
 8005528:	42a6      	cmp	r6, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	4d0b      	ldr	r5, [pc, #44]	; (800555c <__libc_init_array+0x40>)
 800552e:	4c0c      	ldr	r4, [pc, #48]	; (8005560 <__libc_init_array+0x44>)
 8005530:	f000 f826 	bl	8005580 <_init>
 8005534:	1b64      	subs	r4, r4, r5
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	2600      	movs	r6, #0
 800553a:	42a6      	cmp	r6, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	f855 3b04 	ldr.w	r3, [r5], #4
 8005544:	4798      	blx	r3
 8005546:	3601      	adds	r6, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	f855 3b04 	ldr.w	r3, [r5], #4
 800554e:	4798      	blx	r3
 8005550:	3601      	adds	r6, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	08005840 	.word	0x08005840
 8005558:	08005840 	.word	0x08005840
 800555c:	08005840 	.word	0x08005840
 8005560:	08005844 	.word	0x08005844

08005564 <memcpy>:
 8005564:	440a      	add	r2, r1
 8005566:	4291      	cmp	r1, r2
 8005568:	f100 33ff 	add.w	r3, r0, #4294967295
 800556c:	d100      	bne.n	8005570 <memcpy+0xc>
 800556e:	4770      	bx	lr
 8005570:	b510      	push	{r4, lr}
 8005572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800557a:	4291      	cmp	r1, r2
 800557c:	d1f9      	bne.n	8005572 <memcpy+0xe>
 800557e:	bd10      	pop	{r4, pc}

08005580 <_init>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr

0800558c <_fini>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr
