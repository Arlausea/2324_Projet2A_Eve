
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  24000010  08005824  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  08005824  00020158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f378  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001fbc  00000000  00000000  0002f3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000aa8  00000000  00000000  000313b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000823  00000000  00000000  00031e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f54d  00000000  00000000  00032683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fadf  00000000  00000000  00061bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001328d9  00000000  00000000  000716af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002ae0  00000000  00000000  001a3f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001a6a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005558 	.word	0x08005558

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005558 	.word	0x08005558

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <dyn2_crc>:
#define HUART_SERVO &huart4



unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80005f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005f8:	6019      	str	r1, [r3, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000600:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000604:	4602      	mov	r2, r0
 8000606:	801a      	strh	r2, [r3, #0]
 8000608:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800060c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000610:	460a      	mov	r2, r1
 8000612:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000614:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000618:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <dyn2_crc+0xd8>)
 800061e:	4618      	mov	r0, r3
 8000620:	4611      	mov	r1, r2
 8000622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000626:	461a      	mov	r2, r3
 8000628:	f004 ff88 	bl	800553c <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 800062c:	2300      	movs	r3, #0
 800062e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000632:	e031      	b.n	8000698 <dyn2_crc+0xb0>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000634:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000638:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29a      	uxth	r2, r3
 8000642:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000646:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800064a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800064e:	6809      	ldr	r1, [r1, #0]
 8000650:	440b      	add	r3, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4053      	eors	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000660:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000664:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b21a      	sxth	r2, r3
 800066e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000672:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800067a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4053      	eors	r3, r2
 8000682:	b21a      	sxth	r2, r3
 8000684:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000688:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800068c:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800068e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000692:	3301      	adds	r3, #1
 8000694:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000698:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800069c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80006a0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d3c4      	bcc.n	8000634 <dyn2_crc+0x4c>
	}

	return crc_accum;
 80006aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006ae:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006b2:	881b      	ldrh	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	08005570 	.word	0x08005570

080006c4 <dyn2_send>:

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
void dyn2_send(uint8_t* instruction){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0c4      	sub	sp, #272	; 0x110
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80006d2:	6018      	str	r0, [r3, #0]
	uint8_t instruction_sent[BUFFER_SIZE];
	memcpy(instruction_sent, instruction, BUFFER_SIZE);
 80006d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006d8:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80006dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4610      	mov	r0, r2
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ee:	461a      	mov	r2, r3
 80006f0:	f004 ff24 	bl	800553c <memcpy>
	unsigned short crc = dyn2_crc(0, instruction_sent, BUFFER_SIZE-2);//initializing the message with 4 crc bytes at 0 so we take array_size-2 to not count them in the CRC calculation
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	22fe      	movs	r2, #254	; 0xfe
 80006fa:	4619      	mov	r1, r3
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff73 	bl	80005e8 <dyn2_crc>
 8000702:	4603      	mov	r3, r0
 8000704:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	unsigned char crc_l = (unsigned char)(crc & 0x00FF);
 8000708:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800070c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	unsigned char crc_h = (unsigned char)((crc >> 8) & 0x00FF);
 8000710:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b29b      	uxth	r3, r3
 8000718:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	instruction_sent[BUFFER_SIZE -2]=crc_l;
 800071c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000724:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8000728:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
	instruction_sent[BUFFER_SIZE - 1]=crc_h;
 800072c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000734:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8000738:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	//while(!__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE));
	HAL_UART_Transmit(HUART_SERVO,instruction_sent,BUFFER_SIZE,10);
 800073c:	f107 010c 	add.w	r1, r7, #12
 8000740:	230a      	movs	r3, #10
 8000742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <dyn2_send+0x94>)
 8000748:	f003 fcb4 	bl	80040b4 <HAL_UART_Transmit>
}
 800074c:	bf00      	nop
 800074e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2400002c 	.word	0x2400002c

0800075c <dyn2_led>:
	uint8_t Dynamixel_PING[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x01, 0x00,/*type instruction, ici Ping*/0x01
			/* calcul of CRC after */,0x19,0x4E};
	dyn2_send(Dynamixel_PING);
}
// Status 1 : Led ON, status 0 : Led OFF
void dyn2_led(int status){
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b08b      	sub	sp, #44	; 0x2c
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	uint8_t Dynamixel_LED_ON_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <dyn2_led+0x48>)
 8000766:	f107 0418 	add.w	r4, r7, #24
 800076a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800076c:	c407      	stmia	r4!, {r0, r1, r2}
 800076e:	7023      	strb	r3, [r4, #0]
			/*débutparam, address 65:*/ ,0x41,0x00
			/*value in the address*/,0x01
			/*on calcule le CRC après */,0x00,0x00};

	uint8_t Dynamixel_LED_OFF_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <dyn2_led+0x4c>)
 8000772:	f107 0408 	add.w	r4, r7, #8
 8000776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000778:	c407      	stmia	r4!, {r0, r1, r2}
 800077a:	7023      	strb	r3, [r4, #0]
			/*débutparam, address 65:*/ ,0x41,0x00
			/*value in the address*/,0x00
			/*on calcule le CRC après */,0x00,0x00};


	if(status == 1){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d104      	bne.n	800078c <dyn2_led+0x30>
		dyn2_send(Dynamixel_LED_ON_XL430);
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff9c 	bl	80006c4 <dyn2_send>
	}
	if(status == 0){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d104      	bne.n	800079c <dyn2_led+0x40>
		dyn2_send(Dynamixel_LED_OFF_XL430);
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff94 	bl	80006c4 <dyn2_send>
	}
}
 800079c:	bf00      	nop
 800079e:	372c      	adds	r7, #44	; 0x2c
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	0800577c 	.word	0x0800577c
 80007a8:	0800578c 	.word	0x0800578c

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <MX_GPIO_Init+0x6c>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_GPIO_Init+0x6c>)
 8000800:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	58024400 	.word	0x58024400

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fad2 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f80a 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f7ff ffc0 	bl	80007ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800082c:	f000 f988 	bl	8000b40 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000830:	f000 f93a 	bl	8000aa8 <MX_UART4_Init>
	  //HAL_UART_Transmit(&huart4, "hello", 5, 10);
	  //HAL_UART_Transmit(&huart4,"hello",strlen("hello"),10);
	  //HAL_Delay(100);


	  dyn2_led(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff91 	bl	800075c <dyn2_led>
 800083a:	e7fb      	b.n	8000834 <main+0x18>

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b09c      	sub	sp, #112	; 0x70
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	224c      	movs	r2, #76	; 0x4c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fe4a 	bl	80054e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fe44 	bl	80054e4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <SystemClock_Config+0xe0>)
 800085e:	f04f 32ff 	mov.w	r2, #4294967295
 8000862:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000866:	2004      	movs	r0, #4
 8000868:	f000 fdd4 	bl	8001414 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <SystemClock_Config+0xe4>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <SystemClock_Config+0xe4>)
 8000876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <SystemClock_Config+0xe4>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000888:	bf00      	nop
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <SystemClock_Config+0xe4>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000896:	d1f8      	bne.n	800088a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2301      	movs	r3, #1
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800089c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008ae:	2318      	movs	r3, #24
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008be:	230c      	movs	r3, #12
 80008c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fdfa 	bl	80014c8 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008da:	f000 f823 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	233f      	movs	r3, #63	; 0x3f
 80008e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2102      	movs	r1, #2
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fa12 	bl	8001d2c <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800090e:	f000 f809 	bl	8000924 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3770      	adds	r7, #112	; 0x70
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	58024400 	.word	0x58024400
 8000920:	58024800 	.word	0x58024800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_MspInit+0x30>)
 8000938:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x30>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x30>)
 8000948:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	58024400 	.word	0x58024400

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 fa7c 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <SystemInit+0xd0>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a31      	ldr	r2, [pc, #196]	; (8000a88 <SystemInit+0xd0>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <SystemInit+0xd4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 030f 	and.w	r3, r3, #15
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d807      	bhi.n	80009e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <SystemInit+0xd4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f023 030f 	bic.w	r3, r3, #15
 80009e0:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <SystemInit+0xd4>)
 80009e2:	f043 0303 	orr.w	r3, r3, #3
 80009e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <SystemInit+0xd8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <SystemInit+0xd8>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <SystemInit+0xd8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <SystemInit+0xd8>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4924      	ldr	r1, [pc, #144]	; (8000a90 <SystemInit+0xd8>)
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <SystemInit+0xdc>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <SystemInit+0xd4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f003 030c 	and.w	r3, r3, #12
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d007      	beq.n	8000a22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <SystemInit+0xd4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f023 030f 	bic.w	r3, r3, #15
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <SystemInit+0xd4>)
 8000a1c:	f043 0303 	orr.w	r3, r3, #3
 8000a20:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <SystemInit+0xd8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <SystemInit+0xd8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <SystemInit+0xd8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <SystemInit+0xd8>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <SystemInit+0xe0>)
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <SystemInit+0xd8>)
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <SystemInit+0xe4>)
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <SystemInit+0xd8>)
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <SystemInit+0xe8>)
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <SystemInit+0xd8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <SystemInit+0xd8>)
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <SystemInit+0xe8>)
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <SystemInit+0xd8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <SystemInit+0xd8>)
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <SystemInit+0xe8>)
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <SystemInit+0xd8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <SystemInit+0xd8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <SystemInit+0xd8>)
 8000a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <SystemInit+0xd8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <SystemInit+0xec>)
 8000a78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a7c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	52002000 	.word	0x52002000
 8000a90:	58024400 	.word	0x58024400
 8000a94:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a98:	02020200 	.word	0x02020200
 8000a9c:	01ff0000 	.word	0x01ff0000
 8000aa0:	01010280 	.word	0x01010280
 8000aa4:	52004000 	.word	0x52004000

08000aa8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_UART4_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_UART4_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ab4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ab8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_UART4_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_UART4_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_UART4_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_UART4_Init+0x90>)
 8000af2:	f003 fa87 	bl	8004004 <HAL_HalfDuplex_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000afc:	f7ff ff12 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_UART4_Init+0x90>)
 8000b04:	f004 fc23 	bl	800534e <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f7ff ff09 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <MX_UART4_Init+0x90>)
 8000b16:	f004 fc58 	bl	80053ca <HAL_UARTEx_SetRxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f7ff ff00 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_UART4_Init+0x90>)
 8000b26:	f004 fbd9 	bl	80052dc <HAL_UARTEx_DisableFifoMode>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f7ff fef8 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2400002c 	.word	0x2400002c
 8000b3c:	40004c00 	.word	0x40004c00

08000b40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b46:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <MX_USART3_UART_Init+0x94>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b66:	2208      	movs	r2, #8
 8000b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b8a:	f003 fa3b 	bl	8004004 <HAL_HalfDuplex_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b94:	f7ff fec6 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b9c:	f004 fbd7 	bl	800534e <HAL_UARTEx_SetTxFifoThreshold>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba6:	f7ff febd 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000bae:	f004 fc0c 	bl	80053ca <HAL_UARTEx_SetRxFifoThreshold>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f7ff feb4 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000bbe:	f004 fb8d 	bl	80052dc <HAL_UARTEx_DisableFifoMode>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f7ff feac 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	240000c0 	.word	0x240000c0
 8000bd4:	40004800 	.word	0x40004800

08000bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0bc      	sub	sp, #240	; 0xf0
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	22c0      	movs	r2, #192	; 0xc0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 fc73 	bl	80054e4 <memset>
  if(uartHandle->Instance==UART4)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a58      	ldr	r2, [pc, #352]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d146      	bne.n	8000c96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c08:	f04f 0202 	mov.w	r2, #2
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fc10 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c2a:	f7ff fe7b 	bl	8000924 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c2e:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000c30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c34:	4a4c      	ldr	r2, [pc, #304]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c3a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000c40:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c52:	4a45      	ldr	r2, [pc, #276]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c5c:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000c5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c82:	2308      	movs	r3, #8
 8000c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4837      	ldr	r0, [pc, #220]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000c90:	f000 fa10 	bl	80010b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c94:	e061      	b.n	8000d5a <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a35      	ldr	r2, [pc, #212]	; (8000d70 <HAL_UART_MspInit+0x198>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d15c      	bne.n	8000d5a <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca0:	f04f 0202 	mov.w	r2, #2
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fbc4 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000cc2:	f7ff fe2f 	bl	8000924 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000cc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ccc:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000cd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000ce6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cea:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000cf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d26:	4619      	mov	r1, r3
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d2a:	f000 f9c3 	bl	80010b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d56:	f000 f9ad 	bl	80010b4 <HAL_GPIO_Init>
}
 8000d5a:	bf00      	nop
 8000d5c:	37f0      	adds	r7, #240	; 0xf0
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40004c00 	.word	0x40004c00
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020c00 	.word	0x58020c00
 8000d70:	40004800 	.word	0x40004800

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f7ff fe1e 	bl	80009b8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	; (8000dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f004 fba7 	bl	80054f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fd39 	bl	800081c <main>
  bx  lr
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000db0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000db4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000db8:	08005814 	.word	0x08005814
  ldr r2, =_sbss
 8000dbc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dc0:	24000158 	.word	0x24000158

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f93e 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000dd4:	f001 f960 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_Init+0x68>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4913      	ldr	r1, [pc, #76]	; (8000e34 <HAL_Init+0x6c>)
 8000de6:	5ccb      	ldrb	r3, [r1, r3]
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	fa22 f303 	lsr.w	r3, r2, r3
 8000df0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_Init+0x68>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_Init+0x6c>)
 8000dfc:	5cd3      	ldrb	r3, [r2, r3]
 8000dfe:	f003 031f 	and.w	r3, r3, #31
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_Init+0x70>)
 8000e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_Init+0x74>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f814 	bl	8000e40 <HAL_InitTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e002      	b.n	8000e28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e22:	f7ff fd85 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	58024400 	.word	0x58024400
 8000e34:	080057cc 	.word	0x080057cc
 8000e38:	24000004 	.word	0x24000004
 8000e3c:	24000000 	.word	0x24000000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e021      	b.n	8000e98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_InitTick+0x64>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_InitTick+0x60>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f915 	bl	800109a <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f8ed 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x68>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2400000c 	.word	0x2400000c
 8000ea4:	24000000 	.word	0x24000000
 8000ea8:	24000008 	.word	0x24000008

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2400000c 	.word	0x2400000c
 8000ed0:	24000154 	.word	0x24000154

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	24000154 	.word	0x24000154

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff47 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff5e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff90 	bl	8000fa4 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5f 	bl	8000f50 <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffb2 	bl	800100c <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010c2:	4b89      	ldr	r3, [pc, #548]	; (80012e8 <HAL_GPIO_Init+0x234>)
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010c6:	e194      	b.n	80013f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8186 	beq.w	80013ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <HAL_GPIO_Init+0x44>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	f003 0201 	and.w	r2, r3, #1
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b03      	cmp	r3, #3
 8001164:	d017      	beq.n	8001196 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80e0 	beq.w	80013ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_GPIO_Init+0x238>)
 800122e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001232:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <HAL_GPIO_Init+0x238>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_GPIO_Init+0x238>)
 800123e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <HAL_GPIO_Init+0x23c>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <HAL_GPIO_Init+0x240>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d052      	beq.n	800131c <HAL_GPIO_Init+0x268>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_GPIO_Init+0x244>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d031      	beq.n	80012e2 <HAL_GPIO_Init+0x22e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_GPIO_Init+0x248>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x22a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x24c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x226>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_GPIO_Init+0x250>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x222>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_GPIO_Init+0x254>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x21e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1a      	ldr	r2, [pc, #104]	; (800130c <HAL_GPIO_Init+0x258>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_GPIO_Init+0x25c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x216>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_GPIO_Init+0x260>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x212>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_GPIO_Init+0x264>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x20e>
 80012be:	2309      	movs	r3, #9
 80012c0:	e02d      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012c2:	230a      	movs	r3, #10
 80012c4:	e02b      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012c6:	2308      	movs	r3, #8
 80012c8:	e029      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012ca:	2307      	movs	r3, #7
 80012cc:	e027      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012ce:	2306      	movs	r3, #6
 80012d0:	e025      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012d2:	2305      	movs	r3, #5
 80012d4:	e023      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e021      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012da:	2303      	movs	r3, #3
 80012dc:	e01f      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012de:	2302      	movs	r3, #2
 80012e0:	e01d      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e01b      	b.n	800131e <HAL_GPIO_Init+0x26a>
 80012e6:	bf00      	nop
 80012e8:	58000080 	.word	0x58000080
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58000400 	.word	0x58000400
 80012f4:	58020000 	.word	0x58020000
 80012f8:	58020400 	.word	0x58020400
 80012fc:	58020800 	.word	0x58020800
 8001300:	58020c00 	.word	0x58020c00
 8001304:	58021000 	.word	0x58021000
 8001308:	58021400 	.word	0x58021400
 800130c:	58021800 	.word	0x58021800
 8001310:	58021c00 	.word	0x58021c00
 8001314:	58022000 	.word	0x58022000
 8001318:	58022400 	.word	0x58022400
 800131c:	2300      	movs	r3, #0
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132e:	4938      	ldr	r1, [pc, #224]	; (8001410 <HAL_GPIO_Init+0x35c>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800136a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f47f ae63 	bne.w	80010c8 <HAL_GPIO_Init+0x14>
  }
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	3724      	adds	r7, #36	; 0x24
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	58000400 	.word	0x58000400

08001414 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	2b06      	cmp	r3, #6
 8001426:	d00a      	beq.n	800143e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	d001      	beq.n	800143a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e040      	b.n	80014bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e03e      	b.n	80014bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001446:	491f      	ldr	r1, [pc, #124]	; (80014c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800144e:	f7ff fd41 	bl	8000ed4 <HAL_GetTick>
 8001452:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001454:	e009      	b.n	800146a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001456:	f7ff fd3d 	bl	8000ed4 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001464:	d901      	bls.n	800146a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e028      	b.n	80014bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001476:	d1ee      	bne.n	8001456 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b1e      	cmp	r3, #30
 800147c:	d008      	beq.n	8001490 <HAL_PWREx_ConfigSupply+0x7c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b2e      	cmp	r3, #46	; 0x2e
 8001482:	d005      	beq.n	8001490 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b1d      	cmp	r3, #29
 8001488:	d002      	beq.n	8001490 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b2d      	cmp	r3, #45	; 0x2d
 800148e:	d114      	bne.n	80014ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001490:	f7ff fd20 	bl	8000ed4 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001496:	e009      	b.n	80014ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001498:	f7ff fd1c 	bl	8000ed4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a6:	d901      	bls.n	80014ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e007      	b.n	80014bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b8:	d1ee      	bne.n	8001498 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	58024800 	.word	0x58024800

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f000 bc1f 	b.w	8001d1a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80b3 	beq.w	8001650 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ea:	4b95      	ldr	r3, [pc, #596]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d007      	beq.n	8001510 <HAL_RCC_OscConfig+0x48>
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	2b18      	cmp	r3, #24
 8001504:	d112      	bne.n	800152c <HAL_RCC_OscConfig+0x64>
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d10d      	bne.n	800152c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b8b      	ldr	r3, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8098 	beq.w	800164e <HAL_RCC_OscConfig+0x186>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 8093 	bne.w	800164e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e3f6      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x7c>
 8001536:	4b82      	ldr	r3, [pc, #520]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a81      	ldr	r2, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e058      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d112      	bne.n	8001572 <HAL_RCC_OscConfig+0xaa>
 800154c:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a7b      	ldr	r2, [pc, #492]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b79      	ldr	r3, [pc, #484]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a78      	ldr	r2, [pc, #480]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800155e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b76      	ldr	r3, [pc, #472]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a75      	ldr	r2, [pc, #468]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e041      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157a:	d112      	bne.n	80015a2 <HAL_RCC_OscConfig+0xda>
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6c      	ldr	r2, [pc, #432]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800158e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a69      	ldr	r2, [pc, #420]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800159a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e029      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80015aa:	d112      	bne.n	80015d2 <HAL_RCC_OscConfig+0x10a>
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a63      	ldr	r2, [pc, #396]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b61      	ldr	r3, [pc, #388]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a60      	ldr	r2, [pc, #384]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a5d      	ldr	r2, [pc, #372]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e011      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
 80015d2:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b55      	ldr	r3, [pc, #340]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a54      	ldr	r2, [pc, #336]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80015f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d013      	beq.n	8001626 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff fc69 	bl	8000ed4 <HAL_GetTick>
 8001602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001606:	f7ff fc65 	bl	8000ed4 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e380      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001618:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x13e>
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fc55 	bl	8000ed4 <HAL_GetTick>
 800162a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162e:	f7ff fc51 	bl	8000ed4 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e36c      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001640:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x166>
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 808c 	beq.w	8001776 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001666:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_RCC_OscConfig+0x1bc>
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	2b18      	cmp	r3, #24
 8001678:	d137      	bne.n	80016ea <HAL_RCC_OscConfig+0x222>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d132      	bne.n	80016ea <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_OscConfig+0x1d4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e33e      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0219 	bic.w	r2, r3, #25
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4925      	ldr	r1, [pc, #148]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fc11 	bl	8000ed4 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fc0d 	bl	8000ed4 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e328      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4917      	ldr	r1, [pc, #92]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	e045      	b.n	8001776 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d028      	beq.n	8001744 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 0219 	bic.w	r2, r3, #25
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	4910      	ldr	r1, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fbe6 	bl	8000ed4 <HAL_GetTick>
 8001708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fbe2 	bl	8000ed4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e2fd      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	061b      	lsls	r3, r3, #24
 8001738:	4901      	ldr	r1, [pc, #4]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e01a      	b.n	8001776 <HAL_RCC_OscConfig+0x2ae>
 8001740:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001744:	4b97      	ldr	r3, [pc, #604]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a96      	ldr	r2, [pc, #600]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fbc0 	bl	8000ed4 <HAL_GetTick>
 8001754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fbbc 	bl	8000ed4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e2d7      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800176a:	4b8e      	ldr	r3, [pc, #568]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d06a      	beq.n	8001858 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001782:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800178a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800178c:	4b85      	ldr	r3, [pc, #532]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d007      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2e0>
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b18      	cmp	r3, #24
 800179c:	d11b      	bne.n	80017d6 <HAL_RCC_OscConfig+0x30e>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d116      	bne.n	80017d6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017a8:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2f8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b80      	cmp	r3, #128	; 0x80
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e2ac      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	4975      	ldr	r1, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017d4:	e040      	b.n	8001858 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d023      	beq.n	8001826 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb73 	bl	8000ed4 <HAL_GetTick>
 80017ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017f2:	f7ff fb6f 	bl	8000ed4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e28a      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001804:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001810:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	4961      	ldr	r1, [pc, #388]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	60cb      	str	r3, [r1, #12]
 8001824:	e018      	b.n	8001858 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a5e      	ldr	r2, [pc, #376]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800182c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fb4f 	bl	8000ed4 <HAL_GetTick>
 8001836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800183a:	f7ff fb4b 	bl	8000ed4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e266      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800184c:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d036      	beq.n	80018d2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d019      	beq.n	80018a0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fb2c 	bl	8000ed4 <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fb28 	bl	8000ed4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e243      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x3b8>
 800189e:	e018      	b.n	80018d2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fb12 	bl	8000ed4 <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fb0e 	bl	8000ed4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e229      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d036      	beq.n	800194c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018f2:	f7ff faef 	bl	8000ed4 <HAL_GetTick>
 80018f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fa:	f7ff faeb 	bl	8000ed4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e206      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x432>
 8001918:	e018      	b.n	800194c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001924:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001926:	f7ff fad5 	bl	8000ed4 <HAL_GetTick>
 800192a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192e:	f7ff fad1 	bl	8000ed4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1ec      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80af 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_RCC_OscConfig+0x4e0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_RCC_OscConfig+0x4e0>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001966:	f7ff fab5 	bl	8000ed4 <HAL_GetTick>
 800196a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff fab1 	bl	8000ed4 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b64      	cmp	r3, #100	; 0x64
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1cc      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_OscConfig+0x4e0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10b      	bne.n	80019ac <HAL_RCC_OscConfig+0x4e4>
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	4a02      	ldr	r2, [pc, #8]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6713      	str	r3, [r2, #112]	; 0x70
 80019a0:	e05b      	b.n	8001a5a <HAL_RCC_OscConfig+0x592>
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400
 80019a8:	58024800 	.word	0x58024800
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d112      	bne.n	80019da <HAL_RCC_OscConfig+0x512>
 80019b4:	4b9d      	ldr	r3, [pc, #628]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a9c      	ldr	r2, [pc, #624]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	4b9a      	ldr	r3, [pc, #616]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a99      	ldr	r2, [pc, #612]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
 80019cc:	4b97      	ldr	r3, [pc, #604]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a96      	ldr	r2, [pc, #600]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
 80019d8:	e03f      	b.n	8001a5a <HAL_RCC_OscConfig+0x592>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d112      	bne.n	8001a08 <HAL_RCC_OscConfig+0x540>
 80019e2:	4b92      	ldr	r3, [pc, #584]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a91      	ldr	r2, [pc, #580]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
 80019ee:	4b8f      	ldr	r3, [pc, #572]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a8e      	ldr	r2, [pc, #568]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	4b8c      	ldr	r3, [pc, #560]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a8b      	ldr	r2, [pc, #556]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	e028      	b.n	8001a5a <HAL_RCC_OscConfig+0x592>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b85      	cmp	r3, #133	; 0x85
 8001a0e:	d112      	bne.n	8001a36 <HAL_RCC_OscConfig+0x56e>
 8001a10:	4b86      	ldr	r3, [pc, #536]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a85      	ldr	r2, [pc, #532]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b83      	ldr	r3, [pc, #524]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a82      	ldr	r2, [pc, #520]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
 8001a28:	4b80      	ldr	r3, [pc, #512]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	4a7f      	ldr	r2, [pc, #508]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	; 0x70
 8001a34:	e011      	b.n	8001a5a <HAL_RCC_OscConfig+0x592>
 8001a36:	4b7d      	ldr	r3, [pc, #500]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a7c      	ldr	r2, [pc, #496]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b7a      	ldr	r3, [pc, #488]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a79      	ldr	r2, [pc, #484]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	4b77      	ldr	r3, [pc, #476]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a76      	ldr	r2, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa37 	bl	8000ed4 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fa33 	bl	8000ed4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e14c      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a80:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x5a2>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fa21 	bl	8000ed4 <HAL_GetTick>
 8001a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fa1d 	bl	8000ed4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e136      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aac:	4b5f      	ldr	r3, [pc, #380]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 812b 	beq.w	8001d18 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aca:	2b18      	cmp	r3, #24
 8001acc:	f000 80bb 	beq.w	8001c46 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	f040 8095 	bne.w	8001c04 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b54      	ldr	r3, [pc, #336]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a53      	ldr	r2, [pc, #332]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f9f5 	bl	8000ed4 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f9f1 	bl	8000ed4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e10c      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b00:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b10:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_OscConfig+0x768>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	4942      	ldr	r1, [pc, #264]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	628b      	str	r3, [r1, #40]	; 0x28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	3b01      	subs	r3, #1
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	3b01      	subs	r3, #1
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b56:	4935      	ldr	r1, [pc, #212]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_OscConfig+0x76c>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	492d      	ldr	r1, [pc, #180]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f023 020c 	bic.w	r2, r3, #12
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	4928      	ldr	r1, [pc, #160]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	f023 0202 	bic.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4924      	ldr	r1, [pc, #144]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f97a 	bl	8000ed4 <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f976 	bl	8000ed4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e091      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x71c>
 8001c02:	e089      	b.n	8001d18 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f960 	bl	8000ed4 <HAL_GetTick>
 8001c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c16:	e00f      	b.n	8001c38 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f95c 	bl	8000ed4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d908      	bls.n	8001c38 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e077      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
 8001c2a:	bf00      	nop
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	fffffc0c 	.word	0xfffffc0c
 8001c34:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1e9      	bne.n	8001c18 <HAL_RCC_OscConfig+0x750>
 8001c44:	e068      	b.n	8001d18 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d031      	beq.n	8001cbe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d12a      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d122      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d11a      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	0a5b      	lsrs	r3, r3, #9
 8001c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d111      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d108      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0e1b      	lsrs	r3, r3, #24
 8001cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e02b      	b.n	8001d1a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ccc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d01f      	beq.n	8001d18 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce4:	f7ff f8f6 	bl	8000ed4 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001cea:	bf00      	nop
 8001cec:	f7ff f8f2 	bl	8000ed4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d0f9      	beq.n	8001cec <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_OscConfig+0x860>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d04:	00d2      	lsls	r2, r2, #3
 8001d06:	4907      	ldr	r1, [pc, #28]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_RCC_OscConfig+0x85c>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3730      	adds	r7, #48	; 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	58024400 	.word	0x58024400
 8001d28:	ffff0007 	.word	0xffff0007

08001d2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e19c      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b8a      	ldr	r3, [pc, #552]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d910      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b87      	ldr	r3, [pc, #540]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 020f 	bic.w	r2, r3, #15
 8001d56:	4985      	ldr	r1, [pc, #532]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b83      	ldr	r3, [pc, #524]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e184      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d908      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d8c:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4975      	ldr	r1, [pc, #468]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d010      	beq.n	8001dcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d908      	bls.n	8001dcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dba:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	496a      	ldr	r1, [pc, #424]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d908      	bls.n	8001dfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	495e      	ldr	r1, [pc, #376]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d908      	bls.n	8001e28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e16:	4b56      	ldr	r3, [pc, #344]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4953      	ldr	r1, [pc, #332]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d908      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f023 020f 	bic.w	r2, r3, #15
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4947      	ldr	r1, [pc, #284]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d055      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4940      	ldr	r1, [pc, #256]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d121      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0f6      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d115      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0ea      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0de      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d6      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f023 0207 	bic.w	r2, r3, #7
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4925      	ldr	r1, [pc, #148]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ede:	f7fe fff9 	bl	8000ed4 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7fe fff5 	bl	8000ed4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0be      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efc:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d1eb      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d208      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f023 020f 	bic.w	r2, r3, #15
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <HAL_RCC_ClockConfig+0x244>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d214      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 020f 	bic.w	r2, r3, #15
 8001f52:	4906      	ldr	r1, [pc, #24]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_RCC_ClockConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e086      	b.n	800207a <HAL_RCC_ClockConfig+0x34e>
 8001f6c:	52002000 	.word	0x52002000
 8001f70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d010      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d208      	bcs.n	8001fa2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f90:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	4939      	ldr	r1, [pc, #228]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d010      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d208      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	492e      	ldr	r1, [pc, #184]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d208      	bcs.n	8001ffe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4922      	ldr	r1, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d010      	beq.n	800202c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002016:	429a      	cmp	r2, r3
 8002018:	d208      	bcs.n	800202c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4917      	ldr	r1, [pc, #92]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8002028:	4313      	orrs	r3, r2
 800202a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800202c:	f000 f834 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	4912      	ldr	r1, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x35c>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_RCC_ClockConfig+0x358>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <HAL_RCC_ClockConfig+0x35c>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x360>)
 8002062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x364>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x368>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fee6 	bl	8000e40 <HAL_InitTick>
 8002074:	4603      	mov	r3, r0
 8002076:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	58024400 	.word	0x58024400
 8002088:	080057cc 	.word	0x080057cc
 800208c:	24000004 	.word	0x24000004
 8002090:	24000000 	.word	0x24000000
 8002094:	24000008 	.word	0x24000008

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800209e:	4bb3      	ldr	r3, [pc, #716]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a6:	2b18      	cmp	r3, #24
 80020a8:	f200 8155 	bhi.w	8002356 <HAL_RCC_GetSysClockFreq+0x2be>
 80020ac:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b2:	bf00      	nop
 80020b4:	08002119 	.word	0x08002119
 80020b8:	08002357 	.word	0x08002357
 80020bc:	08002357 	.word	0x08002357
 80020c0:	08002357 	.word	0x08002357
 80020c4:	08002357 	.word	0x08002357
 80020c8:	08002357 	.word	0x08002357
 80020cc:	08002357 	.word	0x08002357
 80020d0:	08002357 	.word	0x08002357
 80020d4:	0800213f 	.word	0x0800213f
 80020d8:	08002357 	.word	0x08002357
 80020dc:	08002357 	.word	0x08002357
 80020e0:	08002357 	.word	0x08002357
 80020e4:	08002357 	.word	0x08002357
 80020e8:	08002357 	.word	0x08002357
 80020ec:	08002357 	.word	0x08002357
 80020f0:	08002357 	.word	0x08002357
 80020f4:	08002145 	.word	0x08002145
 80020f8:	08002357 	.word	0x08002357
 80020fc:	08002357 	.word	0x08002357
 8002100:	08002357 	.word	0x08002357
 8002104:	08002357 	.word	0x08002357
 8002108:	08002357 	.word	0x08002357
 800210c:	08002357 	.word	0x08002357
 8002110:	08002357 	.word	0x08002357
 8002114:	0800214b 	.word	0x0800214b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002118:	4b94      	ldr	r3, [pc, #592]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002124:	4b91      	ldr	r3, [pc, #580]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	4a90      	ldr	r2, [pc, #576]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002136:	e111      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002138:	4b8d      	ldr	r3, [pc, #564]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800213a:	61bb      	str	r3, [r7, #24]
      break;
 800213c:	e10e      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800213e:	4b8d      	ldr	r3, [pc, #564]	; (8002374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002140:	61bb      	str	r3, [r7, #24]
      break;
 8002142:	e10b      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002144:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002146:	61bb      	str	r3, [r7, #24]
      break;
 8002148:	e108      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800214a:	4b88      	ldr	r3, [pc, #544]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002154:	4b85      	ldr	r3, [pc, #532]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800215e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002160:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800216a:	4b80      	ldr	r3, [pc, #512]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	08db      	lsrs	r3, r3, #3
 8002170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002182:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80e1 	beq.w	8002350 <HAL_RCC_GetSysClockFreq+0x2b8>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b02      	cmp	r3, #2
 8002192:	f000 8083 	beq.w	800229c <HAL_RCC_GetSysClockFreq+0x204>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b02      	cmp	r3, #2
 800219a:	f200 80a1 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x248>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x114>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d056      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021aa:	e099      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021ac:	4b6f      	ldr	r3, [pc, #444]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d02d      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021b8:	4b6c      	ldr	r3, [pc, #432]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	4a6b      	ldr	r2, [pc, #428]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021e2:	4b62      	ldr	r3, [pc, #392]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800237c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002212:	e087      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002236:	ed97 6a02 	vldr	s12, [r7, #8]
 800223a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800237c <HAL_RCC_GetSysClockFreq+0x2e4>
 800223e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800224a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002256:	e065      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002262:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002384 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800226a:	4b40      	ldr	r3, [pc, #256]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800227a:	ed97 6a02 	vldr	s12, [r7, #8]
 800227e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800237c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800228a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800228e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800229a:	e043      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002388 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022be:	ed97 6a02 	vldr	s12, [r7, #8]
 80022c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800237c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022de:	e021      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002384 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002302:	ed97 6a02 	vldr	s12, [r7, #8]
 8002306:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800237c <HAL_RCC_GetSysClockFreq+0x2e4>
 800230a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800230e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002322:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	0a5b      	lsrs	r3, r3, #9
 800232a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800232e:	3301      	adds	r3, #1
 8002330:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800233c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002348:	ee17 3a90 	vmov	r3, s15
 800234c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800234e:	e005      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
      break;
 8002354:	e002      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002358:	61bb      	str	r3, [r7, #24]
      break;
 800235a:	bf00      	nop
  }

  return sysclockfreq;
 800235c:	69bb      	ldr	r3, [r7, #24]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	58024400 	.word	0x58024400
 8002370:	03d09000 	.word	0x03d09000
 8002374:	003d0900 	.word	0x003d0900
 8002378:	007a1200 	.word	0x007a1200
 800237c:	46000000 	.word	0x46000000
 8002380:	4c742400 	.word	0x4c742400
 8002384:	4a742400 	.word	0x4a742400
 8002388:	4af42400 	.word	0x4af42400

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002392:	f7ff fe81 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCC_GetHCLKFreq+0x50>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490f      	ldr	r1, [pc, #60]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_RCC_GetHCLKFreq+0x50>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80023c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	58024400 	.word	0x58024400
 80023e0:	080057cc 	.word	0x080057cc
 80023e4:	24000004 	.word	0x24000004
 80023e8:	24000000 	.word	0x24000000

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80023f0:	f7ff ffcc 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	58024400 	.word	0x58024400
 8002414:	080057cc 	.word	0x080057cc

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800241c:	f7ff ffb6 	bl	800238c <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	58024400 	.word	0x58024400
 8002440:	080057cc 	.word	0x080057cc

08002444 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002448:	b0c8      	sub	sp, #288	; 0x120
 800244a:	af00      	add	r7, sp, #0
 800244c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002450:	2300      	movs	r3, #0
 8002452:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002456:	2300      	movs	r3, #0
 8002458:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800245c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002468:	2500      	movs	r5, #0
 800246a:	ea54 0305 	orrs.w	r3, r4, r5
 800246e:	d049      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002476:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800247a:	d02f      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800247c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002480:	d828      	bhi.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002486:	d01a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800248c:	d822      	bhi.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002496:	d007      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002498:	e01c      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800249a:	4ba7      	ldr	r3, [pc, #668]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	4aa6      	ldr	r2, [pc, #664]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024a6:	e01a      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ac:	3308      	adds	r3, #8
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 fc43 	bl	8003d3c <RCCEx_PLL2_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024bc:	e00f      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80024be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024c2:	3328      	adds	r3, #40	; 0x28
 80024c4:	2102      	movs	r1, #2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f001 fcea 	bl	8003ea0 <RCCEx_PLL3_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024d2:	e004      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80024da:	e000      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80024dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024e6:	4b94      	ldr	r3, [pc, #592]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80024ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	4a90      	ldr	r2, [pc, #576]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f6:	430b      	orrs	r3, r1
 80024f8:	6513      	str	r3, [r2, #80]	; 0x50
 80024fa:	e003      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002500:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002510:	f04f 0900 	mov.w	r9, #0
 8002514:	ea58 0309 	orrs.w	r3, r8, r9
 8002518:	d047      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800251a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	2b04      	cmp	r3, #4
 8002522:	d82a      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002524:	a201      	add	r2, pc, #4	; (adr r2, 800252c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	08002541 	.word	0x08002541
 8002530:	0800254f 	.word	0x0800254f
 8002534:	08002565 	.word	0x08002565
 8002538:	08002583 	.word	0x08002583
 800253c:	08002583 	.word	0x08002583
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002540:	4b7d      	ldr	r3, [pc, #500]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	4a7c      	ldr	r2, [pc, #496]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800254c:	e01a      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800254e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002552:	3308      	adds	r3, #8
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f001 fbf0 	bl	8003d3c <RCCEx_PLL2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002562:	e00f      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002568:	3328      	adds	r3, #40	; 0x28
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fc97 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002572:	4603      	mov	r3, r0
 8002574:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002578:	e004      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002580:	e000      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002584:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800258c:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800258e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002590:	f023 0107 	bic.w	r1, r3, #7
 8002594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4a67      	ldr	r2, [pc, #412]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259c:	430b      	orrs	r3, r1
 800259e:	6513      	str	r3, [r2, #80]	; 0x50
 80025a0:	e003      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80025aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80025b6:	f04f 0b00 	mov.w	fp, #0
 80025ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80025be:	d054      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80025c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025ca:	d036      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80025cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025d0:	d82f      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d6:	d032      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025dc:	d829      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025de:	2bc0      	cmp	r3, #192	; 0xc0
 80025e0:	d02f      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80025e2:	2bc0      	cmp	r3, #192	; 0xc0
 80025e4:	d825      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d018      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d821      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d007      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80025f6:	e01c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f8:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	4a4e      	ldr	r2, [pc, #312]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002604:	e01e      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260a:	3308      	adds	r3, #8
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f001 fb94 	bl	8003d3c <RCCEx_PLL2_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800261a:	e013      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800261c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002620:	3328      	adds	r3, #40	; 0x28
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f001 fc3b 	bl	8003ea0 <RCCEx_PLL3_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002630:	e008      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002638:	e004      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002650:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	4a37      	ldr	r2, [pc, #220]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800265c:	430b      	orrs	r3, r1
 800265e:	6513      	str	r3, [r2, #80]	; 0x50
 8002660:	e003      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002662:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002666:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800266a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002676:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002680:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002684:	460b      	mov	r3, r1
 8002686:	4313      	orrs	r3, r2
 8002688:	d05c      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800268a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800268e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002690:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002694:	d03b      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002696:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800269a:	d834      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800269c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a0:	d037      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80026a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a6:	d82e      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026ac:	d033      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80026ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026b2:	d828      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b8:	d01a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	d822      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80026c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c8:	d007      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x296>
 80026ca:	e01c      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80026d8:	e01e      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026de:	3308      	adds	r3, #8
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f001 fb2a 	bl	8003d3c <RCCEx_PLL2_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80026ee:	e013      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f4:	3328      	adds	r3, #40	; 0x28
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 fbd1 	bl	8003ea0 <RCCEx_PLL3_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002704:	e008      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800270c:	e004      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002724:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	4a02      	ldr	r2, [pc, #8]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002730:	430b      	orrs	r3, r1
 8002732:	6513      	str	r3, [r2, #80]	; 0x50
 8002734:	e006      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002736:	bf00      	nop
 8002738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002740:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002750:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800275a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800275e:	460b      	mov	r3, r1
 8002760:	4313      	orrs	r3, r2
 8002762:	d03a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	2b30      	cmp	r3, #48	; 0x30
 800276c:	d01f      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800276e:	2b30      	cmp	r3, #48	; 0x30
 8002770:	d819      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002772:	2b20      	cmp	r3, #32
 8002774:	d00c      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002776:	2b20      	cmp	r3, #32
 8002778:	d815      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d019      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800277e:	2b10      	cmp	r3, #16
 8002780:	d111      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002782:	4bae      	ldr	r3, [pc, #696]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	4aad      	ldr	r2, [pc, #692]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800278e:	e011      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002794:	3308      	adds	r3, #8
 8002796:	2102      	movs	r1, #2
 8002798:	4618      	mov	r0, r3
 800279a:	f001 facf 	bl	8003d3c <RCCEx_PLL2_Config>
 800279e:	4603      	mov	r3, r0
 80027a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027a4:	e006      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027ac:	e002      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80027b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027bc:	4b9f      	ldr	r3, [pc, #636]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80027c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	4a9c      	ldr	r2, [pc, #624]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027cc:	430b      	orrs	r3, r1
 80027ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d0:	e003      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80027e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80027f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	d051      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80027fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002804:	d035      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280a:	d82e      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800280c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002810:	d031      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002812:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002816:	d828      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d01a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	d822      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282c:	d007      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800282e:	e01c      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4b82      	ldr	r3, [pc, #520]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	4a81      	ldr	r2, [pc, #516]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800283c:	e01c      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800283e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002842:	3308      	adds	r3, #8
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f001 fa78 	bl	8003d3c <RCCEx_PLL2_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002852:	e011      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002858:	3328      	adds	r3, #40	; 0x28
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fb1f 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002868:	e006      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002870:	e002      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002880:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800288c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800288e:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002890:	430b      	orrs	r3, r1
 8002892:	6513      	str	r3, [r2, #80]	; 0x50
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002896:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800289a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800289e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80028aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80028b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80028b8:	460b      	mov	r3, r1
 80028ba:	4313      	orrs	r3, r2
 80028bc:	d053      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80028be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d033      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80028ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ce:	d82c      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d4:	d02f      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80028d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028da:	d826      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028e0:	d02b      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028e6:	d820      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ec:	d012      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80028ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f2:	d81a      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d022      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d115      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002902:	3308      	adds	r3, #8
 8002904:	2101      	movs	r1, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fa18 	bl	8003d3c <RCCEx_PLL2_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002912:	e015      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002918:	3328      	adds	r3, #40	; 0x28
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f001 fabf 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002928:	e00a      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002930:	e006      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002932:	bf00      	nop
 8002934:	e004      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002936:	bf00      	nop
 8002938:	e002      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800293e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002940:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002948:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002956:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002958:	430b      	orrs	r3, r1
 800295a:	6513      	str	r3, [r2, #80]	; 0x50
 800295c:	e003      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002962:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002972:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800297c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002980:	460b      	mov	r3, r1
 8002982:	4313      	orrs	r3, r2
 8002984:	d060      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800298a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800298e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002992:	d039      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002994:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002998:	d832      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800299a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299e:	d035      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80029a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a4:	d82c      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d031      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d826      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029b6:	d02d      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80029b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029bc:	d820      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c2:	d012      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d81a      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80029ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d2:	d115      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029d8:	3308      	adds	r3, #8
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 f9ad 	bl	8003d3c <RCCEx_PLL2_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029e8:	e017      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ee:	3328      	adds	r3, #40	; 0x28
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 fa54 	bl	8003ea0 <RCCEx_PLL3_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029fe:	e00c      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a06:	e008      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a08:	bf00      	nop
 8002a0a:	e006      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a0c:	bf00      	nop
 8002a0e:	e004      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a10:	bf00      	nop
 8002a12:	e002      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a14:	bf00      	nop
 8002a16:	e000      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10e      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a32:	4a02      	ldr	r2, [pc, #8]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6593      	str	r3, [r2, #88]	; 0x58
 8002a38:	e006      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002a3a:	bf00      	nop
 8002a3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a62:	460b      	mov	r3, r1
 8002a64:	4313      	orrs	r3, r2
 8002a66:	d037      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a72:	d00e      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a78:	d816      	bhi.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d018      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a82:	d111      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a84:	4bc4      	ldr	r3, [pc, #784]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	4ac3      	ldr	r2, [pc, #780]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a90:	e00f      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a96:	3308      	adds	r3, #8
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 f94e 	bl	8003d3c <RCCEx_PLL2_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002aa6:	e004      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002aae:	e000      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002aba:	4bb7      	ldr	r3, [pc, #732]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac8:	4ab3      	ldr	r2, [pc, #716]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aca:	430b      	orrs	r3, r1
 8002acc:	6513      	str	r3, [r2, #80]	; 0x50
 8002ace:	e003      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ad4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002aee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4313      	orrs	r3, r2
 8002af6:	d039      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d81c      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b45 	.word	0x08002b45
 8002b0c:	08002b19 	.word	0x08002b19
 8002b10:	08002b27 	.word	0x08002b27
 8002b14:	08002b45 	.word	0x08002b45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b18:	4b9f      	ldr	r3, [pc, #636]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	4a9e      	ldr	r2, [pc, #632]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b24:	e00f      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f904 	bl	8003d3c <RCCEx_PLL2_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b3a:	e004      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b4e:	4b92      	ldr	r3, [pc, #584]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f023 0103 	bic.w	r1, r3, #3
 8002b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5c:	4a8e      	ldr	r2, [pc, #568]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b62:	e003      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002b86:	460b      	mov	r3, r1
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f000 8099 	beq.w	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8e:	4b83      	ldr	r3, [pc, #524]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a82      	ldr	r2, [pc, #520]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b9a:	f7fe f99b 	bl	8000ed4 <HAL_GetTick>
 8002b9e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fe f996 	bl	8000ed4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d903      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bba:	e005      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bbc:	4b77      	ldr	r3, [pc, #476]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ed      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d173      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bd0:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bdc:	4053      	eors	r3, r2
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d015      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be6:	4b6c      	ldr	r3, [pc, #432]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bf2:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a68      	ldr	r2, [pc, #416]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfe:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a65      	ldr	r2, [pc, #404]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c0a:	4a63      	ldr	r2, [pc, #396]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	d118      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe f958 	bl	8000ed4 <HAL_GetTick>
 8002c24:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c28:	e00d      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe f953 	bl	8000ed4 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c34:	1ad2      	subs	r2, r2, r3
 8002c36:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d903      	bls.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002c44:	e005      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c46:	4b54      	ldr	r3, [pc, #336]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0eb      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002c52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d129      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c6a:	d10e      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c7c:	091a      	lsrs	r2, r3, #4
 8002c7e:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	4a45      	ldr	r2, [pc, #276]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6113      	str	r3, [r2, #16]
 8002c88:	e005      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	4a42      	ldr	r2, [pc, #264]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c94:	6113      	str	r3, [r2, #16]
 8002c96:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	e008      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cb2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002cb6:	e003      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f002 0301 	and.w	r3, r2, #1
 8002ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f000 8090 	beq.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cea:	2b28      	cmp	r3, #40	; 0x28
 8002cec:	d870      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002dd9 	.word	0x08002dd9
 8002cf8:	08002dd1 	.word	0x08002dd1
 8002cfc:	08002dd1 	.word	0x08002dd1
 8002d00:	08002dd1 	.word	0x08002dd1
 8002d04:	08002dd1 	.word	0x08002dd1
 8002d08:	08002dd1 	.word	0x08002dd1
 8002d0c:	08002dd1 	.word	0x08002dd1
 8002d10:	08002dd1 	.word	0x08002dd1
 8002d14:	08002da5 	.word	0x08002da5
 8002d18:	08002dd1 	.word	0x08002dd1
 8002d1c:	08002dd1 	.word	0x08002dd1
 8002d20:	08002dd1 	.word	0x08002dd1
 8002d24:	08002dd1 	.word	0x08002dd1
 8002d28:	08002dd1 	.word	0x08002dd1
 8002d2c:	08002dd1 	.word	0x08002dd1
 8002d30:	08002dd1 	.word	0x08002dd1
 8002d34:	08002dbb 	.word	0x08002dbb
 8002d38:	08002dd1 	.word	0x08002dd1
 8002d3c:	08002dd1 	.word	0x08002dd1
 8002d40:	08002dd1 	.word	0x08002dd1
 8002d44:	08002dd1 	.word	0x08002dd1
 8002d48:	08002dd1 	.word	0x08002dd1
 8002d4c:	08002dd1 	.word	0x08002dd1
 8002d50:	08002dd1 	.word	0x08002dd1
 8002d54:	08002dd9 	.word	0x08002dd9
 8002d58:	08002dd1 	.word	0x08002dd1
 8002d5c:	08002dd1 	.word	0x08002dd1
 8002d60:	08002dd1 	.word	0x08002dd1
 8002d64:	08002dd1 	.word	0x08002dd1
 8002d68:	08002dd1 	.word	0x08002dd1
 8002d6c:	08002dd1 	.word	0x08002dd1
 8002d70:	08002dd1 	.word	0x08002dd1
 8002d74:	08002dd9 	.word	0x08002dd9
 8002d78:	08002dd1 	.word	0x08002dd1
 8002d7c:	08002dd1 	.word	0x08002dd1
 8002d80:	08002dd1 	.word	0x08002dd1
 8002d84:	08002dd1 	.word	0x08002dd1
 8002d88:	08002dd1 	.word	0x08002dd1
 8002d8c:	08002dd1 	.word	0x08002dd1
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002dd9 	.word	0x08002dd9
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	58024800 	.word	0x58024800
 8002da0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da8:	3308      	adds	r3, #8
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 ffc5 	bl	8003d3c <RCCEx_PLL2_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002db8:	e00f      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dbe:	3328      	adds	r3, #40	; 0x28
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f86c 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002dce:	e004      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002de2:	4bc0      	ldr	r3, [pc, #768]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df2:	4abc      	ldr	r2, [pc, #752]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6553      	str	r3, [r2, #84]	; 0x54
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f002 0302 	and.w	r3, r2, #2
 8002e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e18:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d043      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d824      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e4d 	.word	0x08002e4d
 8002e3c:	08002e63 	.word	0x08002e63
 8002e40:	08002e81 	.word	0x08002e81
 8002e44:	08002e81 	.word	0x08002e81
 8002e48:	08002e81 	.word	0x08002e81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e50:	3308      	adds	r3, #8
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 ff71 	bl	8003d3c <RCCEx_PLL2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e60:	e00f      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e66:	3328      	adds	r3, #40	; 0x28
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 f818 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e8a:	4b96      	ldr	r3, [pc, #600]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f023 0107 	bic.w	r1, r3, #7
 8002e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e9a:	4a92      	ldr	r2, [pc, #584]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6553      	str	r3, [r2, #84]	; 0x54
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ea6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f002 0304 	and.w	r3, r2, #4
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	d043      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d824      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f29 	.word	0x08002f29
 8002ee0:	08002ef5 	.word	0x08002ef5
 8002ee4:	08002f0b 	.word	0x08002f0b
 8002ee8:	08002f29 	.word	0x08002f29
 8002eec:	08002f29 	.word	0x08002f29
 8002ef0:	08002f29 	.word	0x08002f29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef8:	3308      	adds	r3, #8
 8002efa:	2101      	movs	r1, #1
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 ff1d 	bl	8003d3c <RCCEx_PLL2_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f08:	e00f      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f0e:	3328      	adds	r3, #40	; 0x28
 8002f10:	2101      	movs	r1, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 ffc4 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f1e:	e004      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f32:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f023 0107 	bic.w	r1, r3, #7
 8002f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f42:	4a68      	ldr	r2, [pc, #416]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6593      	str	r3, [r2, #88]	; 0x58
 8002f48:	e003      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f002 0320 	and.w	r3, r2, #32
 8002f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	d055      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7e:	d033      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f84:	d82c      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8a:	d02f      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d826      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f96:	d02b      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002f98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f9c:	d820      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa2:	d012      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa8:	d81a      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d022      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fb8:	3308      	adds	r3, #8
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 febd 	bl	8003d3c <RCCEx_PLL2_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fce:	3328      	adds	r3, #40	; 0x28
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 ff64 	bl	8003ea0 <RCCEx_PLL3_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fe6:	e006      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e004      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002fec:	bf00      	nop
 8002fee:	e002      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ff0:	bf00      	nop
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10b      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ffe:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800300a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800300e:	4a35      	ldr	r2, [pc, #212]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003010:	430b      	orrs	r3, r1
 8003012:	6553      	str	r3, [r2, #84]	; 0x54
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003016:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800301a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800302a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003034:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003038:	460b      	mov	r3, r1
 800303a:	4313      	orrs	r3, r2
 800303c:	d058      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003046:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800304a:	d033      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800304c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003050:	d82c      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	d02f      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305c:	d826      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800305e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003062:	d02b      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003068:	d820      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800306a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306e:	d012      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003074:	d81a      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d022      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d115      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003084:	3308      	adds	r3, #8
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fe57 	bl	8003d3c <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003094:	e015      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309a:	3328      	adds	r3, #40	; 0x28
 800309c:	2102      	movs	r1, #2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fefe 	bl	8003ea0 <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030aa:	e00a      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030b2:	e006      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030b4:	bf00      	nop
 80030b6:	e004      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030b8:	bf00      	nop
 80030ba:	e002      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80030c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10e      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80030d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030da:	4a02      	ldr	r2, [pc, #8]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
 80030e0:	e006      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80030e2:	bf00      	nop
 80030e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80030fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003106:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800310a:	460b      	mov	r3, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	d055      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003118:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800311c:	d033      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800311e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003122:	d82c      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003128:	d02f      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800312a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312e:	d826      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003130:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003134:	d02b      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003136:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800313a:	d820      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800313c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003140:	d012      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003146:	d81a      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d022      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800314c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003150:	d115      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003156:	3308      	adds	r3, #8
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fdee 	bl	8003d3c <RCCEx_PLL2_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003166:	e015      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316c:	3328      	adds	r3, #40	; 0x28
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fe95 	bl	8003ea0 <RCCEx_PLL3_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800317c:	e00a      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003184:	e006      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003186:	bf00      	nop
 8003188:	e004      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003194:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800319c:	4ba1      	ldr	r3, [pc, #644]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80031a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031ac:	4a9d      	ldr	r2, [pc, #628]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031ae:	430b      	orrs	r3, r1
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
 80031b2:	e003      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80031bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f002 0308 	and.w	r3, r2, #8
 80031c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80031d6:	460b      	mov	r3, r1
 80031d8:	4313      	orrs	r3, r2
 80031da:	d01e      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80031dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ee:	3328      	adds	r3, #40	; 0x28
 80031f0:	2102      	movs	r1, #2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fe54 	bl	8003ea0 <RCCEx_PLL3_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003204:	4b87      	ldr	r3, [pc, #540]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800320c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003214:	4a83      	ldr	r2, [pc, #524]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003216:	430b      	orrs	r3, r1
 8003218:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800321a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f002 0310 	and.w	r3, r2, #16
 8003226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003230:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003234:	460b      	mov	r3, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	d01e      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800323a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d10c      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324c:	3328      	adds	r3, #40	; 0x28
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fe25 	bl	8003ea0 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003262:	4b70      	ldr	r3, [pc, #448]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800326a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003272:	4a6c      	ldr	r2, [pc, #432]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003274:	430b      	orrs	r3, r1
 8003276:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800328e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003292:	460b      	mov	r3, r1
 8003294:	4313      	orrs	r3, r2
 8003296:	d03e      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a4:	d022      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80032a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032aa:	d81b      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d00b      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80032b6:	e015      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032bc:	3308      	adds	r3, #8
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fd3b 	bl	8003d3c <RCCEx_PLL2_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032cc:	e00f      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d2:	3328      	adds	r3, #40	; 0x28
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fde2 	bl	8003ea0 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f6:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003302:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003306:	4a47      	ldr	r2, [pc, #284]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003312:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003322:	67bb      	str	r3, [r7, #120]	; 0x78
 8003324:	2300      	movs	r3, #0
 8003326:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003328:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800332c:	460b      	mov	r3, r1
 800332e:	4313      	orrs	r3, r2
 8003330:	d03b      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800333e:	d01f      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003340:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003344:	d818      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334a:	d003      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800334c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003350:	d007      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003352:	e011      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	4a32      	ldr	r2, [pc, #200]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800335a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003360:	e00f      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003366:	3328      	adds	r3, #40	; 0x28
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd98 	bl	8003ea0 <RCCEx_PLL3_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003376:	e004      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003382:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800339c:	430b      	orrs	r3, r1
 800339e:	6553      	str	r3, [r2, #84]	; 0x54
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80033b6:	673b      	str	r3, [r7, #112]	; 0x70
 80033b8:	2300      	movs	r3, #0
 80033ba:	677b      	str	r3, [r7, #116]	; 0x74
 80033bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80033c0:	460b      	mov	r3, r1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	d034      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80033c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d007      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80033d6:	e011      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	4a11      	ldr	r2, [pc, #68]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033e4:	e00e      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ea:	3308      	adds	r3, #8
 80033ec:	2102      	movs	r1, #2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fca4 	bl	8003d3c <RCCEx_PLL2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033fa:	e003      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003404:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341a:	4a02      	ldr	r2, [pc, #8]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800341c:	430b      	orrs	r3, r1
 800341e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003422:	bf00      	nop
 8003424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800342c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800343c:	66bb      	str	r3, [r7, #104]	; 0x68
 800343e:	2300      	movs	r3, #0
 8003440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003442:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	d00c      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800344c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003450:	3328      	adds	r3, #40	; 0x28
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fd23 	bl	8003ea0 <RCCEx_PLL3_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003472:	663b      	str	r3, [r7, #96]	; 0x60
 8003474:	2300      	movs	r3, #0
 8003476:	667b      	str	r3, [r7, #100]	; 0x64
 8003478:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800347c:	460b      	mov	r3, r1
 800347e:	4313      	orrs	r3, r2
 8003480:	d038      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800348e:	d018      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003494:	d811      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349a:	d014      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d80b      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d011      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034aa:	d106      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ac:	4bc3      	ldr	r3, [pc, #780]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	4ac2      	ldr	r2, [pc, #776]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034c0:	e004      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80034c2:	bf00      	nop
 80034c4:	e002      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80034ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d4:	4bb9      	ldr	r3, [pc, #740]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	4ab5      	ldr	r2, [pc, #724]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034e6:	430b      	orrs	r3, r1
 80034e8:	6553      	str	r3, [r2, #84]	; 0x54
 80034ea:	e003      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003500:	65bb      	str	r3, [r7, #88]	; 0x58
 8003502:	2300      	movs	r3, #0
 8003504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003506:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800350a:	460b      	mov	r3, r1
 800350c:	4313      	orrs	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003510:	4baa      	ldr	r3, [pc, #680]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003514:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800351c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351e:	4aa7      	ldr	r2, [pc, #668]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003520:	430b      	orrs	r3, r1
 8003522:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003530:	653b      	str	r3, [r7, #80]	; 0x50
 8003532:	2300      	movs	r3, #0
 8003534:	657b      	str	r3, [r7, #84]	; 0x54
 8003536:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800353a:	460b      	mov	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003540:	4b9e      	ldr	r3, [pc, #632]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a9b      	ldr	r2, [pc, #620]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003560:	64bb      	str	r3, [r7, #72]	; 0x48
 8003562:	2300      	movs	r3, #0
 8003564:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003566:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003570:	4b92      	ldr	r3, [pc, #584]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	4a8f      	ldr	r2, [pc, #572]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
 8003592:	2300      	movs	r3, #0
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
 8003596:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800359a:	460b      	mov	r3, r1
 800359c:	4313      	orrs	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035a0:	4b86      	ldr	r3, [pc, #536]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4a85      	ldr	r2, [pc, #532]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035aa:	6113      	str	r3, [r2, #16]
 80035ac:	4b83      	ldr	r3, [pc, #524]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ae:	6919      	ldr	r1, [r3, #16]
 80035b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035b8:	4a80      	ldr	r2, [pc, #512]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80035ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80035cc:	2300      	movs	r3, #0
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035da:	4b78      	ldr	r3, [pc, #480]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80035e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	4a74      	ldr	r2, [pc, #464]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ea:	430b      	orrs	r3, r1
 80035ec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800360a:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361a:	4a68      	ldr	r2, [pc, #416]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	2100      	movs	r1, #0
 800362a:	62b9      	str	r1, [r7, #40]	; 0x28
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003632:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d011      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003640:	3308      	adds	r3, #8
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fb79 	bl	8003d3c <RCCEx_PLL2_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800365c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	2100      	movs	r1, #0
 800366a:	6239      	str	r1, [r7, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003676:	460b      	mov	r3, r1
 8003678:	4313      	orrs	r3, r2
 800367a:	d011      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003680:	3308      	adds	r3, #8
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fb59 	bl	8003d3c <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003690:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800369c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	2100      	movs	r1, #0
 80036aa:	61b9      	str	r1, [r7, #24]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80036b6:	460b      	mov	r3, r1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	d011      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c0:	3308      	adds	r3, #8
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fb39 	bl	8003d3c <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80036e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	2100      	movs	r1, #0
 80036ea:	6139      	str	r1, [r7, #16]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80036f6:	460b      	mov	r3, r1
 80036f8:	4313      	orrs	r3, r2
 80036fa:	d011      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003700:	3328      	adds	r3, #40	; 0x28
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fbcb 	bl	8003ea0 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003710:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800371c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	2100      	movs	r1, #0
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d011      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800373c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003740:	3328      	adds	r3, #40	; 0x28
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fbab 	bl	8003ea0 <RCCEx_PLL3_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800375c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	2100      	movs	r1, #0
 800376a:	6039      	str	r1, [r7, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003776:	460b      	mov	r3, r1
 8003778:	4313      	orrs	r3, r2
 800377a:	d011      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800377c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003780:	3328      	adds	r3, #40	; 0x28
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fb8b 	bl	8003ea0 <RCCEx_PLL3_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800379c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80037a0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80037b4:	46bd      	mov	sp, r7
 80037b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ba:	bf00      	nop
 80037bc:	58024400 	.word	0x58024400

080037c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80037c4:	f7fe fde2 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4904      	ldr	r1, [pc, #16]	; (80037e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	58024400 	.word	0x58024400
 80037e8:	080057cc 	.word	0x080057cc

080037ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037f4:	4ba1      	ldr	r3, [pc, #644]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80037fe:	4b9f      	ldr	r3, [pc, #636]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	0b1b      	lsrs	r3, r3, #12
 8003804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003808:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800380a:	4b9c      	ldr	r3, [pc, #624]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003816:	4b99      	ldr	r3, [pc, #612]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	08db      	lsrs	r3, r3, #3
 800381c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8111 	beq.w	8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b02      	cmp	r3, #2
 800383e:	f000 8083 	beq.w	8003948 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b02      	cmp	r3, #2
 8003846:	f200 80a1 	bhi.w	800398c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d056      	beq.n	8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003856:	e099      	b.n	800398c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003858:	4b88      	ldr	r3, [pc, #544]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02d      	beq.n	80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003864:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	4a84      	ldr	r2, [pc, #528]	; (8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389e:	ed97 6a03 	vldr	s12, [r7, #12]
 80038a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80038be:	e087      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d2:	4b6a      	ldr	r3, [pc, #424]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003902:	e065      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003926:	ed97 6a03 	vldr	s12, [r7, #12]
 800392a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800392e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800393a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800393e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003946:	e043      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395a:	4b48      	ldr	r3, [pc, #288]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396a:	ed97 6a03 	vldr	s12, [r7, #12]
 800396e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800397e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800398a:	e021      	b.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800399a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80039b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	0a5b      	lsrs	r3, r3, #9
 80039d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f6:	ee17 2a90 	vmov	r2, s15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a24:	ee17 2a90 	vmov	r2, s15
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a52:	ee17 2a90 	vmov	r2, s15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a5a:	e008      	b.n	8003a6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
}
 8003a6e:	bf00      	nop
 8003a70:	3724      	adds	r7, #36	; 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	03d09000 	.word	0x03d09000
 8003a84:	46000000 	.word	0x46000000
 8003a88:	4c742400 	.word	0x4c742400
 8003a8c:	4a742400 	.word	0x4a742400
 8003a90:	4af42400 	.word	0x4af42400

08003a94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a9c:	4ba1      	ldr	r3, [pc, #644]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003aa6:	4b9f      	ldr	r3, [pc, #636]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	0d1b      	lsrs	r3, r3, #20
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ab2:	4b9c      	ldr	r3, [pc, #624]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003abe:	4b99      	ldr	r3, [pc, #612]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	08db      	lsrs	r3, r3, #3
 8003ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8111 	beq.w	8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	f000 8083 	beq.w	8003bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	f200 80a1 	bhi.w	8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d056      	beq.n	8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003afe:	e099      	b.n	8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b00:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02d      	beq.n	8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b0c:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	08db      	lsrs	r3, r3, #3
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	4a84      	ldr	r2, [pc, #528]	; (8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b66:	e087      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003baa:	e065      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbe:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bee:	e043      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c02:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c32:	e021      	b.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c78:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	0a5b      	lsrs	r3, r3, #9
 8003c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c9e:	ee17 2a90 	vmov	r2, s15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ccc:	ee17 2a90 	vmov	r2, s15
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	0e1b      	lsrs	r3, r3, #24
 8003cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfa:	ee17 2a90 	vmov	r2, s15
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d02:	e008      	b.n	8003d16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	bf00      	nop
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	03d09000 	.word	0x03d09000
 8003d2c:	46000000 	.word	0x46000000
 8003d30:	4c742400 	.word	0x4c742400
 8003d34:	4a742400 	.word	0x4a742400
 8003d38:	4af42400 	.word	0x4af42400

08003d3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d101      	bne.n	8003d5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e099      	b.n	8003e8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d5a:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4e      	ldr	r2, [pc, #312]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d66:	f7fd f8b5 	bl	8000ed4 <HAL_GetTick>
 8003d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d6e:	f7fd f8b1 	bl	8000ed4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e086      	b.n	8003e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d80:	4b45      	ldr	r3, [pc, #276]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d8c:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	493f      	ldr	r1, [pc, #252]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	628b      	str	r3, [r1, #40]	; 0x28
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	025b      	lsls	r3, r3, #9
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dd0:	4931      	ldr	r1, [pc, #196]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	492d      	ldr	r1, [pc, #180]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	f023 0220 	bic.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	4928      	ldr	r1, [pc, #160]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e06:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <RCCEx_PLL2_Config+0x160>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	69d2      	ldr	r2, [r2, #28]
 8003e12:	00d2      	lsls	r2, r2, #3
 8003e14:	4920      	ldr	r1, [pc, #128]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e1a:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	f043 0310 	orr.w	r3, r3, #16
 8003e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e38:	e00f      	b.n	8003e5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e40:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e4c:	e005      	b.n	8003e5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e66:	f7fd f835 	bl	8000ed4 <HAL_GetTick>
 8003e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e6e:	f7fd f831 	bl	8000ed4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <RCCEx_PLL2_Config+0x15c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	ffff0007 	.word	0xffff0007

08003ea0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eae:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d101      	bne.n	8003ebe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e099      	b.n	8003ff2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ebe:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4e      	ldr	r2, [pc, #312]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eca:	f7fd f803 	bl	8000ed4 <HAL_GetTick>
 8003ece:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ed2:	f7fc ffff 	bl	8000ed4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e086      	b.n	8003ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ee4:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	051b      	lsls	r3, r3, #20
 8003efe:	493f      	ldr	r1, [pc, #252]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	628b      	str	r3, [r1, #40]	; 0x28
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	025b      	lsls	r3, r3, #9
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f34:	4931      	ldr	r1, [pc, #196]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f3a:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	492d      	ldr	r1, [pc, #180]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4928      	ldr	r1, [pc, #160]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f5e:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6e:	4b24      	ldr	r3, [pc, #144]	; (8004000 <RCCEx_PLL3_Config+0x160>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	69d2      	ldr	r2, [r2, #28]
 8003f76:	00d2      	lsls	r2, r2, #3
 8003f78:	4920      	ldr	r1, [pc, #128]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f7e:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003f96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f9c:	e00f      	b.n	8003fbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003faa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fb0:	e005      	b.n	8003fbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fc ff83 	bl	8000ed4 <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fd0:	e008      	b.n	8003fe4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fd2:	f7fc ff7f 	bl	8000ed4 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e006      	b.n	8003ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <RCCEx_PLL3_Config+0x15c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	58024400 	.word	0x58024400
 8004000:	ffff0007 	.word	0xffff0007

08004004 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e04a      	b.n	80040ac <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc fdd5 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2224      	movs	r2, #36	; 0x24
 8004032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8c2 	bl	80041d0 <UART_SetConfig>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e02a      	b.n	80040ac <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 ff22 	bl	8004ea8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004082:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0208 	orr.w	r2, r2, #8
 8004092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 ffa1 	bl	8004fec <UART_CheckIdleState>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d17b      	bne.n	80041c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_UART_Transmit+0x26>
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e074      	b.n	80041c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2221      	movs	r2, #33	; 0x21
 80040ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ee:	f7fc fef1 	bl	8000ed4 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d108      	bne.n	8004120 <HAL_UART_Transmit+0x6c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004128:	e030      	b.n	800418c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f001 f803 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e03d      	b.n	80041c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	3302      	adds	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e007      	b.n	800417a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1c8      	bne.n	800412a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 ffcc 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e006      	b.n	80041c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b092      	sub	sp, #72	; 0x48
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4bbe      	ldr	r3, [pc, #760]	; (80044f8 <UART_SetConfig+0x328>)
 8004200:	4013      	ands	r3, r2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004208:	430b      	orrs	r3, r1
 800420a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4ab3      	ldr	r2, [pc, #716]	; (80044fc <UART_SetConfig+0x32c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004238:	4313      	orrs	r3, r2
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4baf      	ldr	r3, [pc, #700]	; (8004500 <UART_SetConfig+0x330>)
 8004244:	4013      	ands	r3, r2
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800424c:	430b      	orrs	r3, r1
 800424e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	f023 010f 	bic.w	r1, r3, #15
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4aa6      	ldr	r2, [pc, #664]	; (8004504 <UART_SetConfig+0x334>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d177      	bne.n	8004360 <UART_SetConfig+0x190>
 8004270:	4ba5      	ldr	r3, [pc, #660]	; (8004508 <UART_SetConfig+0x338>)
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004278:	2b28      	cmp	r3, #40	; 0x28
 800427a:	d86d      	bhi.n	8004358 <UART_SetConfig+0x188>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0xb4>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	08004329 	.word	0x08004329
 8004288:	08004359 	.word	0x08004359
 800428c:	08004359 	.word	0x08004359
 8004290:	08004359 	.word	0x08004359
 8004294:	08004359 	.word	0x08004359
 8004298:	08004359 	.word	0x08004359
 800429c:	08004359 	.word	0x08004359
 80042a0:	08004359 	.word	0x08004359
 80042a4:	08004331 	.word	0x08004331
 80042a8:	08004359 	.word	0x08004359
 80042ac:	08004359 	.word	0x08004359
 80042b0:	08004359 	.word	0x08004359
 80042b4:	08004359 	.word	0x08004359
 80042b8:	08004359 	.word	0x08004359
 80042bc:	08004359 	.word	0x08004359
 80042c0:	08004359 	.word	0x08004359
 80042c4:	08004339 	.word	0x08004339
 80042c8:	08004359 	.word	0x08004359
 80042cc:	08004359 	.word	0x08004359
 80042d0:	08004359 	.word	0x08004359
 80042d4:	08004359 	.word	0x08004359
 80042d8:	08004359 	.word	0x08004359
 80042dc:	08004359 	.word	0x08004359
 80042e0:	08004359 	.word	0x08004359
 80042e4:	08004341 	.word	0x08004341
 80042e8:	08004359 	.word	0x08004359
 80042ec:	08004359 	.word	0x08004359
 80042f0:	08004359 	.word	0x08004359
 80042f4:	08004359 	.word	0x08004359
 80042f8:	08004359 	.word	0x08004359
 80042fc:	08004359 	.word	0x08004359
 8004300:	08004359 	.word	0x08004359
 8004304:	08004349 	.word	0x08004349
 8004308:	08004359 	.word	0x08004359
 800430c:	08004359 	.word	0x08004359
 8004310:	08004359 	.word	0x08004359
 8004314:	08004359 	.word	0x08004359
 8004318:	08004359 	.word	0x08004359
 800431c:	08004359 	.word	0x08004359
 8004320:	08004359 	.word	0x08004359
 8004324:	08004351 	.word	0x08004351
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800432e:	e326      	b.n	800497e <UART_SetConfig+0x7ae>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004336:	e322      	b.n	800497e <UART_SetConfig+0x7ae>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800433e:	e31e      	b.n	800497e <UART_SetConfig+0x7ae>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004346:	e31a      	b.n	800497e <UART_SetConfig+0x7ae>
 8004348:	2320      	movs	r3, #32
 800434a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434e:	e316      	b.n	800497e <UART_SetConfig+0x7ae>
 8004350:	2340      	movs	r3, #64	; 0x40
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e312      	b.n	800497e <UART_SetConfig+0x7ae>
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e30e      	b.n	800497e <UART_SetConfig+0x7ae>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a69      	ldr	r2, [pc, #420]	; (800450c <UART_SetConfig+0x33c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d130      	bne.n	80043cc <UART_SetConfig+0x1fc>
 800436a:	4b67      	ldr	r3, [pc, #412]	; (8004508 <UART_SetConfig+0x338>)
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	2b05      	cmp	r3, #5
 8004374:	d826      	bhi.n	80043c4 <UART_SetConfig+0x1f4>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x1ac>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	08004395 	.word	0x08004395
 8004380:	0800439d 	.word	0x0800439d
 8004384:	080043a5 	.word	0x080043a5
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043bd 	.word	0x080043bd
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800439a:	e2f0      	b.n	800497e <UART_SetConfig+0x7ae>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043a2:	e2ec      	b.n	800497e <UART_SetConfig+0x7ae>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043aa:	e2e8      	b.n	800497e <UART_SetConfig+0x7ae>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b2:	e2e4      	b.n	800497e <UART_SetConfig+0x7ae>
 80043b4:	2320      	movs	r3, #32
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ba:	e2e0      	b.n	800497e <UART_SetConfig+0x7ae>
 80043bc:	2340      	movs	r3, #64	; 0x40
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c2:	e2dc      	b.n	800497e <UART_SetConfig+0x7ae>
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e2d8      	b.n	800497e <UART_SetConfig+0x7ae>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a4f      	ldr	r2, [pc, #316]	; (8004510 <UART_SetConfig+0x340>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d130      	bne.n	8004438 <UART_SetConfig+0x268>
 80043d6:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <UART_SetConfig+0x338>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d826      	bhi.n	8004430 <UART_SetConfig+0x260>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <UART_SetConfig+0x218>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004401 	.word	0x08004401
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004411 	.word	0x08004411
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004429 	.word	0x08004429
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004406:	e2ba      	b.n	800497e <UART_SetConfig+0x7ae>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440e:	e2b6      	b.n	800497e <UART_SetConfig+0x7ae>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004416:	e2b2      	b.n	800497e <UART_SetConfig+0x7ae>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441e:	e2ae      	b.n	800497e <UART_SetConfig+0x7ae>
 8004420:	2320      	movs	r3, #32
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004426:	e2aa      	b.n	800497e <UART_SetConfig+0x7ae>
 8004428:	2340      	movs	r3, #64	; 0x40
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e2a6      	b.n	800497e <UART_SetConfig+0x7ae>
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e2a2      	b.n	800497e <UART_SetConfig+0x7ae>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a35      	ldr	r2, [pc, #212]	; (8004514 <UART_SetConfig+0x344>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d130      	bne.n	80044a4 <UART_SetConfig+0x2d4>
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <UART_SetConfig+0x338>)
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b05      	cmp	r3, #5
 800444c:	d826      	bhi.n	800449c <UART_SetConfig+0x2cc>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x284>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	0800446d 	.word	0x0800446d
 8004458:	08004475 	.word	0x08004475
 800445c:	0800447d 	.word	0x0800447d
 8004460:	08004485 	.word	0x08004485
 8004464:	0800448d 	.word	0x0800448d
 8004468:	08004495 	.word	0x08004495
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004472:	e284      	b.n	800497e <UART_SetConfig+0x7ae>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447a:	e280      	b.n	800497e <UART_SetConfig+0x7ae>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004482:	e27c      	b.n	800497e <UART_SetConfig+0x7ae>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448a:	e278      	b.n	800497e <UART_SetConfig+0x7ae>
 800448c:	2320      	movs	r3, #32
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004492:	e274      	b.n	800497e <UART_SetConfig+0x7ae>
 8004494:	2340      	movs	r3, #64	; 0x40
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e270      	b.n	800497e <UART_SetConfig+0x7ae>
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a2:	e26c      	b.n	800497e <UART_SetConfig+0x7ae>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <UART_SetConfig+0x348>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d142      	bne.n	8004534 <UART_SetConfig+0x364>
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <UART_SetConfig+0x338>)
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d838      	bhi.n	800452c <UART_SetConfig+0x35c>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0x2f0>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044e9 	.word	0x080044e9
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	0800451d 	.word	0x0800451d
 80044d4:	08004525 	.word	0x08004525
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044de:	e24e      	b.n	800497e <UART_SetConfig+0x7ae>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e6:	e24a      	b.n	800497e <UART_SetConfig+0x7ae>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ee:	e246      	b.n	800497e <UART_SetConfig+0x7ae>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f6:	e242      	b.n	800497e <UART_SetConfig+0x7ae>
 80044f8:	cfff69f3 	.word	0xcfff69f3
 80044fc:	58000c00 	.word	0x58000c00
 8004500:	11fff4ff 	.word	0x11fff4ff
 8004504:	40011000 	.word	0x40011000
 8004508:	58024400 	.word	0x58024400
 800450c:	40004400 	.word	0x40004400
 8004510:	40004800 	.word	0x40004800
 8004514:	40004c00 	.word	0x40004c00
 8004518:	40005000 	.word	0x40005000
 800451c:	2320      	movs	r3, #32
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004522:	e22c      	b.n	800497e <UART_SetConfig+0x7ae>
 8004524:	2340      	movs	r3, #64	; 0x40
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452a:	e228      	b.n	800497e <UART_SetConfig+0x7ae>
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004532:	e224      	b.n	800497e <UART_SetConfig+0x7ae>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4ab1      	ldr	r2, [pc, #708]	; (8004800 <UART_SetConfig+0x630>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d176      	bne.n	800462c <UART_SetConfig+0x45c>
 800453e:	4bb1      	ldr	r3, [pc, #708]	; (8004804 <UART_SetConfig+0x634>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004546:	2b28      	cmp	r3, #40	; 0x28
 8004548:	d86c      	bhi.n	8004624 <UART_SetConfig+0x454>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0x380>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	080045f5 	.word	0x080045f5
 8004554:	08004625 	.word	0x08004625
 8004558:	08004625 	.word	0x08004625
 800455c:	08004625 	.word	0x08004625
 8004560:	08004625 	.word	0x08004625
 8004564:	08004625 	.word	0x08004625
 8004568:	08004625 	.word	0x08004625
 800456c:	08004625 	.word	0x08004625
 8004570:	080045fd 	.word	0x080045fd
 8004574:	08004625 	.word	0x08004625
 8004578:	08004625 	.word	0x08004625
 800457c:	08004625 	.word	0x08004625
 8004580:	08004625 	.word	0x08004625
 8004584:	08004625 	.word	0x08004625
 8004588:	08004625 	.word	0x08004625
 800458c:	08004625 	.word	0x08004625
 8004590:	08004605 	.word	0x08004605
 8004594:	08004625 	.word	0x08004625
 8004598:	08004625 	.word	0x08004625
 800459c:	08004625 	.word	0x08004625
 80045a0:	08004625 	.word	0x08004625
 80045a4:	08004625 	.word	0x08004625
 80045a8:	08004625 	.word	0x08004625
 80045ac:	08004625 	.word	0x08004625
 80045b0:	0800460d 	.word	0x0800460d
 80045b4:	08004625 	.word	0x08004625
 80045b8:	08004625 	.word	0x08004625
 80045bc:	08004625 	.word	0x08004625
 80045c0:	08004625 	.word	0x08004625
 80045c4:	08004625 	.word	0x08004625
 80045c8:	08004625 	.word	0x08004625
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004615 	.word	0x08004615
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004625 	.word	0x08004625
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004625 	.word	0x08004625
 80045ec:	08004625 	.word	0x08004625
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045fa:	e1c0      	b.n	800497e <UART_SetConfig+0x7ae>
 80045fc:	2304      	movs	r3, #4
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004602:	e1bc      	b.n	800497e <UART_SetConfig+0x7ae>
 8004604:	2308      	movs	r3, #8
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460a:	e1b8      	b.n	800497e <UART_SetConfig+0x7ae>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004612:	e1b4      	b.n	800497e <UART_SetConfig+0x7ae>
 8004614:	2320      	movs	r3, #32
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461a:	e1b0      	b.n	800497e <UART_SetConfig+0x7ae>
 800461c:	2340      	movs	r3, #64	; 0x40
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e1ac      	b.n	800497e <UART_SetConfig+0x7ae>
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e1a8      	b.n	800497e <UART_SetConfig+0x7ae>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a75      	ldr	r2, [pc, #468]	; (8004808 <UART_SetConfig+0x638>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d130      	bne.n	8004698 <UART_SetConfig+0x4c8>
 8004636:	4b73      	ldr	r3, [pc, #460]	; (8004804 <UART_SetConfig+0x634>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	2b05      	cmp	r3, #5
 8004640:	d826      	bhi.n	8004690 <UART_SetConfig+0x4c0>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <UART_SetConfig+0x478>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	08004661 	.word	0x08004661
 800464c:	08004669 	.word	0x08004669
 8004650:	08004671 	.word	0x08004671
 8004654:	08004679 	.word	0x08004679
 8004658:	08004681 	.word	0x08004681
 800465c:	08004689 	.word	0x08004689
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004666:	e18a      	b.n	800497e <UART_SetConfig+0x7ae>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466e:	e186      	b.n	800497e <UART_SetConfig+0x7ae>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004676:	e182      	b.n	800497e <UART_SetConfig+0x7ae>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800467e:	e17e      	b.n	800497e <UART_SetConfig+0x7ae>
 8004680:	2320      	movs	r3, #32
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004686:	e17a      	b.n	800497e <UART_SetConfig+0x7ae>
 8004688:	2340      	movs	r3, #64	; 0x40
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468e:	e176      	b.n	800497e <UART_SetConfig+0x7ae>
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004696:	e172      	b.n	800497e <UART_SetConfig+0x7ae>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5b      	ldr	r2, [pc, #364]	; (800480c <UART_SetConfig+0x63c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d130      	bne.n	8004704 <UART_SetConfig+0x534>
 80046a2:	4b58      	ldr	r3, [pc, #352]	; (8004804 <UART_SetConfig+0x634>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	d826      	bhi.n	80046fc <UART_SetConfig+0x52c>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x4e4>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046cd 	.word	0x080046cd
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046dd 	.word	0x080046dd
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d2:	e154      	b.n	800497e <UART_SetConfig+0x7ae>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046da:	e150      	b.n	800497e <UART_SetConfig+0x7ae>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e2:	e14c      	b.n	800497e <UART_SetConfig+0x7ae>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ea:	e148      	b.n	800497e <UART_SetConfig+0x7ae>
 80046ec:	2320      	movs	r3, #32
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f2:	e144      	b.n	800497e <UART_SetConfig+0x7ae>
 80046f4:	2340      	movs	r3, #64	; 0x40
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fa:	e140      	b.n	800497e <UART_SetConfig+0x7ae>
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004702:	e13c      	b.n	800497e <UART_SetConfig+0x7ae>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a41      	ldr	r2, [pc, #260]	; (8004810 <UART_SetConfig+0x640>)
 800470a:	4293      	cmp	r3, r2
 800470c:	f040 8082 	bne.w	8004814 <UART_SetConfig+0x644>
 8004710:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <UART_SetConfig+0x634>)
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004718:	2b28      	cmp	r3, #40	; 0x28
 800471a:	d86d      	bhi.n	80047f8 <UART_SetConfig+0x628>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x554>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	080047c9 	.word	0x080047c9
 8004728:	080047f9 	.word	0x080047f9
 800472c:	080047f9 	.word	0x080047f9
 8004730:	080047f9 	.word	0x080047f9
 8004734:	080047f9 	.word	0x080047f9
 8004738:	080047f9 	.word	0x080047f9
 800473c:	080047f9 	.word	0x080047f9
 8004740:	080047f9 	.word	0x080047f9
 8004744:	080047d1 	.word	0x080047d1
 8004748:	080047f9 	.word	0x080047f9
 800474c:	080047f9 	.word	0x080047f9
 8004750:	080047f9 	.word	0x080047f9
 8004754:	080047f9 	.word	0x080047f9
 8004758:	080047f9 	.word	0x080047f9
 800475c:	080047f9 	.word	0x080047f9
 8004760:	080047f9 	.word	0x080047f9
 8004764:	080047d9 	.word	0x080047d9
 8004768:	080047f9 	.word	0x080047f9
 800476c:	080047f9 	.word	0x080047f9
 8004770:	080047f9 	.word	0x080047f9
 8004774:	080047f9 	.word	0x080047f9
 8004778:	080047f9 	.word	0x080047f9
 800477c:	080047f9 	.word	0x080047f9
 8004780:	080047f9 	.word	0x080047f9
 8004784:	080047e1 	.word	0x080047e1
 8004788:	080047f9 	.word	0x080047f9
 800478c:	080047f9 	.word	0x080047f9
 8004790:	080047f9 	.word	0x080047f9
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047f9 	.word	0x080047f9
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047e9 	.word	0x080047e9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047f9 	.word	0x080047f9
 80047b8:	080047f9 	.word	0x080047f9
 80047bc:	080047f9 	.word	0x080047f9
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e0d6      	b.n	800497e <UART_SetConfig+0x7ae>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e0d2      	b.n	800497e <UART_SetConfig+0x7ae>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e0ce      	b.n	800497e <UART_SetConfig+0x7ae>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e6:	e0ca      	b.n	800497e <UART_SetConfig+0x7ae>
 80047e8:	2320      	movs	r3, #32
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ee:	e0c6      	b.n	800497e <UART_SetConfig+0x7ae>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e0c2      	b.n	800497e <UART_SetConfig+0x7ae>
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fe:	e0be      	b.n	800497e <UART_SetConfig+0x7ae>
 8004800:	40011400 	.word	0x40011400
 8004804:	58024400 	.word	0x58024400
 8004808:	40007800 	.word	0x40007800
 800480c:	40007c00 	.word	0x40007c00
 8004810:	40011800 	.word	0x40011800
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4aad      	ldr	r2, [pc, #692]	; (8004ad0 <UART_SetConfig+0x900>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d176      	bne.n	800490c <UART_SetConfig+0x73c>
 800481e:	4bad      	ldr	r3, [pc, #692]	; (8004ad4 <UART_SetConfig+0x904>)
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004826:	2b28      	cmp	r3, #40	; 0x28
 8004828:	d86c      	bhi.n	8004904 <UART_SetConfig+0x734>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0x660>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	080048d5 	.word	0x080048d5
 8004834:	08004905 	.word	0x08004905
 8004838:	08004905 	.word	0x08004905
 800483c:	08004905 	.word	0x08004905
 8004840:	08004905 	.word	0x08004905
 8004844:	08004905 	.word	0x08004905
 8004848:	08004905 	.word	0x08004905
 800484c:	08004905 	.word	0x08004905
 8004850:	080048dd 	.word	0x080048dd
 8004854:	08004905 	.word	0x08004905
 8004858:	08004905 	.word	0x08004905
 800485c:	08004905 	.word	0x08004905
 8004860:	08004905 	.word	0x08004905
 8004864:	08004905 	.word	0x08004905
 8004868:	08004905 	.word	0x08004905
 800486c:	08004905 	.word	0x08004905
 8004870:	080048e5 	.word	0x080048e5
 8004874:	08004905 	.word	0x08004905
 8004878:	08004905 	.word	0x08004905
 800487c:	08004905 	.word	0x08004905
 8004880:	08004905 	.word	0x08004905
 8004884:	08004905 	.word	0x08004905
 8004888:	08004905 	.word	0x08004905
 800488c:	08004905 	.word	0x08004905
 8004890:	080048ed 	.word	0x080048ed
 8004894:	08004905 	.word	0x08004905
 8004898:	08004905 	.word	0x08004905
 800489c:	08004905 	.word	0x08004905
 80048a0:	08004905 	.word	0x08004905
 80048a4:	08004905 	.word	0x08004905
 80048a8:	08004905 	.word	0x08004905
 80048ac:	08004905 	.word	0x08004905
 80048b0:	080048f5 	.word	0x080048f5
 80048b4:	08004905 	.word	0x08004905
 80048b8:	08004905 	.word	0x08004905
 80048bc:	08004905 	.word	0x08004905
 80048c0:	08004905 	.word	0x08004905
 80048c4:	08004905 	.word	0x08004905
 80048c8:	08004905 	.word	0x08004905
 80048cc:	08004905 	.word	0x08004905
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048da:	e050      	b.n	800497e <UART_SetConfig+0x7ae>
 80048dc:	2304      	movs	r3, #4
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048e2:	e04c      	b.n	800497e <UART_SetConfig+0x7ae>
 80048e4:	2308      	movs	r3, #8
 80048e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ea:	e048      	b.n	800497e <UART_SetConfig+0x7ae>
 80048ec:	2310      	movs	r3, #16
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f2:	e044      	b.n	800497e <UART_SetConfig+0x7ae>
 80048f4:	2320      	movs	r3, #32
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fa:	e040      	b.n	800497e <UART_SetConfig+0x7ae>
 80048fc:	2340      	movs	r3, #64	; 0x40
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004902:	e03c      	b.n	800497e <UART_SetConfig+0x7ae>
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490a:	e038      	b.n	800497e <UART_SetConfig+0x7ae>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a71      	ldr	r2, [pc, #452]	; (8004ad8 <UART_SetConfig+0x908>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d130      	bne.n	8004978 <UART_SetConfig+0x7a8>
 8004916:	4b6f      	ldr	r3, [pc, #444]	; (8004ad4 <UART_SetConfig+0x904>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	2b05      	cmp	r3, #5
 8004920:	d826      	bhi.n	8004970 <UART_SetConfig+0x7a0>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x758>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	08004941 	.word	0x08004941
 800492c:	08004949 	.word	0x08004949
 8004930:	08004951 	.word	0x08004951
 8004934:	08004959 	.word	0x08004959
 8004938:	08004961 	.word	0x08004961
 800493c:	08004969 	.word	0x08004969
 8004940:	2302      	movs	r3, #2
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004946:	e01a      	b.n	800497e <UART_SetConfig+0x7ae>
 8004948:	2304      	movs	r3, #4
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494e:	e016      	b.n	800497e <UART_SetConfig+0x7ae>
 8004950:	2308      	movs	r3, #8
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004956:	e012      	b.n	800497e <UART_SetConfig+0x7ae>
 8004958:	2310      	movs	r3, #16
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495e:	e00e      	b.n	800497e <UART_SetConfig+0x7ae>
 8004960:	2320      	movs	r3, #32
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004966:	e00a      	b.n	800497e <UART_SetConfig+0x7ae>
 8004968:	2340      	movs	r3, #64	; 0x40
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496e:	e006      	b.n	800497e <UART_SetConfig+0x7ae>
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004976:	e002      	b.n	800497e <UART_SetConfig+0x7ae>
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a55      	ldr	r2, [pc, #340]	; (8004ad8 <UART_SetConfig+0x908>)
 8004984:	4293      	cmp	r3, r2
 8004986:	f040 80f8 	bne.w	8004b7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800498a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800498e:	2b20      	cmp	r3, #32
 8004990:	dc46      	bgt.n	8004a20 <UART_SetConfig+0x850>
 8004992:	2b02      	cmp	r3, #2
 8004994:	db75      	blt.n	8004a82 <UART_SetConfig+0x8b2>
 8004996:	3b02      	subs	r3, #2
 8004998:	2b1e      	cmp	r3, #30
 800499a:	d872      	bhi.n	8004a82 <UART_SetConfig+0x8b2>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0x7d4>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	08004a27 	.word	0x08004a27
 80049a8:	08004a83 	.word	0x08004a83
 80049ac:	08004a2f 	.word	0x08004a2f
 80049b0:	08004a83 	.word	0x08004a83
 80049b4:	08004a83 	.word	0x08004a83
 80049b8:	08004a83 	.word	0x08004a83
 80049bc:	08004a3f 	.word	0x08004a3f
 80049c0:	08004a83 	.word	0x08004a83
 80049c4:	08004a83 	.word	0x08004a83
 80049c8:	08004a83 	.word	0x08004a83
 80049cc:	08004a83 	.word	0x08004a83
 80049d0:	08004a83 	.word	0x08004a83
 80049d4:	08004a83 	.word	0x08004a83
 80049d8:	08004a83 	.word	0x08004a83
 80049dc:	08004a4f 	.word	0x08004a4f
 80049e0:	08004a83 	.word	0x08004a83
 80049e4:	08004a83 	.word	0x08004a83
 80049e8:	08004a83 	.word	0x08004a83
 80049ec:	08004a83 	.word	0x08004a83
 80049f0:	08004a83 	.word	0x08004a83
 80049f4:	08004a83 	.word	0x08004a83
 80049f8:	08004a83 	.word	0x08004a83
 80049fc:	08004a83 	.word	0x08004a83
 8004a00:	08004a83 	.word	0x08004a83
 8004a04:	08004a83 	.word	0x08004a83
 8004a08:	08004a83 	.word	0x08004a83
 8004a0c:	08004a83 	.word	0x08004a83
 8004a10:	08004a83 	.word	0x08004a83
 8004a14:	08004a83 	.word	0x08004a83
 8004a18:	08004a83 	.word	0x08004a83
 8004a1c:	08004a75 	.word	0x08004a75
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d02a      	beq.n	8004a7a <UART_SetConfig+0x8aa>
 8004a24:	e02d      	b.n	8004a82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a26:	f7fe fecb 	bl	80037c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a2c:	e02f      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe feda 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a3c:	e027      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a3e:	f107 0318 	add.w	r3, r7, #24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff f826 	bl	8003a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a4c:	e01f      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a4e:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <UART_SetConfig+0x904>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <UART_SetConfig+0x904>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <UART_SetConfig+0x90c>)
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a6c:	e00f      	b.n	8004a8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <UART_SetConfig+0x90c>)
 8004a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a72:	e00c      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <UART_SetConfig+0x910>)
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a78:	e009      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a80:	e005      	b.n	8004a8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 81ee 	beq.w	8004e72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <UART_SetConfig+0x914>)
 8004a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d305      	bcc.n	8004ac6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d910      	bls.n	8004ae8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004acc:	e1d1      	b.n	8004e72 <UART_SetConfig+0xca2>
 8004ace:	bf00      	nop
 8004ad0:	40011c00 	.word	0x40011c00
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	58000c00 	.word	0x58000c00
 8004adc:	03d09000 	.word	0x03d09000
 8004ae0:	003d0900 	.word	0x003d0900
 8004ae4:	080057dc 	.word	0x080057dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	2200      	movs	r2, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	60fa      	str	r2, [r7, #12]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	4ac0      	ldr	r2, [pc, #768]	; (8004df8 <UART_SetConfig+0xc28>)
 8004af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2200      	movs	r2, #0
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b0a:	f7fb fbef 	bl	80002ec <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	020b      	lsls	r3, r1, #8
 8004b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b24:	0202      	lsls	r2, r0, #8
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	6849      	ldr	r1, [r1, #4]
 8004b2a:	0849      	lsrs	r1, r1, #1
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	4605      	mov	r5, r0
 8004b32:	eb12 0804 	adds.w	r8, r2, r4
 8004b36:	eb43 0905 	adc.w	r9, r3, r5
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	469a      	mov	sl, r3
 8004b42:	4693      	mov	fp, r2
 8004b44:	4652      	mov	r2, sl
 8004b46:	465b      	mov	r3, fp
 8004b48:	4640      	mov	r0, r8
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	f7fb fbce 	bl	80002ec <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5e:	d308      	bcc.n	8004b72 <UART_SetConfig+0x9a2>
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b66:	d204      	bcs.n	8004b72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e17f      	b.n	8004e72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b78:	e17b      	b.n	8004e72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b82:	f040 80bd 	bne.w	8004d00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004b86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	dc48      	bgt.n	8004c20 <UART_SetConfig+0xa50>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db7b      	blt.n	8004c8a <UART_SetConfig+0xaba>
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d879      	bhi.n	8004c8a <UART_SetConfig+0xaba>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x9cc>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004c27 	.word	0x08004c27
 8004ba0:	08004c2f 	.word	0x08004c2f
 8004ba4:	08004c8b 	.word	0x08004c8b
 8004ba8:	08004c8b 	.word	0x08004c8b
 8004bac:	08004c37 	.word	0x08004c37
 8004bb0:	08004c8b 	.word	0x08004c8b
 8004bb4:	08004c8b 	.word	0x08004c8b
 8004bb8:	08004c8b 	.word	0x08004c8b
 8004bbc:	08004c47 	.word	0x08004c47
 8004bc0:	08004c8b 	.word	0x08004c8b
 8004bc4:	08004c8b 	.word	0x08004c8b
 8004bc8:	08004c8b 	.word	0x08004c8b
 8004bcc:	08004c8b 	.word	0x08004c8b
 8004bd0:	08004c8b 	.word	0x08004c8b
 8004bd4:	08004c8b 	.word	0x08004c8b
 8004bd8:	08004c8b 	.word	0x08004c8b
 8004bdc:	08004c57 	.word	0x08004c57
 8004be0:	08004c8b 	.word	0x08004c8b
 8004be4:	08004c8b 	.word	0x08004c8b
 8004be8:	08004c8b 	.word	0x08004c8b
 8004bec:	08004c8b 	.word	0x08004c8b
 8004bf0:	08004c8b 	.word	0x08004c8b
 8004bf4:	08004c8b 	.word	0x08004c8b
 8004bf8:	08004c8b 	.word	0x08004c8b
 8004bfc:	08004c8b 	.word	0x08004c8b
 8004c00:	08004c8b 	.word	0x08004c8b
 8004c04:	08004c8b 	.word	0x08004c8b
 8004c08:	08004c8b 	.word	0x08004c8b
 8004c0c:	08004c8b 	.word	0x08004c8b
 8004c10:	08004c8b 	.word	0x08004c8b
 8004c14:	08004c8b 	.word	0x08004c8b
 8004c18:	08004c8b 	.word	0x08004c8b
 8004c1c:	08004c7d 	.word	0x08004c7d
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d02e      	beq.n	8004c82 <UART_SetConfig+0xab2>
 8004c24:	e031      	b.n	8004c8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c26:	f7fd fbe1 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8004c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c2c:	e033      	b.n	8004c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2e:	f7fd fbf3 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8004c32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c34:	e02f      	b.n	8004c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fdd6 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c44:	e027      	b.n	8004c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c46:	f107 0318 	add.w	r3, r7, #24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe ff22 	bl	8003a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c54:	e01f      	b.n	8004c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c56:	4b69      	ldr	r3, [pc, #420]	; (8004dfc <UART_SetConfig+0xc2c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c62:	4b66      	ldr	r3, [pc, #408]	; (8004dfc <UART_SetConfig+0xc2c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	08db      	lsrs	r3, r3, #3
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	4a64      	ldr	r2, [pc, #400]	; (8004e00 <UART_SetConfig+0xc30>)
 8004c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c74:	e00f      	b.n	8004c96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004c76:	4b62      	ldr	r3, [pc, #392]	; (8004e00 <UART_SetConfig+0xc30>)
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c7a:	e00c      	b.n	8004c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <UART_SetConfig+0xc34>)
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c80:	e009      	b.n	8004c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c88:	e005      	b.n	8004c96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80ea 	beq.w	8004e72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4a55      	ldr	r2, [pc, #340]	; (8004df8 <UART_SetConfig+0xc28>)
 8004ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb0:	005a      	lsls	r2, r3, #1
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	441a      	add	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d916      	bls.n	8004cf8 <UART_SetConfig+0xb28>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd0:	d212      	bcs.n	8004cf8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f023 030f 	bic.w	r3, r3, #15
 8004cda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cea:	4313      	orrs	r3, r2
 8004cec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	e0bc      	b.n	8004e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004cfe:	e0b8      	b.n	8004e72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	dc4b      	bgt.n	8004da0 <UART_SetConfig+0xbd0>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f2c0 8087 	blt.w	8004e1c <UART_SetConfig+0xc4c>
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	f200 8084 	bhi.w	8004e1c <UART_SetConfig+0xc4c>
 8004d14:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0xb4c>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004da7 	.word	0x08004da7
 8004d20:	08004daf 	.word	0x08004daf
 8004d24:	08004e1d 	.word	0x08004e1d
 8004d28:	08004e1d 	.word	0x08004e1d
 8004d2c:	08004db7 	.word	0x08004db7
 8004d30:	08004e1d 	.word	0x08004e1d
 8004d34:	08004e1d 	.word	0x08004e1d
 8004d38:	08004e1d 	.word	0x08004e1d
 8004d3c:	08004dc7 	.word	0x08004dc7
 8004d40:	08004e1d 	.word	0x08004e1d
 8004d44:	08004e1d 	.word	0x08004e1d
 8004d48:	08004e1d 	.word	0x08004e1d
 8004d4c:	08004e1d 	.word	0x08004e1d
 8004d50:	08004e1d 	.word	0x08004e1d
 8004d54:	08004e1d 	.word	0x08004e1d
 8004d58:	08004e1d 	.word	0x08004e1d
 8004d5c:	08004dd7 	.word	0x08004dd7
 8004d60:	08004e1d 	.word	0x08004e1d
 8004d64:	08004e1d 	.word	0x08004e1d
 8004d68:	08004e1d 	.word	0x08004e1d
 8004d6c:	08004e1d 	.word	0x08004e1d
 8004d70:	08004e1d 	.word	0x08004e1d
 8004d74:	08004e1d 	.word	0x08004e1d
 8004d78:	08004e1d 	.word	0x08004e1d
 8004d7c:	08004e1d 	.word	0x08004e1d
 8004d80:	08004e1d 	.word	0x08004e1d
 8004d84:	08004e1d 	.word	0x08004e1d
 8004d88:	08004e1d 	.word	0x08004e1d
 8004d8c:	08004e1d 	.word	0x08004e1d
 8004d90:	08004e1d 	.word	0x08004e1d
 8004d94:	08004e1d 	.word	0x08004e1d
 8004d98:	08004e1d 	.word	0x08004e1d
 8004d9c:	08004e0f 	.word	0x08004e0f
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d037      	beq.n	8004e14 <UART_SetConfig+0xc44>
 8004da4:	e03a      	b.n	8004e1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da6:	f7fd fb21 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8004daa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004dac:	e03c      	b.n	8004e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dae:	f7fd fb33 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8004db2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004db4:	e038      	b.n	8004e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fd16 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc4:	e030      	b.n	8004e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dc6:	f107 0318 	add.w	r3, r7, #24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fe62 	bl	8003a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd4:	e028      	b.n	8004e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <UART_SetConfig+0xc2c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d012      	beq.n	8004e08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <UART_SetConfig+0xc2c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	08db      	lsrs	r3, r3, #3
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <UART_SetConfig+0xc30>)
 8004dee:	fa22 f303 	lsr.w	r3, r2, r3
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004df4:	e018      	b.n	8004e28 <UART_SetConfig+0xc58>
 8004df6:	bf00      	nop
 8004df8:	080057dc 	.word	0x080057dc
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	03d09000 	.word	0x03d09000
 8004e04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <UART_SetConfig+0xccc>)
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e0c:	e00c      	b.n	8004e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <UART_SetConfig+0xcd0>)
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e12:	e009      	b.n	8004e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e1a:	e005      	b.n	8004e28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e26:	bf00      	nop
    }

    if (pclk != 0U)
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d021      	beq.n	8004e72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <UART_SetConfig+0xcd4>)
 8004e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	441a      	add	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d909      	bls.n	8004e6c <UART_SetConfig+0xc9c>
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d205      	bcs.n	8004e6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	e002      	b.n	8004e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3748      	adds	r7, #72	; 0x48
 8004e96:	46bd      	mov	sp, r7
 8004e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9c:	03d09000 	.word	0x03d09000
 8004ea0:	003d0900 	.word	0x003d0900
 8004ea4:	080057dc 	.word	0x080057dc

08004ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa6:	d10a      	bne.n	8004fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b098      	sub	sp, #96	; 0x60
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ffc:	f7fb ff6a 	bl	8000ed4 <HAL_GetTick>
 8005000:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d12f      	bne.n	8005070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005018:	2200      	movs	r2, #0
 800501a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f88e 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d022      	beq.n	8005070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	653b      	str	r3, [r7, #80]	; 0x50
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
 800504a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800504e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e6      	bne.n	800502a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e063      	b.n	8005138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b04      	cmp	r3, #4
 800507c:	d149      	bne.n	8005112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005086:	2200      	movs	r2, #0
 8005088:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f857 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d03c      	beq.n	8005112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	623b      	str	r3, [r7, #32]
   return(result);
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30
 80050b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e6      	bne.n	8005098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ea:	61fa      	str	r2, [r7, #28]
 80050ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	69b9      	ldr	r1, [r7, #24]
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	617b      	str	r3, [r7, #20]
   return(result);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e012      	b.n	8005138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3758      	adds	r7, #88	; 0x58
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005150:	e049      	b.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d045      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515a:	f7fb febb 	bl	8000ed4 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	429a      	cmp	r2, r3
 8005168:	d302      	bcc.n	8005170 <UART_WaitOnFlagUntilTimeout+0x30>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e048      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d031      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b08      	cmp	r3, #8
 800518e:	d110      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2208      	movs	r2, #8
 8005196:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f839 	bl	8005210 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2208      	movs	r2, #8
 80051a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e029      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c0:	d111      	bne.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f81f 	bl	8005210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e00f      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	429a      	cmp	r2, r3
 8005202:	d0a6      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b095      	sub	sp, #84	; 0x54
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800522c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005236:	643b      	str	r3, [r7, #64]	; 0x40
 8005238:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800523c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e6      	bne.n	8005218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	61fb      	str	r3, [r7, #28]
   return(result);
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <UART_EndRxTransfer+0xc8>)
 800525e:	4013      	ands	r3, r2
 8005260:	64bb      	str	r3, [r7, #72]	; 0x48
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800526a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d118      	bne.n	80052b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	60bb      	str	r3, [r7, #8]
   return(result);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 0310 	bic.w	r3, r3, #16
 800529a:	647b      	str	r3, [r7, #68]	; 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6979      	ldr	r1, [r7, #20]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	613b      	str	r3, [r7, #16]
   return(result);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e6      	bne.n	8005286 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052cc:	bf00      	nop
 80052ce:	3754      	adds	r7, #84	; 0x54
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	effffffe 	.word	0xeffffffe

080052dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e027      	b.n	8005342 <HAL_UARTEx_DisableFifoMode+0x66>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2224      	movs	r2, #36	; 0x24
 80052fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005320:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005362:	2302      	movs	r3, #2
 8005364:	e02d      	b.n	80053c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2224      	movs	r2, #36	; 0x24
 8005372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f850 	bl	8005448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053de:	2302      	movs	r3, #2
 80053e0:	e02d      	b.n	800543e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2224      	movs	r2, #36	; 0x24
 80053ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f812 	bl	8005448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005468:	e031      	b.n	80054ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800546a:	2310      	movs	r3, #16
 800546c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800546e:	2310      	movs	r3, #16
 8005470:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	0e5b      	lsrs	r3, r3, #25
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	0f5b      	lsrs	r3, r3, #29
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005492:	7bbb      	ldrb	r3, [r7, #14]
 8005494:	7b3a      	ldrb	r2, [r7, #12]
 8005496:	4911      	ldr	r1, [pc, #68]	; (80054dc <UARTEx_SetNbDataToProcess+0x94>)
 8005498:	5c8a      	ldrb	r2, [r1, r2]
 800549a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800549e:	7b3a      	ldrb	r2, [r7, #12]
 80054a0:	490f      	ldr	r1, [pc, #60]	; (80054e0 <UARTEx_SetNbDataToProcess+0x98>)
 80054a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	7b7a      	ldrb	r2, [r7, #13]
 80054b4:	4909      	ldr	r1, [pc, #36]	; (80054dc <UARTEx_SetNbDataToProcess+0x94>)
 80054b6:	5c8a      	ldrb	r2, [r1, r2]
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054bc:	7b7a      	ldrb	r2, [r7, #13]
 80054be:	4908      	ldr	r1, [pc, #32]	; (80054e0 <UARTEx_SetNbDataToProcess+0x98>)
 80054c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	080057f4 	.word	0x080057f4
 80054e0:	080057fc 	.word	0x080057fc

080054e4 <memset>:
 80054e4:	4402      	add	r2, r0
 80054e6:	4603      	mov	r3, r0
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d100      	bne.n	80054ee <memset+0xa>
 80054ec:	4770      	bx	lr
 80054ee:	f803 1b01 	strb.w	r1, [r3], #1
 80054f2:	e7f9      	b.n	80054e8 <memset+0x4>

080054f4 <__libc_init_array>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	4d0d      	ldr	r5, [pc, #52]	; (800552c <__libc_init_array+0x38>)
 80054f8:	4c0d      	ldr	r4, [pc, #52]	; (8005530 <__libc_init_array+0x3c>)
 80054fa:	1b64      	subs	r4, r4, r5
 80054fc:	10a4      	asrs	r4, r4, #2
 80054fe:	2600      	movs	r6, #0
 8005500:	42a6      	cmp	r6, r4
 8005502:	d109      	bne.n	8005518 <__libc_init_array+0x24>
 8005504:	4d0b      	ldr	r5, [pc, #44]	; (8005534 <__libc_init_array+0x40>)
 8005506:	4c0c      	ldr	r4, [pc, #48]	; (8005538 <__libc_init_array+0x44>)
 8005508:	f000 f826 	bl	8005558 <_init>
 800550c:	1b64      	subs	r4, r4, r5
 800550e:	10a4      	asrs	r4, r4, #2
 8005510:	2600      	movs	r6, #0
 8005512:	42a6      	cmp	r6, r4
 8005514:	d105      	bne.n	8005522 <__libc_init_array+0x2e>
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	f855 3b04 	ldr.w	r3, [r5], #4
 800551c:	4798      	blx	r3
 800551e:	3601      	adds	r6, #1
 8005520:	e7ee      	b.n	8005500 <__libc_init_array+0xc>
 8005522:	f855 3b04 	ldr.w	r3, [r5], #4
 8005526:	4798      	blx	r3
 8005528:	3601      	adds	r6, #1
 800552a:	e7f2      	b.n	8005512 <__libc_init_array+0x1e>
 800552c:	0800580c 	.word	0x0800580c
 8005530:	0800580c 	.word	0x0800580c
 8005534:	0800580c 	.word	0x0800580c
 8005538:	08005810 	.word	0x08005810

0800553c <memcpy>:
 800553c:	440a      	add	r2, r1
 800553e:	4291      	cmp	r1, r2
 8005540:	f100 33ff 	add.w	r3, r0, #4294967295
 8005544:	d100      	bne.n	8005548 <memcpy+0xc>
 8005546:	4770      	bx	lr
 8005548:	b510      	push	{r4, lr}
 800554a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005552:	4291      	cmp	r1, r2
 8005554:	d1f9      	bne.n	800554a <memcpy+0xe>
 8005556:	bd10      	pop	{r4, pc}

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
