
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08006354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000294  24000060  080063b4  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002f4  080063b4  000202f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fe7c  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002123  00000000  00000000  0002ff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ae0  00000000  00000000  00032070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000084a  00000000  00000000  00032b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f909  00000000  00000000  0003339a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000111c4  00000000  00000000  00062ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00132f6b  00000000  00000000  00073e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000030c4  00000000  00000000  001a6dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001a9e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006030 	.word	0x08006030

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08006030 	.word	0x08006030

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006a8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80006ac:	6019      	str	r1, [r3, #0]
 80006ae:	4611      	mov	r1, r2
 80006b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006b4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006b8:	4602      	mov	r2, r0
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006c0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80006c4:	460a      	mov	r2, r1
 80006c6:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 80006c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80006d0:	4a28      	ldr	r2, [pc, #160]	; (8000774 <dyn2_crc+0xd8>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	4611      	mov	r1, r2
 80006d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006da:	461a      	mov	r2, r3
 80006dc:	f005 f914 	bl	8005908 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80006e6:	e031      	b.n	800074c <dyn2_crc+0xb0>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80006e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006ec:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80006fa:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80006fe:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000702:	6809      	ldr	r1, [r1, #0]
 8000704:	440b      	add	r3, r1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b29b      	uxth	r3, r3
 800070a:	4053      	eors	r3, r2
 800070c:	b29b      	uxth	r3, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000714:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000718:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b21a      	sxth	r2, r3
 8000722:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000726:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800072a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800072e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4053      	eors	r3, r2
 8000736:	b21a      	sxth	r2, r3
 8000738:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800073c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000740:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000742:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000746:	3301      	adds	r3, #1
 8000748:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800074c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000750:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000754:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3c4      	bcc.n	80006e8 <dyn2_crc+0x4c>
	}
	return crc_accum;
 800075e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000762:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000766:	881b      	ldrh	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	08006048 	.word	0x08006048

08000778 <dyn2_append_crc>:
uint8_t* dyn2_append_crc(const uint8_t* instruction,uint16_t bufferSize) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]

	uint8_t* instruction_sent = (uint8_t*)malloc(bufferSize);
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	4618      	mov	r0, r3
 8000788:	f004 ffa6 	bl	80056d8 <malloc>
 800078c:	4603      	mov	r3, r0
 800078e:	60fb      	str	r3, [r7, #12]

	if (instruction_sent == NULL) {
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <dyn2_append_crc+0x22>
		// Handle memory allocation failure
		return NULL;
 8000796:	2300      	movs	r3, #0
 8000798:	e023      	b.n	80007e2 <dyn2_append_crc+0x6a>
	}

	memcpy(instruction_sent, instruction, bufferSize-2);
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	3b02      	subs	r3, #2
 800079e:	461a      	mov	r2, r3
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f005 f8b0 	bl	8005908 <memcpy>

	unsigned short crc = dyn2_crc(0, instruction_sent, bufferSize - 2);
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	3b02      	subs	r3, #2
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	68f9      	ldr	r1, [r7, #12]
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff ff72 	bl	800069c <dyn2_crc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	817b      	strh	r3, [r7, #10]
	unsigned char crc_l = (unsigned char)(crc & 0x00FF);
 80007bc:	897b      	ldrh	r3, [r7, #10]
 80007be:	727b      	strb	r3, [r7, #9]
	unsigned char crc_h = (unsigned char)((crc >> 8) & 0x00FF);
 80007c0:	897b      	ldrh	r3, [r7, #10]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	723b      	strb	r3, [r7, #8]

	instruction_sent[bufferSize - 2] = crc_l;
 80007c8:	887b      	ldrh	r3, [r7, #2]
 80007ca:	3b02      	subs	r3, #2
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	7a7a      	ldrb	r2, [r7, #9]
 80007d2:	701a      	strb	r2, [r3, #0]
	instruction_sent[bufferSize - 1] = crc_h;
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	7a3a      	ldrb	r2, [r7, #8]
 80007de:	701a      	strb	r2, [r3, #0]

	return instruction_sent;
 80007e0:	68fb      	ldr	r3, [r7, #12]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <dyn2_debug_sendArrayAsString>:
			/*value in the address :2048*/,0x00,0x08,0x00,0x00
			/*CRC*/				,0xCA,0x89};
}

void dyn2_debug_sendArrayAsString(uint8_t* array, int size)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09e      	sub	sp, #120	; 0x78
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	// Convert array to a string
	char arrayString[100];  // Adjust the size according to your needs
	int index = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	677b      	str	r3, [r7, #116]	; 0x74

	for (int i = 0; i < size; i++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	673b      	str	r3, [r7, #112]	; 0x70
 80007fe:	e012      	b.n	8000826 <dyn2_debug_sendArrayAsString+0x3a>
		// Convert each element to a string and append to arrayString
		index += sprintf(&arrayString[index], "%d\t", array[i]);
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000806:	18d0      	adds	r0, r2, r3
 8000808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <dyn2_debug_sendArrayAsString+0x80>)
 8000814:	f005 f814 	bl	8005840 <siprintf>
 8000818:	4602      	mov	r2, r0
 800081a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800081c:	4413      	add	r3, r2
 800081e:	677b      	str	r3, [r7, #116]	; 0x74
	for (int i = 0; i < size; i++) {
 8000820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000822:	3301      	adds	r3, #1
 8000824:	673b      	str	r3, [r7, #112]	; 0x70
 8000826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbe8      	blt.n	8000800 <dyn2_debug_sendArrayAsString+0x14>
	}

	// Add a newline character at the end
	index += sprintf(&arrayString[index], "\n");
 800082e:	f107 020c 	add.w	r2, r7, #12
 8000832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000834:	4413      	add	r3, r2
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <dyn2_debug_sendArrayAsString+0x84>)
 8000838:	4618      	mov	r0, r3
 800083a:	f005 f801 	bl	8005840 <siprintf>
 800083e:	4602      	mov	r2, r0
 8000840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000842:	4413      	add	r3, r2
 8000844:	677b      	str	r3, [r7, #116]	; 0x74

	// Send the string through UART
	HAL_UART_Transmit(&huart3, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd50 	bl	80002f0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 010c 	add.w	r1, r7, #12
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <dyn2_debug_sendArrayAsString+0x88>)
 800085e:	f003 fd23 	bl	80042a8 <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	; 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080062c4 	.word	0x080062c4
 8000870:	080062c8 	.word	0x080062c8
 8000874:	24000114 	.word	0x24000114

08000878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_GPIO_Init+0x6c>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <MX_GPIO_Init+0x6c>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x6c>)
 8000890:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_GPIO_Init+0x6c>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <MX_GPIO_Init+0x6c>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_GPIO_Init+0x6c>)
 80008ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_GPIO_Init+0x6c>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <MX_GPIO_Init+0x6c>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_GPIO_Init+0x6c>)
 80008cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	58024400 	.word	0x58024400

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fb41 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f843 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f7ff ffbf 	bl	8000878 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008fa:	f000 f9f7 	bl	8000cec <MX_USART3_UART_Init>
  MX_UART4_Init();
 80008fe:	f000 f9a9 	bl	8000c54 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Dynamixel_PING[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x01, 0x00,/*type instruction, ici Ping*/0x01
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <main+0x8c>)
 8000904:	463b      	mov	r3, r7
 8000906:	ca07      	ldmia	r2, {r0, r1, r2}
 8000908:	c303      	stmia	r3!, {r0, r1}
 800090a:	801a      	strh	r2, [r3, #0]
  			/* calcul of CRC after */,0x19,0x4E};
  uint8_t* Dynamixel_PING_CRC = dyn2_append_crc(Dynamixel_PING);
 800090c:	463b      	mov	r3, r7
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff32 	bl	8000778 <dyn2_append_crc>
 8000914:	4603      	mov	r3, r0
 8000916:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  HAL_Delay(1000);
 8000918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091c:	f000 fbbc 	bl	8001098 <HAL_Delay>
	  //Acitvate Transmit and disiable Receive, the message transmited need to be between the 2 blocks
	  huart3.Instance->CR1 |= USART_CR1_TE;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <main+0x90>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0x90>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f042 0208 	orr.w	r2, r2, #8
 800092e:	601a      	str	r2, [r3, #0]
	  huart3.Instance->CR1 &= ~USART_CR1_RE;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x90>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <main+0x90>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 0204 	bic.w	r2, r2, #4
 800093e:	601a      	str	r2, [r3, #0]
	  //dyn2_ping();
	  dyn2_debug_sendArrayAsString(Dynamixel_PING_CRC, sizeof(Dynamixel_PING_CRC));
 8000940:	2104      	movs	r1, #4
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f7ff ff52 	bl	80007ec <dyn2_debug_sendArrayAsString>

	  //HAL_UART_Transmit(&huart3,"ABCD\n",strlen("ABCD\n"),100);
	  huart3.Instance->CR1 &= ~USART_CR1_TE;
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <main+0x90>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <main+0x90>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f022 0208 	bic.w	r2, r2, #8
 8000956:	601a      	str	r2, [r3, #0]
	  huart3.Instance->CR1 |= USART_CR1_RE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <main+0x90>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <main+0x90>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f042 0204 	orr.w	r2, r2, #4
 8000966:	601a      	str	r2, [r3, #0]



	  HAL_Delay(1000);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f000 fb94 	bl	8001098 <HAL_Delay>
  while (1){
 8000970:	e7d2      	b.n	8000918 <main+0x30>
 8000972:	bf00      	nop
 8000974:	080062cc 	.word	0x080062cc
 8000978:	24000114 	.word	0x24000114

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b09c      	sub	sp, #112	; 0x70
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	224c      	movs	r2, #76	; 0x4c
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 ff78 	bl	8005880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2220      	movs	r2, #32
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 ff72 	bl	8005880 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <SystemClock_Config+0xe0>)
 800099e:	f04f 32ff 	mov.w	r2, #4294967295
 80009a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009a6:	2004      	movs	r0, #4
 80009a8:	f000 fe2e 	bl	8001608 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <SystemClock_Config+0xe4>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <SystemClock_Config+0xe4>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <SystemClock_Config+0xe4>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c8:	bf00      	nop
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <SystemClock_Config+0xe4>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d6:	d1f8      	bne.n	80009ca <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009ee:	2318      	movs	r3, #24
 80009f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009fe:	230c      	movs	r3, #12
 8000a00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fe54 	bl	80016bc <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a1a:	f000 f823 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	233f      	movs	r3, #63	; 0x3f
 8000a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2303      	movs	r3, #3
 8000a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2102      	movs	r1, #2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fa6c 	bl	8001f20 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000a4e:	f000 f809 	bl	8000a64 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3770      	adds	r7, #112	; 0x70
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	58024800 	.word	0x58024800

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a7c:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	58024400 	.word	0x58024400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 fab2 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f004 fec2 	bl	80058b0 <__errno>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	220c      	movs	r2, #12
 8000b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24100000 	.word	0x24100000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	2400007c 	.word	0x2400007c
 8000b60:	240002f8 	.word	0x240002f8

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <SystemInit+0xd0>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a31      	ldr	r2, [pc, #196]	; (8000c34 <SystemInit+0xd0>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <SystemInit+0xd4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d807      	bhi.n	8000b94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b84:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <SystemInit+0xd4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 030f 	bic.w	r3, r3, #15
 8000b8c:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <SystemInit+0xd4>)
 8000b8e:	f043 0303 	orr.w	r3, r3, #3
 8000b92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <SystemInit+0xd8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <SystemInit+0xd8>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <SystemInit+0xd8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <SystemInit+0xd8>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4924      	ldr	r1, [pc, #144]	; (8000c3c <SystemInit+0xd8>)
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <SystemInit+0xdc>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <SystemInit+0xd4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d007      	beq.n	8000bce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <SystemInit+0xd4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f023 030f 	bic.w	r3, r3, #15
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <SystemInit+0xd4>)
 8000bc8:	f043 0303 	orr.w	r3, r3, #3
 8000bcc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <SystemInit+0xd8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <SystemInit+0xd8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <SystemInit+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <SystemInit+0xd8>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <SystemInit+0xe0>)
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <SystemInit+0xd8>)
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <SystemInit+0xe4>)
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <SystemInit+0xd8>)
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <SystemInit+0xe8>)
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <SystemInit+0xd8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <SystemInit+0xd8>)
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <SystemInit+0xe8>)
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <SystemInit+0xd8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <SystemInit+0xd8>)
 8000c06:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <SystemInit+0xe8>)
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <SystemInit+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <SystemInit+0xd8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <SystemInit+0xd8>)
 8000c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <SystemInit+0xd8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <SystemInit+0xec>)
 8000c24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	52002000 	.word	0x52002000
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c44:	02020200 	.word	0x02020200
 8000c48:	01ff0000 	.word	0x01ff0000
 8000c4c:	01010280 	.word	0x01010280
 8000c50:	52004000 	.word	0x52004000

08000c54 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_UART4_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c60:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c9e:	f003 faab 	bl	80041f8 <HAL_HalfDuplex_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f7ff fedc 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cb0:	f004 fc47 	bl	8005542 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f7ff fed3 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cc2:	f004 fc7c 	bl	80055be <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ccc:	f7ff feca 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cd2:	f004 fbfd 	bl	80054d0 <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f7ff fec2 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000080 	.word	0x24000080
 8000ce8:	40004c00 	.word	0x40004c00

08000cec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000cf2:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <MX_USART3_UART_Init+0x94>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000d34:	4811      	ldr	r0, [pc, #68]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d36:	f003 fa5f 	bl	80041f8 <HAL_HalfDuplex_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d40:	f7ff fe90 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d48:	f004 fbfb 	bl	8005542 <HAL_UARTEx_SetTxFifoThreshold>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d52:	f7ff fe87 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d5a:	f004 fc30 	bl	80055be <HAL_UARTEx_SetRxFifoThreshold>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f7ff fe7e 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f004 fbb1 	bl	80054d0 <HAL_UARTEx_DisableFifoMode>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d74:	f7ff fe76 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24000114 	.word	0x24000114
 8000d80:	40004800 	.word	0x40004800

08000d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0bc      	sub	sp, #240	; 0xf0
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	22c0      	movs	r2, #192	; 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fd6b 	bl	8005880 <memset>
  if(uartHandle->Instance==UART4)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <HAL_UART_MspInit+0x18c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d146      	bne.n	8000e42 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000db4:	f04f 0202 	mov.w	r2, #2
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fc34 	bl	8002638 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dd6:	f7ff fe45 	bl	8000a64 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dda:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000ddc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000de0:	4a4c      	ldr	r2, [pc, #304]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000de2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000de6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000dec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfe:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e08:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4837      	ldr	r0, [pc, #220]	; (8000f18 <HAL_UART_MspInit+0x194>)
 8000e3c:	f000 fa34 	bl	80012a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e40:	e061      	b.n	8000f06 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <HAL_UART_MspInit+0x198>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d15c      	bne.n	8000f06 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e4c:	f04f 0202 	mov.w	r2, #2
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fbe8 	bl	8002638 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000e6e:	f7ff fdf9 	bl	8000a64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000e74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e78:	4a26      	ldr	r2, [pc, #152]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000e84:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000e92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e96:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_UART_MspInit+0x190>)
 8000ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb6:	2312      	movs	r3, #18
 8000eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4810      	ldr	r0, [pc, #64]	; (8000f18 <HAL_UART_MspInit+0x194>)
 8000ed6:	f000 f9e7 	bl	80012a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_UART_MspInit+0x194>)
 8000f02:	f000 f9d1 	bl	80012a8 <HAL_GPIO_Init>
}
 8000f06:	bf00      	nop
 8000f08:	37f0      	adds	r7, #240	; 0xf0
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40004c00 	.word	0x40004c00
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020c00 	.word	0x58020c00
 8000f1c:	40004800 	.word	0x40004800

08000f20 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f24:	f7ff fe1e 	bl	8000b64 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f004 fcb5 	bl	80058bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fcc9 	bl	80008e8 <main>
  bx  lr
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f60:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000f64:	08006354 	.word	0x08006354
  ldr r2, =_sbss
 8000f68:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000f6c:	240002f4 	.word	0x240002f4

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f962 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f80:	f001 f984 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_Init+0x68>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <HAL_Init+0x6c>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_Init+0x68>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_Init+0x6c>)
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x70>)
 8000fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_Init+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f814 	bl	8000fec <HAL_InitTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e002      	b.n	8000fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fd4f 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	080062d8 	.word	0x080062d8
 8000fe4:	24000004 	.word	0x24000004
 8000fe8:	24000000 	.word	0x24000000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e021      	b.n	8001044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_InitTick+0x64>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f939 	bl	800128e <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f911 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x68>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2400000c 	.word	0x2400000c
 8001050:	24000000 	.word	0x24000000
 8001054:	24000008 	.word	0x24000008

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2400000c 	.word	0x2400000c
 800107c:	240001a8 	.word	0x240001a8

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	240001a8 	.word	0x240001a8

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <__NVIC_SetPriorityGrouping+0x40>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	4313      	orrs	r3, r2
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x40>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	05fa0000 	.word	0x05fa0000

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff47 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff5e 	bl	8001128 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff90 	bl	8001198 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5f 	bl	8001144 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffb2 	bl	8001200 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012b6:	4b89      	ldr	r3, [pc, #548]	; (80014dc <HAL_GPIO_Init+0x234>)
 80012b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ba:	e194      	b.n	80015e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2101      	movs	r1, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8186 	beq.w	80015e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d005      	beq.n	80012ec <HAL_GPIO_Init+0x44>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d130      	bne.n	800134e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001322:	2201      	movs	r2, #1
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 0201 	and.w	r2, r3, #1
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b03      	cmp	r3, #3
 8001358:	d017      	beq.n	800138a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d123      	bne.n	80013de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	69b9      	ldr	r1, [r7, #24]
 80013da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0203 	and.w	r2, r3, #3
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80e0 	beq.w	80015e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <HAL_GPIO_Init+0x238>)
 8001422:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <HAL_GPIO_Init+0x238>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_GPIO_Init+0x238>)
 8001432:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143e:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x23c>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <HAL_GPIO_Init+0x240>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d052      	beq.n	8001510 <HAL_GPIO_Init+0x268>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_GPIO_Init+0x244>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d031      	beq.n	80014d6 <HAL_GPIO_Init+0x22e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_GPIO_Init+0x248>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x22a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_GPIO_Init+0x24c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x226>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_GPIO_Init+0x250>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x222>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_GPIO_Init+0x254>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x21e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <HAL_GPIO_Init+0x258>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x21a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_GPIO_Init+0x25c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x216>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a18      	ldr	r2, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x260>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x212>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_GPIO_Init+0x264>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x20e>
 80014b2:	2309      	movs	r3, #9
 80014b4:	e02d      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014b6:	230a      	movs	r3, #10
 80014b8:	e02b      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014ba:	2308      	movs	r3, #8
 80014bc:	e029      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014be:	2307      	movs	r3, #7
 80014c0:	e027      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014c2:	2306      	movs	r3, #6
 80014c4:	e025      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014c6:	2305      	movs	r3, #5
 80014c8:	e023      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e021      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e01f      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e01d      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e01b      	b.n	8001512 <HAL_GPIO_Init+0x26a>
 80014da:	bf00      	nop
 80014dc:	58000080 	.word	0x58000080
 80014e0:	58024400 	.word	0x58024400
 80014e4:	58000400 	.word	0x58000400
 80014e8:	58020000 	.word	0x58020000
 80014ec:	58020400 	.word	0x58020400
 80014f0:	58020800 	.word	0x58020800
 80014f4:	58020c00 	.word	0x58020c00
 80014f8:	58021000 	.word	0x58021000
 80014fc:	58021400 	.word	0x58021400
 8001500:	58021800 	.word	0x58021800
 8001504:	58021c00 	.word	0x58021c00
 8001508:	58022000 	.word	0x58022000
 800150c:	58022400 	.word	0x58022400
 8001510:	2300      	movs	r3, #0
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	f002 0203 	and.w	r2, r2, #3
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4093      	lsls	r3, r2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001522:	4938      	ldr	r1, [pc, #224]	; (8001604 <HAL_GPIO_Init+0x35c>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f47f ae63 	bne.w	80012bc <HAL_GPIO_Init+0x14>
  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	; 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	58000400 	.word	0x58000400

08001608 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	2b06      	cmp	r3, #6
 800161a:	d00a      	beq.n	8001632 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e040      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e03e      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800163a:	491f      	ldr	r1, [pc, #124]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4313      	orrs	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001642:	f7ff fd1d 	bl	8001080 <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001648:	e009      	b.n	800165e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800164a:	f7ff fd19 	bl	8001080 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001658:	d901      	bls.n	800165e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e028      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166a:	d1ee      	bne.n	800164a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b1e      	cmp	r3, #30
 8001670:	d008      	beq.n	8001684 <HAL_PWREx_ConfigSupply+0x7c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b2e      	cmp	r3, #46	; 0x2e
 8001676:	d005      	beq.n	8001684 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b1d      	cmp	r3, #29
 800167c:	d002      	beq.n	8001684 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b2d      	cmp	r3, #45	; 0x2d
 8001682:	d114      	bne.n	80016ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001684:	f7ff fcfc 	bl	8001080 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800168a:	e009      	b.n	80016a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800168c:	f7ff fcf8 	bl	8001080 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169a:	d901      	bls.n	80016a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e007      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ac:	d1ee      	bne.n	800168c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58024800 	.word	0x58024800

080016bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f000 bc1f 	b.w	8001f0e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80b3 	beq.w	8001844 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016de:	4b95      	ldr	r3, [pc, #596]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d007      	beq.n	8001704 <HAL_RCC_OscConfig+0x48>
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	2b18      	cmp	r3, #24
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x64>
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d10d      	bne.n	8001720 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8098 	beq.w	8001842 <HAL_RCC_OscConfig+0x186>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 8093 	bne.w	8001842 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e3f6      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x7c>
 800172a:	4b82      	ldr	r3, [pc, #520]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a81      	ldr	r2, [pc, #516]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e058      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d112      	bne.n	8001766 <HAL_RCC_OscConfig+0xaa>
 8001740:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a7b      	ldr	r2, [pc, #492]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b79      	ldr	r3, [pc, #484]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a78      	ldr	r2, [pc, #480]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b76      	ldr	r3, [pc, #472]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a75      	ldr	r2, [pc, #468]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e041      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176e:	d112      	bne.n	8001796 <HAL_RCC_OscConfig+0xda>
 8001770:	4b70      	ldr	r3, [pc, #448]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b6d      	ldr	r3, [pc, #436]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6c      	ldr	r2, [pc, #432]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a69      	ldr	r2, [pc, #420]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e029      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800179e:	d112      	bne.n	80017c6 <HAL_RCC_OscConfig+0x10a>
 80017a0:	4b64      	ldr	r3, [pc, #400]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a63      	ldr	r2, [pc, #396]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e011      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
 80017c6:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b58      	ldr	r3, [pc, #352]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a57      	ldr	r2, [pc, #348]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b55      	ldr	r3, [pc, #340]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a54      	ldr	r2, [pc, #336]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fc45 	bl	8001080 <HAL_GetTick>
 80017f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fa:	f7ff fc41 	bl	8001080 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e380      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800180c:	4b49      	ldr	r3, [pc, #292]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x13e>
 8001818:	e014      	b.n	8001844 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fc31 	bl	8001080 <HAL_GetTick>
 800181e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001822:	f7ff fc2d 	bl	8001080 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b64      	cmp	r3, #100	; 0x64
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e36c      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001834:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x166>
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 808c 	beq.w	800196a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800185a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_RCC_OscConfig+0x1bc>
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	2b18      	cmp	r3, #24
 800186c:	d137      	bne.n	80018de <HAL_RCC_OscConfig+0x222>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d132      	bne.n	80018de <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x1d4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e33e      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 0219 	bic.w	r2, r3, #25
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4925      	ldr	r1, [pc, #148]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fbed 	bl	8001080 <HAL_GetTick>
 80018a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fbe9 	bl	8001080 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e328      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	4917      	ldr	r1, [pc, #92]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018dc:	e045      	b.n	800196a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d028      	beq.n	8001938 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0219 	bic.w	r2, r3, #25
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4910      	ldr	r1, [pc, #64]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fbc2 	bl	8001080 <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff fbbe 	bl	8001080 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e2fd      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	061b      	lsls	r3, r3, #24
 800192c:	4901      	ldr	r1, [pc, #4]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
 8001932:	e01a      	b.n	800196a <HAL_RCC_OscConfig+0x2ae>
 8001934:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001938:	4b97      	ldr	r3, [pc, #604]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb9c 	bl	8001080 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fb98 	bl	8001080 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e2d7      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800195e:	4b8e      	ldr	r3, [pc, #568]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06a      	beq.n	8001a4c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800197e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001980:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d007      	beq.n	800199c <HAL_RCC_OscConfig+0x2e0>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b18      	cmp	r3, #24
 8001990:	d11b      	bne.n	80019ca <HAL_RCC_OscConfig+0x30e>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d116      	bne.n	80019ca <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800199c:	4b7e      	ldr	r3, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2f8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b80      	cmp	r3, #128	; 0x80
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e2ac      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019b4:	4b78      	ldr	r3, [pc, #480]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	4975      	ldr	r1, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019c8:	e040      	b.n	8001a4c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d023      	beq.n	8001a1a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019d2:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a70      	ldr	r2, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fb4f 	bl	8001080 <HAL_GetTick>
 80019e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb4b 	bl	8001080 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e28a      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a04:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	4961      	ldr	r1, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
 8001a18:	e018      	b.n	8001a4c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a5e      	ldr	r2, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff fb2b 	bl	8001080 <HAL_GetTick>
 8001a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fb27 	bl	8001080 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e266      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a40:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d036      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d019      	beq.n	8001a94 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a60:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a64:	4a4c      	ldr	r2, [pc, #304]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fb08 	bl	8001080 <HAL_GetTick>
 8001a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fb04 	bl	8001080 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e243      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a86:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x3b8>
 8001a92:	e018      	b.n	8001ac6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	4a3f      	ldr	r2, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff faee 	bl	8001080 <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff faea 	bl	8001080 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e229      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d036      	beq.n	8001b40 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d019      	beq.n	8001b0e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2e      	ldr	r2, [pc, #184]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff facb 	bl	8001080 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aee:	f7ff fac7 	bl	8001080 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e206      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x432>
 8001b0c:	e018      	b.n	8001b40 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fab1 	bl	8001080 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b22:	f7ff faad 	bl	8001080 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1ec      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80af 	beq.w	8001cac <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_OscConfig+0x4e0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_RCC_OscConfig+0x4e0>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b5a:	f7ff fa91 	bl	8001080 <HAL_GetTick>
 8001b5e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7ff fa8d 	bl	8001080 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1cc      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_OscConfig+0x4e0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4e4>
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a02      	ldr	r2, [pc, #8]	; (8001b98 <HAL_RCC_OscConfig+0x4dc>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	e05b      	b.n	8001c4e <HAL_RCC_OscConfig+0x592>
 8001b96:	bf00      	nop
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58024800 	.word	0x58024800
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d112      	bne.n	8001bce <HAL_RCC_OscConfig+0x512>
 8001ba8:	4b9d      	ldr	r3, [pc, #628]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a9c      	ldr	r2, [pc, #624]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	4b9a      	ldr	r3, [pc, #616]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a99      	ldr	r2, [pc, #612]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc0:	4b97      	ldr	r3, [pc, #604]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a96      	ldr	r2, [pc, #600]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bc6:	f023 0304 	bic.w	r3, r3, #4
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e03f      	b.n	8001c4e <HAL_RCC_OscConfig+0x592>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d112      	bne.n	8001bfc <HAL_RCC_OscConfig+0x540>
 8001bd6:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a91      	ldr	r2, [pc, #580]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a8e      	ldr	r2, [pc, #568]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a8b      	ldr	r2, [pc, #556]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	e028      	b.n	8001c4e <HAL_RCC_OscConfig+0x592>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b85      	cmp	r3, #133	; 0x85
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x56e>
 8001c04:	4b86      	ldr	r3, [pc, #536]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	4a85      	ldr	r2, [pc, #532]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c10:	4b83      	ldr	r3, [pc, #524]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a82      	ldr	r2, [pc, #520]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	e011      	b.n	8001c4e <HAL_RCC_OscConfig+0x592>
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6713      	str	r3, [r2, #112]	; 0x70
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a79      	ldr	r2, [pc, #484]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	4b77      	ldr	r3, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a76      	ldr	r2, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d015      	beq.n	8001c82 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa13 	bl	8001080 <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fa0f 	bl	8001080 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e14c      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c74:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCC_OscConfig+0x5a2>
 8001c80:	e014      	b.n	8001cac <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f9fd 	bl	8001080 <HAL_GetTick>
 8001c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f9f9 	bl	8001080 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e136      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ca0:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ee      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 812b 	beq.w	8001f0c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cb6:	4b5a      	ldr	r3, [pc, #360]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cbe:	2b18      	cmp	r3, #24
 8001cc0:	f000 80bb 	beq.w	8001e3a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	f040 8095 	bne.w	8001df8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a53      	ldr	r2, [pc, #332]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f9d1 	bl	8001080 <HAL_GetTick>
 8001cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f9cd 	bl	8001080 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e10c      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d04:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_OscConfig+0x768>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	430a      	orrs	r2, r1
 8001d14:	4942      	ldr	r1, [pc, #264]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	628b      	str	r3, [r1, #40]	; 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d34:	3b01      	subs	r3, #1
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	3b01      	subs	r3, #1
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d4a:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d68:	00d2      	lsls	r2, r2, #3
 8001d6a:	492d      	ldr	r1, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f023 020c 	bic.w	r2, r3, #12
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4928      	ldr	r1, [pc, #160]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	f023 0202 	bic.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4924      	ldr	r1, [pc, #144]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f956 	bl	8001080 <HAL_GetTick>
 8001dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f952 	bl	8001080 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e091      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x71c>
 8001df6:	e089      	b.n	8001f0c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x764>)
 8001dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f93c 	bl	8001080 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f938 	bl	8001080 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e077      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
 8001e1e:	bf00      	nop
 8001e20:	58024400 	.word	0x58024400
 8001e24:	fffffc0c 	.word	0xfffffc0c
 8001e28:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x750>
 8001e38:	e068      	b.n	8001f0c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e40:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d031      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d12a      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d122      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d11a      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d111      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d108      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	0e1b      	lsrs	r3, r3, #24
 8001ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e02b      	b.n	8001f0e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ec0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d01f      	beq.n	8001f0c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ed8:	f7ff f8d2 	bl	8001080 <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ede:	bf00      	nop
 8001ee0:	f7ff f8ce 	bl	8001080 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d0f9      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_OscConfig+0x860>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	4907      	ldr	r1, [pc, #28]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_RCC_OscConfig+0x85c>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3730      	adds	r7, #48	; 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	ffff0007 	.word	0xffff0007

08001f20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e19c      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b8a      	ldr	r3, [pc, #552]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b87      	ldr	r3, [pc, #540]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 020f 	bic.w	r2, r3, #15
 8001f4a:	4985      	ldr	r1, [pc, #532]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b83      	ldr	r3, [pc, #524]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e184      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d908      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f80:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	4975      	ldr	r1, [pc, #468]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	4b70      	ldr	r3, [pc, #448]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fae:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	496a      	ldr	r1, [pc, #424]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d908      	bls.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fdc:	4b61      	ldr	r3, [pc, #388]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	495e      	ldr	r1, [pc, #376]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002006:	429a      	cmp	r2, r3
 8002008:	d908      	bls.n	800201c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800200a:	4b56      	ldr	r3, [pc, #344]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4953      	ldr	r1, [pc, #332]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002018:	4313      	orrs	r3, r2
 800201a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f023 020f 	bic.w	r2, r3, #15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4947      	ldr	r1, [pc, #284]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002046:	4313      	orrs	r3, r2
 8002048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d055      	beq.n	8002102 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4940      	ldr	r1, [pc, #256]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002064:	4313      	orrs	r3, r2
 8002066:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002070:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d121      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0f6      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d107      	bne.n	8002098 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d115      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0ea      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0de      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d6      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f023 0207 	bic.w	r2, r3, #7
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4925      	ldr	r1, [pc, #148]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d2:	f7fe ffd5 	bl	8001080 <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020da:	f7fe ffd1 	bl	8001080 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0be      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	429a      	cmp	r2, r3
 8002100:	d1eb      	bne.n	80020da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	429a      	cmp	r2, r3
 800211c:	d208      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f023 020f 	bic.w	r2, r3, #15
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d214      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 020f 	bic.w	r2, r3, #15
 8002146:	4906      	ldr	r1, [pc, #24]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e086      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
 8002160:	52002000 	.word	0x52002000
 8002164:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002180:	429a      	cmp	r2, r3
 8002182:	d208      	bcs.n	8002196 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4939      	ldr	r1, [pc, #228]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002192:	4313      	orrs	r3, r2
 8002194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d208      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	492e      	ldr	r1, [pc, #184]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021dc:	429a      	cmp	r2, r3
 80021de:	d208      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4922      	ldr	r1, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800220a:	429a      	cmp	r2, r3
 800220c:	d208      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4917      	ldr	r1, [pc, #92]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 800221c:	4313      	orrs	r3, r2
 800221e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002220:	f000 f834 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4912      	ldr	r1, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x35c>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a0d      	ldr	r2, [pc, #52]	; (800227c <HAL_RCC_ClockConfig+0x35c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x360>)
 8002256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x364>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x368>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fec2 	bl	8000fec <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024400 	.word	0x58024400
 800227c:	080062d8 	.word	0x080062d8
 8002280:	24000004 	.word	0x24000004
 8002284:	24000000 	.word	0x24000000
 8002288:	24000008 	.word	0x24000008

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4bb3      	ldr	r3, [pc, #716]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229a:	2b18      	cmp	r3, #24
 800229c:	f200 8155 	bhi.w	800254a <HAL_RCC_GetSysClockFreq+0x2be>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	0800230d 	.word	0x0800230d
 80022ac:	0800254b 	.word	0x0800254b
 80022b0:	0800254b 	.word	0x0800254b
 80022b4:	0800254b 	.word	0x0800254b
 80022b8:	0800254b 	.word	0x0800254b
 80022bc:	0800254b 	.word	0x0800254b
 80022c0:	0800254b 	.word	0x0800254b
 80022c4:	0800254b 	.word	0x0800254b
 80022c8:	08002333 	.word	0x08002333
 80022cc:	0800254b 	.word	0x0800254b
 80022d0:	0800254b 	.word	0x0800254b
 80022d4:	0800254b 	.word	0x0800254b
 80022d8:	0800254b 	.word	0x0800254b
 80022dc:	0800254b 	.word	0x0800254b
 80022e0:	0800254b 	.word	0x0800254b
 80022e4:	0800254b 	.word	0x0800254b
 80022e8:	08002339 	.word	0x08002339
 80022ec:	0800254b 	.word	0x0800254b
 80022f0:	0800254b 	.word	0x0800254b
 80022f4:	0800254b 	.word	0x0800254b
 80022f8:	0800254b 	.word	0x0800254b
 80022fc:	0800254b 	.word	0x0800254b
 8002300:	0800254b 	.word	0x0800254b
 8002304:	0800254b 	.word	0x0800254b
 8002308:	0800233f 	.word	0x0800233f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800230c:	4b94      	ldr	r3, [pc, #592]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002318:	4b91      	ldr	r3, [pc, #580]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	4a90      	ldr	r2, [pc, #576]	; (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800232a:	e111      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800232c:	4b8d      	ldr	r3, [pc, #564]	; (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800232e:	61bb      	str	r3, [r7, #24]
      break;
 8002330:	e10e      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002332:	4b8d      	ldr	r3, [pc, #564]	; (8002568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002334:	61bb      	str	r3, [r7, #24]
      break;
 8002336:	e10b      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002338:	4b8c      	ldr	r3, [pc, #560]	; (800256c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800233a:	61bb      	str	r3, [r7, #24]
      break;
 800233c:	e108      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002348:	4b85      	ldr	r3, [pc, #532]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002352:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002354:	4b82      	ldr	r3, [pc, #520]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800235e:	4b80      	ldr	r3, [pc, #512]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002376:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80e1 	beq.w	8002544 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b02      	cmp	r3, #2
 8002386:	f000 8083 	beq.w	8002490 <HAL_RCC_GetSysClockFreq+0x204>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b02      	cmp	r3, #2
 800238e:	f200 80a1 	bhi.w	80024d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x114>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d056      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x1c0>
 800239e:	e099      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023a0:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02d      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023ac:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	4a6b      	ldr	r2, [pc, #428]	; (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002406:	e087      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002574 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241a:	4b51      	ldr	r3, [pc, #324]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242a:	ed97 6a02 	vldr	s12, [r7, #8]
 800242e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800243a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800243e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800244a:	e065      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002578 <HAL_RCC_GetSysClockFreq+0x2ec>
 800245a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245e:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002472:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800247a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800248e:	e043      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800257c <HAL_RCC_GetSysClockFreq+0x2f0>
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024d2:	e021      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002578 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002516:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	0a5b      	lsrs	r3, r3, #9
 800251e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002522:	3301      	adds	r3, #1
 8002524:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002530:	edd7 6a07 	vldr	s13, [r7, #28]
 8002534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253c:	ee17 3a90 	vmov	r3, s15
 8002540:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002542:	e005      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
      break;
 8002548:	e002      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800254c:	61bb      	str	r3, [r7, #24]
      break;
 800254e:	bf00      	nop
  }

  return sysclockfreq;
 8002550:	69bb      	ldr	r3, [r7, #24]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	58024400 	.word	0x58024400
 8002564:	03d09000 	.word	0x03d09000
 8002568:	003d0900 	.word	0x003d0900
 800256c:	007a1200 	.word	0x007a1200
 8002570:	46000000 	.word	0x46000000
 8002574:	4c742400 	.word	0x4c742400
 8002578:	4a742400 	.word	0x4a742400
 800257c:	4af42400 	.word	0x4af42400

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002586:	f7ff fe81 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490f      	ldr	r1, [pc, #60]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80025bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58024400 	.word	0x58024400
 80025d4:	080062d8 	.word	0x080062d8
 80025d8:	24000004 	.word	0x24000004
 80025dc:	24000000 	.word	0x24000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80025e4:	f7ff ffcc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4904      	ldr	r1, [pc, #16]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58024400 	.word	0x58024400
 8002608:	080062d8 	.word	0x080062d8

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002610:	f7ff ffb6 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4904      	ldr	r1, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	58024400 	.word	0x58024400
 8002634:	080062d8 	.word	0x080062d8

08002638 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800263c:	b0c8      	sub	sp, #288	; 0x120
 800263e:	af00      	add	r7, sp, #0
 8002640:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002644:	2300      	movs	r3, #0
 8002646:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800264a:	2300      	movs	r3, #0
 800264c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800265c:	2500      	movs	r5, #0
 800265e:	ea54 0305 	orrs.w	r3, r4, r5
 8002662:	d049      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800266e:	d02f      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002674:	d828      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800267a:	d01a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800267c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002680:	d822      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800268a:	d007      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800268c:	e01c      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268e:	4ba7      	ldr	r3, [pc, #668]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	4aa6      	ldr	r2, [pc, #664]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800269a:	e01a      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800269c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a0:	3308      	adds	r3, #8
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 fc43 	bl	8003f30 <RCCEx_PLL2_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026b0:	e00f      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80026b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b6:	3328      	adds	r3, #40	; 0x28
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 fcea 	bl	8004094 <RCCEx_PLL3_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026c6:	e004      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026ce:	e000      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80026d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026da:	4b94      	ldr	r3, [pc, #592]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80026e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e8:	4a90      	ldr	r2, [pc, #576]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ea:	430b      	orrs	r3, r1
 80026ec:	6513      	str	r3, [r2, #80]	; 0x50
 80026ee:	e003      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002704:	f04f 0900 	mov.w	r9, #0
 8002708:	ea58 0309 	orrs.w	r3, r8, r9
 800270c:	d047      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800270e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	2b04      	cmp	r3, #4
 8002716:	d82a      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002735 	.word	0x08002735
 8002724:	08002743 	.word	0x08002743
 8002728:	08002759 	.word	0x08002759
 800272c:	08002777 	.word	0x08002777
 8002730:	08002777 	.word	0x08002777
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002734:	4b7d      	ldr	r3, [pc, #500]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	4a7c      	ldr	r2, [pc, #496]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002740:	e01a      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002746:	3308      	adds	r3, #8
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fbf0 	bl	8003f30 <RCCEx_PLL2_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002756:	e00f      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800275c:	3328      	adds	r3, #40	; 0x28
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fc97 	bl	8004094 <RCCEx_PLL3_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800276c:	e004      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002774:	e000      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002778:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002784:	f023 0107 	bic.w	r1, r3, #7
 8002788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4a67      	ldr	r2, [pc, #412]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002790:	430b      	orrs	r3, r1
 8002792:	6513      	str	r3, [r2, #80]	; 0x50
 8002794:	e003      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002796:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800279a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800279e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80027aa:	f04f 0b00 	mov.w	fp, #0
 80027ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80027b2:	d054      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80027b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027be:	d036      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80027c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027c4:	d82f      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ca:	d032      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80027cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d0:	d829      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027d2:	2bc0      	cmp	r3, #192	; 0xc0
 80027d4:	d02f      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80027d6:	2bc0      	cmp	r3, #192	; 0xc0
 80027d8:	d825      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d018      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80027de:	2b80      	cmp	r3, #128	; 0x80
 80027e0:	d821      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d007      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80027ea:	e01c      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ec:	4b4f      	ldr	r3, [pc, #316]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	4a4e      	ldr	r2, [pc, #312]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80027f8:	e01e      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027fe:	3308      	adds	r3, #8
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f001 fb94 	bl	8003f30 <RCCEx_PLL2_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800280e:	e013      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002814:	3328      	adds	r3, #40	; 0x28
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fc3b 	bl	8004094 <RCCEx_PLL3_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002824:	e008      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800282c:	e004      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002838:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002844:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	4a37      	ldr	r2, [pc, #220]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002850:	430b      	orrs	r3, r1
 8002852:	6513      	str	r3, [r2, #80]	; 0x50
 8002854:	e003      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002856:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800285a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800285e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800286a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002874:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002878:	460b      	mov	r3, r1
 800287a:	4313      	orrs	r3, r2
 800287c:	d05c      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800287e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002884:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002888:	d03b      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800288a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800288e:	d834      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002894:	d037      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289a:	d82e      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800289c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028a0:	d033      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80028a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028a6:	d828      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ac:	d01a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b2:	d822      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	d007      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x296>
 80028be:	e01c      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028cc:	e01e      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d2:	3308      	adds	r3, #8
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 fb2a 	bl	8003f30 <RCCEx_PLL2_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028e2:	e013      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e8:	3328      	adds	r3, #40	; 0x28
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 fbd1 	bl	8004094 <RCCEx_PLL3_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028f8:	e008      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002900:	e004      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002902:	bf00      	nop
 8002904:	e002      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800290a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800290c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800291c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	4a02      	ldr	r2, [pc, #8]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002924:	430b      	orrs	r3, r1
 8002926:	6513      	str	r3, [r2, #80]	; 0x50
 8002928:	e006      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800292a:	bf00      	nop
 800292c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002930:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002934:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800294e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002952:	460b      	mov	r3, r1
 8002954:	4313      	orrs	r3, r2
 8002956:	d03a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	2b30      	cmp	r3, #48	; 0x30
 8002960:	d01f      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002962:	2b30      	cmp	r3, #48	; 0x30
 8002964:	d819      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002966:	2b20      	cmp	r3, #32
 8002968:	d00c      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800296a:	2b20      	cmp	r3, #32
 800296c:	d815      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d019      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002972:	2b10      	cmp	r3, #16
 8002974:	d111      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002976:	4bae      	ldr	r3, [pc, #696]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	4aad      	ldr	r2, [pc, #692]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002982:	e011      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002988:	3308      	adds	r3, #8
 800298a:	2102      	movs	r1, #2
 800298c:	4618      	mov	r0, r3
 800298e:	f001 facf 	bl	8003f30 <RCCEx_PLL2_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029a0:	e002      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80029a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029b0:	4b9f      	ldr	r3, [pc, #636]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80029b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	4a9c      	ldr	r2, [pc, #624]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029c0:	430b      	orrs	r3, r1
 80029c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c4:	e003      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80029da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4313      	orrs	r3, r2
 80029ec:	d051      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f8:	d035      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029fe:	d82e      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a04:	d031      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002a06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a0a:	d828      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a10:	d01a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	d822      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d007      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002a22:	e01c      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a24:	4b82      	ldr	r3, [pc, #520]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	4a81      	ldr	r2, [pc, #516]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a30:	e01c      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a36:	3308      	adds	r3, #8
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 fa78 	bl	8003f30 <RCCEx_PLL2_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a4c:	3328      	adds	r3, #40	; 0x28
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 fb1f 	bl	8004094 <RCCEx_PLL3_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a5c:	e006      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a74:	4b6e      	ldr	r3, [pc, #440]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a82:	4a6b      	ldr	r2, [pc, #428]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6513      	str	r3, [r2, #80]	; 0x50
 8002a88:	e003      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002aa8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002aac:	460b      	mov	r3, r1
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	d053      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002abc:	d033      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac2:	d82c      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac8:	d02f      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ace:	d826      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ad4:	d02b      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ada:	d820      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae0:	d012      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae6:	d81a      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d022      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d115      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af6:	3308      	adds	r3, #8
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 fa18 	bl	8003f30 <RCCEx_PLL2_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b06:	e015      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b0c:	3328      	adds	r3, #40	; 0x28
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fabf 	bl	8004094 <RCCEx_PLL3_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b26:	bf00      	nop
 8002b28:	e004      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b2a:	bf00      	nop
 8002b2c:	e002      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b4a:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6513      	str	r3, [r2, #80]	; 0x50
 8002b50:	e003      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b70:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4313      	orrs	r3, r2
 8002b78:	d060      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b82:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002b86:	d039      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002b88:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002b8c:	d832      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b92:	d035      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b98:	d82c      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d031      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d826      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002baa:	d02d      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002bac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bb0:	d820      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb6:	d012      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bbc:	d81a      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d024      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc6:	d115      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bcc:	3308      	adds	r3, #8
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 f9ad 	bl	8003f30 <RCCEx_PLL2_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bdc:	e017      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002be2:	3328      	adds	r3, #40	; 0x28
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 fa54 	bl	8004094 <RCCEx_PLL3_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bf2:	e00c      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bfa:	e008      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bfc:	bf00      	nop
 8002bfe:	e006      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c00:	bf00      	nop
 8002c02:	e004      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c04:	bf00      	nop
 8002c06:	e002      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c08:	bf00      	nop
 8002c0a:	e000      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c26:	4a02      	ldr	r2, [pc, #8]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002c2e:	bf00      	nop
 8002c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c56:	460b      	mov	r3, r1
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	d037      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c66:	d00e      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6c:	d816      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d018      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c76:	d111      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c78:	4bc4      	ldr	r3, [pc, #784]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	4ac3      	ldr	r2, [pc, #780]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c84:	e00f      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 f94e 	bl	8003f30 <RCCEx_PLL2_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c9a:	e004      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ca6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cae:	4bb7      	ldr	r3, [pc, #732]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cbc:	4ab3      	ldr	r2, [pc, #716]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	6513      	str	r3, [r2, #80]	; 0x50
 8002cc2:	e003      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ce2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	d039      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d81c      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d39 	.word	0x08002d39
 8002d00:	08002d0d 	.word	0x08002d0d
 8002d04:	08002d1b 	.word	0x08002d1b
 8002d08:	08002d39 	.word	0x08002d39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d0c:	4b9f      	ldr	r3, [pc, #636]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	4a9e      	ldr	r2, [pc, #632]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d18:	e00f      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1e:	3308      	adds	r3, #8
 8002d20:	2102      	movs	r1, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f904 	bl	8003f30 <RCCEx_PLL2_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d2e:	e004      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d42:	4b92      	ldr	r3, [pc, #584]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	f023 0103 	bic.w	r1, r3, #3
 8002d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	4a8e      	ldr	r2, [pc, #568]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d52:	430b      	orrs	r3, r1
 8002d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d56:	e003      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f000 8099 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d82:	4b83      	ldr	r3, [pc, #524]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a82      	ldr	r2, [pc, #520]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d8e:	f7fe f977 	bl	8001080 <HAL_GetTick>
 8002d92:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d96:	e00b      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe f972 	bl	8001080 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b64      	cmp	r3, #100	; 0x64
 8002da6:	d903      	bls.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dae:	e005      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db0:	4b77      	ldr	r3, [pc, #476]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ed      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002dbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d173      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002dc4:	4b71      	ldr	r3, [pc, #452]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dd0:	4053      	eors	r3, r2
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d015      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dda:	4b6c      	ldr	r3, [pc, #432]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002de6:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a68      	ldr	r2, [pc, #416]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002df2:	4b66      	ldr	r3, [pc, #408]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a65      	ldr	r2, [pc, #404]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002dfe:	4a63      	ldr	r2, [pc, #396]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e12:	d118      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f934 	bl	8001080 <HAL_GetTick>
 8002e18:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e1c:	e00d      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe f92f 	bl	8001080 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e28:	1ad2      	subs	r2, r2, r3
 8002e2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d903      	bls.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002e38:	e005      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3a:	4b54      	ldr	r3, [pc, #336]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0eb      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002e46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d129      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e5e:	d10e      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e70:	091a      	lsrs	r2, r3, #4
 8002e72:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	4a45      	ldr	r2, [pc, #276]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6113      	str	r3, [r2, #16]
 8002e7c:	e005      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e88:	6113      	str	r3, [r2, #16]
 8002e8a:	4b40      	ldr	r3, [pc, #256]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9a:	4a3c      	ldr	r2, [pc, #240]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ea6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002eaa:	e003      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f002 0301 	and.w	r3, r2, #1
 8002ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f000 8090 	beq.w	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ede:	2b28      	cmp	r3, #40	; 0x28
 8002ee0:	d870      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002fcd 	.word	0x08002fcd
 8002eec:	08002fc5 	.word	0x08002fc5
 8002ef0:	08002fc5 	.word	0x08002fc5
 8002ef4:	08002fc5 	.word	0x08002fc5
 8002ef8:	08002fc5 	.word	0x08002fc5
 8002efc:	08002fc5 	.word	0x08002fc5
 8002f00:	08002fc5 	.word	0x08002fc5
 8002f04:	08002fc5 	.word	0x08002fc5
 8002f08:	08002f99 	.word	0x08002f99
 8002f0c:	08002fc5 	.word	0x08002fc5
 8002f10:	08002fc5 	.word	0x08002fc5
 8002f14:	08002fc5 	.word	0x08002fc5
 8002f18:	08002fc5 	.word	0x08002fc5
 8002f1c:	08002fc5 	.word	0x08002fc5
 8002f20:	08002fc5 	.word	0x08002fc5
 8002f24:	08002fc5 	.word	0x08002fc5
 8002f28:	08002faf 	.word	0x08002faf
 8002f2c:	08002fc5 	.word	0x08002fc5
 8002f30:	08002fc5 	.word	0x08002fc5
 8002f34:	08002fc5 	.word	0x08002fc5
 8002f38:	08002fc5 	.word	0x08002fc5
 8002f3c:	08002fc5 	.word	0x08002fc5
 8002f40:	08002fc5 	.word	0x08002fc5
 8002f44:	08002fc5 	.word	0x08002fc5
 8002f48:	08002fcd 	.word	0x08002fcd
 8002f4c:	08002fc5 	.word	0x08002fc5
 8002f50:	08002fc5 	.word	0x08002fc5
 8002f54:	08002fc5 	.word	0x08002fc5
 8002f58:	08002fc5 	.word	0x08002fc5
 8002f5c:	08002fc5 	.word	0x08002fc5
 8002f60:	08002fc5 	.word	0x08002fc5
 8002f64:	08002fc5 	.word	0x08002fc5
 8002f68:	08002fcd 	.word	0x08002fcd
 8002f6c:	08002fc5 	.word	0x08002fc5
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	08002fc5 	.word	0x08002fc5
 8002f78:	08002fc5 	.word	0x08002fc5
 8002f7c:	08002fc5 	.word	0x08002fc5
 8002f80:	08002fc5 	.word	0x08002fc5
 8002f84:	08002fc5 	.word	0x08002fc5
 8002f88:	08002fcd 	.word	0x08002fcd
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	58024800 	.word	0x58024800
 8002f94:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 ffc5 	bl	8003f30 <RCCEx_PLL2_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fac:	e00f      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fb2:	3328      	adds	r3, #40	; 0x28
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 f86c 	bl	8004094 <RCCEx_PLL3_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fc2:	e004      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fca:	e000      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fd6:	4bc0      	ldr	r3, [pc, #768]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe6:	4abc      	ldr	r2, [pc, #752]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6553      	str	r3, [r2, #84]	; 0x54
 8002fec:	e003      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ff2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f002 0302 	and.w	r3, r2, #2
 8003002:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800300c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003010:	460b      	mov	r3, r1
 8003012:	4313      	orrs	r3, r2
 8003014:	d043      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800301a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301e:	2b05      	cmp	r3, #5
 8003020:	d824      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003075 	.word	0x08003075
 800302c:	08003041 	.word	0x08003041
 8003030:	08003057 	.word	0x08003057
 8003034:	08003075 	.word	0x08003075
 8003038:	08003075 	.word	0x08003075
 800303c:	08003075 	.word	0x08003075
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003044:	3308      	adds	r3, #8
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 ff71 	bl	8003f30 <RCCEx_PLL2_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003054:	e00f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305a:	3328      	adds	r3, #40	; 0x28
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f818 	bl	8004094 <RCCEx_PLL3_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800306a:	e004      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003076:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800307e:	4b96      	ldr	r3, [pc, #600]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f023 0107 	bic.w	r1, r3, #7
 8003086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	4a92      	ldr	r2, [pc, #584]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003090:	430b      	orrs	r3, r1
 8003092:	6553      	str	r3, [r2, #84]	; 0x54
 8003094:	e003      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003096:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800309a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	f002 0304 	and.w	r3, r2, #4
 80030aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4313      	orrs	r3, r2
 80030bc:	d043      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d824      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80030ca:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	0800311d 	.word	0x0800311d
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030ff 	.word	0x080030ff
 80030dc:	0800311d 	.word	0x0800311d
 80030e0:	0800311d 	.word	0x0800311d
 80030e4:	0800311d 	.word	0x0800311d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ec:	3308      	adds	r3, #8
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 ff1d 	bl	8003f30 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030fc:	e00f      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003102:	3328      	adds	r3, #40	; 0x28
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f000 ffc4 	bl	8004094 <RCCEx_PLL3_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003126:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	f023 0107 	bic.w	r1, r3, #7
 800312e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003136:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003138:	430b      	orrs	r3, r1
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003142:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f002 0320 	and.w	r3, r2, #32
 8003152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800315c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003160:	460b      	mov	r3, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	d055      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003172:	d033      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003178:	d82c      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d02f      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d826      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003186:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800318a:	d02b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800318c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003190:	d820      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003196:	d012      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800319c:	d81a      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d022      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80031a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031a6:	d115      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ac:	3308      	adds	r3, #8
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 febd 	bl	8003f30 <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031bc:	e015      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c2:	3328      	adds	r3, #40	; 0x28
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 ff64 	bl	8004094 <RCCEx_PLL3_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031d2:	e00a      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031da:	e006      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f2:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003202:	4a35      	ldr	r2, [pc, #212]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6553      	str	r3, [r2, #84]	; 0x54
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800320e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800322c:	460b      	mov	r3, r1
 800322e:	4313      	orrs	r3, r2
 8003230:	d058      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003236:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800323a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800323e:	d033      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003240:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003244:	d82c      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d02f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003250:	d826      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003252:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003256:	d02b      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325c:	d820      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003262:	d012      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d81a      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d022      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003272:	d115      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003278:	3308      	adds	r3, #8
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fe57 	bl	8003f30 <RCCEx_PLL2_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003288:	e015      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800328a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800328e:	3328      	adds	r3, #40	; 0x28
 8003290:	2102      	movs	r1, #2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fefe 	bl	8004094 <RCCEx_PLL3_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800329e:	e00a      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032a6:	e006      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032a8:	bf00      	nop
 80032aa:	e004      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032ac:	bf00      	nop
 80032ae:	e002      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80032c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032ce:	4a02      	ldr	r2, [pc, #8]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6593      	str	r3, [r2, #88]	; 0x58
 80032d4:	e006      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80032f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80032fe:	460b      	mov	r3, r1
 8003300:	4313      	orrs	r3, r2
 8003302:	d055      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003308:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800330c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003310:	d033      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003312:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003316:	d82c      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331c:	d02f      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003322:	d826      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003324:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003328:	d02b      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800332a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800332e:	d820      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003334:	d012      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333a:	d81a      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d022      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003344:	d115      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334a:	3308      	adds	r3, #8
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fdee 	bl	8003f30 <RCCEx_PLL2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800335a:	e015      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800335c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003360:	3328      	adds	r3, #40	; 0x28
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fe95 	bl	8004094 <RCCEx_PLL3_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003370:	e00a      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800337a:	bf00      	nop
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003390:	4ba1      	ldr	r3, [pc, #644]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033a0:	4a9d      	ldr	r2, [pc, #628]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6593      	str	r3, [r2, #88]	; 0x58
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f002 0308 	and.w	r3, r2, #8
 80033bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d01e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e2:	3328      	adds	r3, #40	; 0x28
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fe54 	bl	8004094 <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033f8:	4b87      	ldr	r3, [pc, #540]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	4a83      	ldr	r2, [pc, #524]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800340e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f002 0310 	and.w	r3, r2, #16
 800341a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003424:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003428:	460b      	mov	r3, r1
 800342a:	4313      	orrs	r3, r2
 800342c:	d01e      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800342e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343a:	d10c      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003440:	3328      	adds	r3, #40	; 0x28
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fe25 	bl	8004094 <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003456:	4b70      	ldr	r3, [pc, #448]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800345e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003466:	4a6c      	ldr	r2, [pc, #432]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003468:	430b      	orrs	r3, r1
 800346a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800346c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d03e      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003490:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003498:	d022      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800349a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800349e:	d81b      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80034aa:	e015      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b0:	3308      	adds	r3, #8
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fd3b 	bl	8003f30 <RCCEx_PLL2_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c6:	3328      	adds	r3, #40	; 0x28
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fde2 	bl	8004094 <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ea:	4b4b      	ldr	r3, [pc, #300]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034fa:	4a47      	ldr	r2, [pc, #284]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003506:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003516:	67bb      	str	r3, [r7, #120]	; 0x78
 8003518:	2300      	movs	r3, #0
 800351a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800351c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d03b      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003532:	d01f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003538:	d818      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353e:	d003      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003544:	d007      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003546:	e011      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b33      	ldr	r3, [pc, #204]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a32      	ldr	r2, [pc, #200]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355a:	3328      	adds	r3, #40	; 0x28
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd98 	bl	8004094 <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003590:	430b      	orrs	r3, r1
 8003592:	6553      	str	r3, [r2, #84]	; 0x54
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800359a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800359e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80035aa:	673b      	str	r3, [r7, #112]	; 0x70
 80035ac:	2300      	movs	r3, #0
 80035ae:	677b      	str	r3, [r7, #116]	; 0x74
 80035b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d034      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c8:	d007      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80035ca:	e011      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035d8:	e00e      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035de:	3308      	adds	r3, #8
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fca4 	bl	8003f30 <RCCEx_PLL2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035ee:	e003      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003604:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	4a02      	ldr	r2, [pc, #8]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003610:	430b      	orrs	r3, r1
 8003612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003620:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003630:	66bb      	str	r3, [r7, #104]	; 0x68
 8003632:	2300      	movs	r3, #0
 8003634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003636:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800363a:	460b      	mov	r3, r1
 800363c:	4313      	orrs	r3, r2
 800363e:	d00c      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003644:	3328      	adds	r3, #40	; 0x28
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fd23 	bl	8004094 <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800365a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003666:	663b      	str	r3, [r7, #96]	; 0x60
 8003668:	2300      	movs	r3, #0
 800366a:	667b      	str	r3, [r7, #100]	; 0x64
 800366c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d038      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003682:	d018      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003688:	d811      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800368a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368e:	d014      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003694:	d80b      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d011      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369e:	d106      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4bc3      	ldr	r3, [pc, #780]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	4ac2      	ldr	r2, [pc, #776]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c8:	4bb9      	ldr	r3, [pc, #740]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	4ab5      	ldr	r2, [pc, #724]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6553      	str	r3, [r2, #84]	; 0x54
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80036f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036f6:	2300      	movs	r3, #0
 80036f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80036fe:	460b      	mov	r3, r1
 8003700:	4313      	orrs	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003704:	4baa      	ldr	r3, [pc, #680]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003712:	4aa7      	ldr	r2, [pc, #668]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003724:	653b      	str	r3, [r7, #80]	; 0x50
 8003726:	2300      	movs	r3, #0
 8003728:	657b      	str	r3, [r7, #84]	; 0x54
 800372a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800372e:	460b      	mov	r3, r1
 8003730:	4313      	orrs	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003734:	4b9e      	ldr	r3, [pc, #632]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800373c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a9b      	ldr	r2, [pc, #620]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003754:	64bb      	str	r3, [r7, #72]	; 0x48
 8003756:	2300      	movs	r3, #0
 8003758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003764:	4b92      	ldr	r3, [pc, #584]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800376c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4a8f      	ldr	r2, [pc, #572]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003774:	430b      	orrs	r3, r1
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003784:	643b      	str	r3, [r7, #64]	; 0x40
 8003786:	2300      	movs	r3, #0
 8003788:	647b      	str	r3, [r7, #68]	; 0x44
 800378a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003794:	4b86      	ldr	r3, [pc, #536]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4a85      	ldr	r2, [pc, #532]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800379a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800379e:	6113      	str	r3, [r2, #16]
 80037a0:	4b83      	ldr	r3, [pc, #524]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037a2:	6919      	ldr	r1, [r3, #16]
 80037a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037ac:	4a80      	ldr	r2, [pc, #512]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c0:	2300      	movs	r3, #0
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037ce:	4b78      	ldr	r3, [pc, #480]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	4a74      	ldr	r2, [pc, #464]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
 80037f0:	2300      	movs	r3, #0
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
 80037f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037fe:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	4a68      	ldr	r2, [pc, #416]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	2100      	movs	r1, #0
 800381e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	d011      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003834:	3308      	adds	r3, #8
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fb79 	bl	8003f30 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003844:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003850:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	2100      	movs	r1, #0
 800385e:	6239      	str	r1, [r7, #32]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d011      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003874:	3308      	adds	r3, #8
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb59 	bl	8003f30 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003884:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	2100      	movs	r1, #0
 800389e:	61b9      	str	r1, [r7, #24]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d011      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b4:	3308      	adds	r3, #8
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fb39 	bl	8003f30 <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	2100      	movs	r1, #0
 80038de:	6139      	str	r1, [r7, #16]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d011      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f4:	3328      	adds	r3, #40	; 0x28
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fbcb 	bl	8004094 <RCCEx_PLL3_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003904:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003910:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	2100      	movs	r1, #0
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800392a:	460b      	mov	r3, r1
 800392c:	4313      	orrs	r3, r2
 800392e:	d011      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fbab 	bl	8004094 <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003944:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003950:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	2100      	movs	r1, #0
 800395e:	6039      	str	r1, [r7, #0]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	e9d7 1200 	ldrd	r1, r2, [r7]
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d011      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003974:	3328      	adds	r3, #40	; 0x28
 8003976:	2102      	movs	r1, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fb8b 	bl	8004094 <RCCEx_PLL3_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003984:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003994:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ae:	bf00      	nop
 80039b0:	58024400 	.word	0x58024400

080039b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80039b8:	f7fe fde2 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4904      	ldr	r1, [pc, #16]	; (80039dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	58024400 	.word	0x58024400
 80039dc:	080062d8 	.word	0x080062d8

080039e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e8:	4ba1      	ldr	r3, [pc, #644]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039f2:	4b9f      	ldr	r3, [pc, #636]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	0b1b      	lsrs	r3, r3, #12
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039fe:	4b9c      	ldr	r3, [pc, #624]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a0a:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8111 	beq.w	8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	f000 8083 	beq.w	8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f200 80a1 	bhi.w	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d056      	beq.n	8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a4a:	e099      	b.n	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a4c:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02d      	beq.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a58:	4b85      	ldr	r3, [pc, #532]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	4a84      	ldr	r2, [pc, #528]	; (8003c74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b7b      	ldr	r3, [pc, #492]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ab2:	e087      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ada:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af6:	e065      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b3a:	e043      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7e:	e021      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 2a90 	vmov	r2, s15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c18:	ee17 2a90 	vmov	r2, s15
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	0e1b      	lsrs	r3, r3, #24
 8003c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c46:	ee17 2a90 	vmov	r2, s15
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c4e:	e008      	b.n	8003c62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
}
 8003c62:	bf00      	nop
 8003c64:	3724      	adds	r7, #36	; 0x24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
 8003c74:	03d09000 	.word	0x03d09000
 8003c78:	46000000 	.word	0x46000000
 8003c7c:	4c742400 	.word	0x4c742400
 8003c80:	4a742400 	.word	0x4a742400
 8003c84:	4af42400 	.word	0x4af42400

08003c88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c90:	4ba1      	ldr	r3, [pc, #644]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c9a:	4b9f      	ldr	r3, [pc, #636]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	0d1b      	lsrs	r3, r3, #20
 8003ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ca6:	4b9c      	ldr	r3, [pc, #624]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cb2:	4b99      	ldr	r3, [pc, #612]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8111 	beq.w	8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	f000 8083 	beq.w	8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	f200 80a1 	bhi.w	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d056      	beq.n	8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cf2:	e099      	b.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf4:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d02d      	beq.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d00:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	4a84      	ldr	r2, [pc, #528]	; (8003f1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b7b      	ldr	r3, [pc, #492]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d5a:	e087      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9e:	e065      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db2:	4b59      	ldr	r3, [pc, #356]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de2:	e043      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df6:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e26:	e021      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3a:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	0a5b      	lsrs	r3, r3, #9
 8003e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e92:	ee17 2a90 	vmov	r2, s15
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e9a:	4b1f      	ldr	r3, [pc, #124]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec0:	ee17 2a90 	vmov	r2, s15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003ec8:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	0e1b      	lsrs	r3, r3, #24
 8003ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eee:	ee17 2a90 	vmov	r2, s15
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
}
 8003f0a:	bf00      	nop
 8003f0c:	3724      	adds	r7, #36	; 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	58024400 	.word	0x58024400
 8003f1c:	03d09000 	.word	0x03d09000
 8003f20:	46000000 	.word	0x46000000
 8003f24:	4c742400 	.word	0x4c742400
 8003f28:	4a742400 	.word	0x4a742400
 8003f2c:	4af42400 	.word	0x4af42400

08003f30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f3e:	4b53      	ldr	r3, [pc, #332]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d101      	bne.n	8003f4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e099      	b.n	8004082 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f4e:	4b4f      	ldr	r3, [pc, #316]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4e      	ldr	r2, [pc, #312]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fd f891 	bl	8001080 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f62:	f7fd f88d 	bl	8001080 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e086      	b.n	8004082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f74:	4b45      	ldr	r3, [pc, #276]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f80:	4b42      	ldr	r3, [pc, #264]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	493f      	ldr	r1, [pc, #252]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	628b      	str	r3, [r1, #40]	; 0x28
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	025b      	lsls	r3, r3, #9
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fc4:	4931      	ldr	r1, [pc, #196]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fca:	4b30      	ldr	r3, [pc, #192]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	492d      	ldr	r1, [pc, #180]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f023 0220 	bic.w	r2, r3, #32
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4928      	ldr	r1, [pc, #160]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fee:	4b27      	ldr	r3, [pc, #156]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	4a26      	ldr	r2, [pc, #152]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <RCCEx_PLL2_Config+0x160>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	69d2      	ldr	r2, [r2, #28]
 8004006:	00d2      	lsls	r2, r2, #3
 8004008:	4920      	ldr	r1, [pc, #128]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800400e:	4b1f      	ldr	r3, [pc, #124]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004014:	f043 0310 	orr.w	r3, r3, #16
 8004018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	4a19      	ldr	r2, [pc, #100]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800402a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800402c:	e00f      	b.n	800404e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004040:	e005      	b.n	800404e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	4a11      	ldr	r2, [pc, #68]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800404c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a0e      	ldr	r2, [pc, #56]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004054:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fd f811 	bl	8001080 <HAL_GetTick>
 800405e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004060:	e008      	b.n	8004074 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004062:	f7fd f80d 	bl	8001080 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <RCCEx_PLL2_Config+0x15c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	58024400 	.word	0x58024400
 8004090:	ffff0007 	.word	0xffff0007

08004094 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040a2:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d101      	bne.n	80040b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e099      	b.n	80041e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040b2:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a4e      	ldr	r2, [pc, #312]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040be:	f7fc ffdf 	bl	8001080 <HAL_GetTick>
 80040c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040c6:	f7fc ffdb 	bl	8001080 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e086      	b.n	80041e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040d8:	4b45      	ldr	r3, [pc, #276]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040e4:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	051b      	lsls	r3, r3, #20
 80040f2:	493f      	ldr	r1, [pc, #252]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	628b      	str	r3, [r1, #40]	; 0x28
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	3b01      	subs	r3, #1
 8004108:	025b      	lsls	r3, r3, #9
 800410a:	b29b      	uxth	r3, r3
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	3b01      	subs	r3, #1
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004128:	4931      	ldr	r1, [pc, #196]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	492d      	ldr	r1, [pc, #180]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800413c:	4313      	orrs	r3, r2
 800413e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004140:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	4928      	ldr	r1, [pc, #160]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004152:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800415c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <RCCEx_PLL3_Config+0x160>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	69d2      	ldr	r2, [r2, #28]
 800416a:	00d2      	lsls	r2, r2, #3
 800416c:	4920      	ldr	r1, [pc, #128]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004172:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800418a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800418e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004190:	e00f      	b.n	80041b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800419e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041a4:	e005      	b.n	80041b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041be:	f7fc ff5f 	bl	8001080 <HAL_GetTick>
 80041c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041c4:	e008      	b.n	80041d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041c6:	f7fc ff5b 	bl	8001080 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e006      	b.n	80041e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	58024400 	.word	0x58024400
 80041f4:	ffff0007 	.word	0xffff0007

080041f8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e04a      	b.n	80042a0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc fdb1 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2224      	movs	r2, #36	; 0x24
 8004226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8c2 	bl	80043c4 <UART_SetConfig>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e02a      	b.n	80042a0 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 ff22 	bl	800509c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004276:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 ffa1 	bl	80051e0 <UART_CheckIdleState>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d17b      	bne.n	80043ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_Transmit+0x26>
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e074      	b.n	80043bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2221      	movs	r2, #33	; 0x21
 80042de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e2:	f7fc fecd 	bl	8001080 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d108      	bne.n	8004314 <HAL_UART_Transmit+0x6c>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e003      	b.n	800431c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800431c:	e030      	b.n	8004380 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f001 f803 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e03d      	b.n	80043bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	3302      	adds	r3, #2
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e007      	b.n	800436e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3301      	adds	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1c8      	bne.n	800431e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2200      	movs	r2, #0
 8004394:	2140      	movs	r1, #64	; 0x40
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 ffcc 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e006      	b.n	80043bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b092      	sub	sp, #72	; 0x48
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4bbe      	ldr	r3, [pc, #760]	; (80046ec <UART_SetConfig+0x328>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4ab3      	ldr	r2, [pc, #716]	; (80046f0 <UART_SetConfig+0x32c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800442c:	4313      	orrs	r3, r2
 800442e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	4baf      	ldr	r3, [pc, #700]	; (80046f4 <UART_SetConfig+0x330>)
 8004438:	4013      	ands	r3, r2
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004440:	430b      	orrs	r3, r1
 8004442:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	f023 010f 	bic.w	r1, r3, #15
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4aa6      	ldr	r2, [pc, #664]	; (80046f8 <UART_SetConfig+0x334>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d177      	bne.n	8004554 <UART_SetConfig+0x190>
 8004464:	4ba5      	ldr	r3, [pc, #660]	; (80046fc <UART_SetConfig+0x338>)
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446c:	2b28      	cmp	r3, #40	; 0x28
 800446e:	d86d      	bhi.n	800454c <UART_SetConfig+0x188>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <UART_SetConfig+0xb4>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800451d 	.word	0x0800451d
 800447c:	0800454d 	.word	0x0800454d
 8004480:	0800454d 	.word	0x0800454d
 8004484:	0800454d 	.word	0x0800454d
 8004488:	0800454d 	.word	0x0800454d
 800448c:	0800454d 	.word	0x0800454d
 8004490:	0800454d 	.word	0x0800454d
 8004494:	0800454d 	.word	0x0800454d
 8004498:	08004525 	.word	0x08004525
 800449c:	0800454d 	.word	0x0800454d
 80044a0:	0800454d 	.word	0x0800454d
 80044a4:	0800454d 	.word	0x0800454d
 80044a8:	0800454d 	.word	0x0800454d
 80044ac:	0800454d 	.word	0x0800454d
 80044b0:	0800454d 	.word	0x0800454d
 80044b4:	0800454d 	.word	0x0800454d
 80044b8:	0800452d 	.word	0x0800452d
 80044bc:	0800454d 	.word	0x0800454d
 80044c0:	0800454d 	.word	0x0800454d
 80044c4:	0800454d 	.word	0x0800454d
 80044c8:	0800454d 	.word	0x0800454d
 80044cc:	0800454d 	.word	0x0800454d
 80044d0:	0800454d 	.word	0x0800454d
 80044d4:	0800454d 	.word	0x0800454d
 80044d8:	08004535 	.word	0x08004535
 80044dc:	0800454d 	.word	0x0800454d
 80044e0:	0800454d 	.word	0x0800454d
 80044e4:	0800454d 	.word	0x0800454d
 80044e8:	0800454d 	.word	0x0800454d
 80044ec:	0800454d 	.word	0x0800454d
 80044f0:	0800454d 	.word	0x0800454d
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	0800453d 	.word	0x0800453d
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	0800454d 	.word	0x0800454d
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800454d 	.word	0x0800454d
 800450c:	0800454d 	.word	0x0800454d
 8004510:	0800454d 	.word	0x0800454d
 8004514:	0800454d 	.word	0x0800454d
 8004518:	08004545 	.word	0x08004545
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004522:	e326      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004524:	2304      	movs	r3, #4
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452a:	e322      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800452c:	2308      	movs	r3, #8
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004532:	e31e      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004534:	2310      	movs	r3, #16
 8004536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453a:	e31a      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800453c:	2320      	movs	r3, #32
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004542:	e316      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e312      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e30e      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a69      	ldr	r2, [pc, #420]	; (8004700 <UART_SetConfig+0x33c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d130      	bne.n	80045c0 <UART_SetConfig+0x1fc>
 800455e:	4b67      	ldr	r3, [pc, #412]	; (80046fc <UART_SetConfig+0x338>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b05      	cmp	r3, #5
 8004568:	d826      	bhi.n	80045b8 <UART_SetConfig+0x1f4>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x1ac>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004589 	.word	0x08004589
 8004574:	08004591 	.word	0x08004591
 8004578:	08004599 	.word	0x08004599
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045b1 	.word	0x080045b1
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458e:	e2f0      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004596:	e2ec      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459e:	e2e8      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045a6:	e2e4      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80045a8:	2320      	movs	r3, #32
 80045aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ae:	e2e0      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b6:	e2dc      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	e2d8      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a4f      	ldr	r2, [pc, #316]	; (8004704 <UART_SetConfig+0x340>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d130      	bne.n	800462c <UART_SetConfig+0x268>
 80045ca:	4b4c      	ldr	r3, [pc, #304]	; (80046fc <UART_SetConfig+0x338>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d826      	bhi.n	8004624 <UART_SetConfig+0x260>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <UART_SetConfig+0x218>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	080045f5 	.word	0x080045f5
 80045e0:	080045fd 	.word	0x080045fd
 80045e4:	08004605 	.word	0x08004605
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004615 	.word	0x08004615
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045fa:	e2ba      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80045fc:	2304      	movs	r3, #4
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004602:	e2b6      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004604:	2308      	movs	r3, #8
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460a:	e2b2      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004612:	e2ae      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004614:	2320      	movs	r3, #32
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461a:	e2aa      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800461c:	2340      	movs	r3, #64	; 0x40
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e2a6      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e2a2      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a35      	ldr	r2, [pc, #212]	; (8004708 <UART_SetConfig+0x344>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d130      	bne.n	8004698 <UART_SetConfig+0x2d4>
 8004636:	4b31      	ldr	r3, [pc, #196]	; (80046fc <UART_SetConfig+0x338>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	2b05      	cmp	r3, #5
 8004640:	d826      	bhi.n	8004690 <UART_SetConfig+0x2cc>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <UART_SetConfig+0x284>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	08004661 	.word	0x08004661
 800464c:	08004669 	.word	0x08004669
 8004650:	08004671 	.word	0x08004671
 8004654:	08004679 	.word	0x08004679
 8004658:	08004681 	.word	0x08004681
 800465c:	08004689 	.word	0x08004689
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004666:	e284      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466e:	e280      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004676:	e27c      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800467e:	e278      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004680:	2320      	movs	r3, #32
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004686:	e274      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004688:	2340      	movs	r3, #64	; 0x40
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468e:	e270      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004696:	e26c      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1b      	ldr	r2, [pc, #108]	; (800470c <UART_SetConfig+0x348>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d142      	bne.n	8004728 <UART_SetConfig+0x364>
 80046a2:	4b16      	ldr	r3, [pc, #88]	; (80046fc <UART_SetConfig+0x338>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	d838      	bhi.n	8004720 <UART_SetConfig+0x35c>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x2f0>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046cd 	.word	0x080046cd
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046dd 	.word	0x080046dd
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	08004711 	.word	0x08004711
 80046c8:	08004719 	.word	0x08004719
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d2:	e24e      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046da:	e24a      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e2:	e246      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ea:	e242      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80046ec:	cfff69f3 	.word	0xcfff69f3
 80046f0:	58000c00 	.word	0x58000c00
 80046f4:	11fff4ff 	.word	0x11fff4ff
 80046f8:	40011000 	.word	0x40011000
 80046fc:	58024400 	.word	0x58024400
 8004700:	40004400 	.word	0x40004400
 8004704:	40004800 	.word	0x40004800
 8004708:	40004c00 	.word	0x40004c00
 800470c:	40005000 	.word	0x40005000
 8004710:	2320      	movs	r3, #32
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e22c      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e228      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e224      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4ab1      	ldr	r2, [pc, #708]	; (80049f4 <UART_SetConfig+0x630>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d176      	bne.n	8004820 <UART_SetConfig+0x45c>
 8004732:	4bb1      	ldr	r3, [pc, #708]	; (80049f8 <UART_SetConfig+0x634>)
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800473a:	2b28      	cmp	r3, #40	; 0x28
 800473c:	d86c      	bhi.n	8004818 <UART_SetConfig+0x454>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <UART_SetConfig+0x380>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	080047e9 	.word	0x080047e9
 8004748:	08004819 	.word	0x08004819
 800474c:	08004819 	.word	0x08004819
 8004750:	08004819 	.word	0x08004819
 8004754:	08004819 	.word	0x08004819
 8004758:	08004819 	.word	0x08004819
 800475c:	08004819 	.word	0x08004819
 8004760:	08004819 	.word	0x08004819
 8004764:	080047f1 	.word	0x080047f1
 8004768:	08004819 	.word	0x08004819
 800476c:	08004819 	.word	0x08004819
 8004770:	08004819 	.word	0x08004819
 8004774:	08004819 	.word	0x08004819
 8004778:	08004819 	.word	0x08004819
 800477c:	08004819 	.word	0x08004819
 8004780:	08004819 	.word	0x08004819
 8004784:	080047f9 	.word	0x080047f9
 8004788:	08004819 	.word	0x08004819
 800478c:	08004819 	.word	0x08004819
 8004790:	08004819 	.word	0x08004819
 8004794:	08004819 	.word	0x08004819
 8004798:	08004819 	.word	0x08004819
 800479c:	08004819 	.word	0x08004819
 80047a0:	08004819 	.word	0x08004819
 80047a4:	08004801 	.word	0x08004801
 80047a8:	08004819 	.word	0x08004819
 80047ac:	08004819 	.word	0x08004819
 80047b0:	08004819 	.word	0x08004819
 80047b4:	08004819 	.word	0x08004819
 80047b8:	08004819 	.word	0x08004819
 80047bc:	08004819 	.word	0x08004819
 80047c0:	08004819 	.word	0x08004819
 80047c4:	08004809 	.word	0x08004809
 80047c8:	08004819 	.word	0x08004819
 80047cc:	08004819 	.word	0x08004819
 80047d0:	08004819 	.word	0x08004819
 80047d4:	08004819 	.word	0x08004819
 80047d8:	08004819 	.word	0x08004819
 80047dc:	08004819 	.word	0x08004819
 80047e0:	08004819 	.word	0x08004819
 80047e4:	08004811 	.word	0x08004811
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ee:	e1c0      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e1bc      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fe:	e1b8      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004806:	e1b4      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004808:	2320      	movs	r3, #32
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480e:	e1b0      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004810:	2340      	movs	r3, #64	; 0x40
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004816:	e1ac      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481e:	e1a8      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a75      	ldr	r2, [pc, #468]	; (80049fc <UART_SetConfig+0x638>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d130      	bne.n	800488c <UART_SetConfig+0x4c8>
 800482a:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <UART_SetConfig+0x634>)
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	2b05      	cmp	r3, #5
 8004834:	d826      	bhi.n	8004884 <UART_SetConfig+0x4c0>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <UART_SetConfig+0x478>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004855 	.word	0x08004855
 8004840:	0800485d 	.word	0x0800485d
 8004844:	08004865 	.word	0x08004865
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004875 	.word	0x08004875
 8004850:	0800487d 	.word	0x0800487d
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485a:	e18a      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800485c:	2304      	movs	r3, #4
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004862:	e186      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004864:	2308      	movs	r3, #8
 8004866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800486a:	e182      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800486c:	2310      	movs	r3, #16
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004872:	e17e      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004874:	2320      	movs	r3, #32
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800487a:	e17a      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800487c:	2340      	movs	r3, #64	; 0x40
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004882:	e176      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488a:	e172      	b.n	8004b72 <UART_SetConfig+0x7ae>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5b      	ldr	r2, [pc, #364]	; (8004a00 <UART_SetConfig+0x63c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d130      	bne.n	80048f8 <UART_SetConfig+0x534>
 8004896:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <UART_SetConfig+0x634>)
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d826      	bhi.n	80048f0 <UART_SetConfig+0x52c>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0x4e4>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048c1 	.word	0x080048c1
 80048ac:	080048c9 	.word	0x080048c9
 80048b0:	080048d1 	.word	0x080048d1
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048e9 	.word	0x080048e9
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048c6:	e154      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80048c8:	2304      	movs	r3, #4
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ce:	e150      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80048d0:	2308      	movs	r3, #8
 80048d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048d6:	e14c      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048de:	e148      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80048e0:	2320      	movs	r3, #32
 80048e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048e6:	e144      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80048e8:	2340      	movs	r3, #64	; 0x40
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ee:	e140      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f6:	e13c      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a41      	ldr	r2, [pc, #260]	; (8004a04 <UART_SetConfig+0x640>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	f040 8082 	bne.w	8004a08 <UART_SetConfig+0x644>
 8004904:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <UART_SetConfig+0x634>)
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800490c:	2b28      	cmp	r3, #40	; 0x28
 800490e:	d86d      	bhi.n	80049ec <UART_SetConfig+0x628>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x554>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	080049bd 	.word	0x080049bd
 800491c:	080049ed 	.word	0x080049ed
 8004920:	080049ed 	.word	0x080049ed
 8004924:	080049ed 	.word	0x080049ed
 8004928:	080049ed 	.word	0x080049ed
 800492c:	080049ed 	.word	0x080049ed
 8004930:	080049ed 	.word	0x080049ed
 8004934:	080049ed 	.word	0x080049ed
 8004938:	080049c5 	.word	0x080049c5
 800493c:	080049ed 	.word	0x080049ed
 8004940:	080049ed 	.word	0x080049ed
 8004944:	080049ed 	.word	0x080049ed
 8004948:	080049ed 	.word	0x080049ed
 800494c:	080049ed 	.word	0x080049ed
 8004950:	080049ed 	.word	0x080049ed
 8004954:	080049ed 	.word	0x080049ed
 8004958:	080049cd 	.word	0x080049cd
 800495c:	080049ed 	.word	0x080049ed
 8004960:	080049ed 	.word	0x080049ed
 8004964:	080049ed 	.word	0x080049ed
 8004968:	080049ed 	.word	0x080049ed
 800496c:	080049ed 	.word	0x080049ed
 8004970:	080049ed 	.word	0x080049ed
 8004974:	080049ed 	.word	0x080049ed
 8004978:	080049d5 	.word	0x080049d5
 800497c:	080049ed 	.word	0x080049ed
 8004980:	080049ed 	.word	0x080049ed
 8004984:	080049ed 	.word	0x080049ed
 8004988:	080049ed 	.word	0x080049ed
 800498c:	080049ed 	.word	0x080049ed
 8004990:	080049ed 	.word	0x080049ed
 8004994:	080049ed 	.word	0x080049ed
 8004998:	080049dd 	.word	0x080049dd
 800499c:	080049ed 	.word	0x080049ed
 80049a0:	080049ed 	.word	0x080049ed
 80049a4:	080049ed 	.word	0x080049ed
 80049a8:	080049ed 	.word	0x080049ed
 80049ac:	080049ed 	.word	0x080049ed
 80049b0:	080049ed 	.word	0x080049ed
 80049b4:	080049ed 	.word	0x080049ed
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c2:	e0d6      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80049c4:	2304      	movs	r3, #4
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ca:	e0d2      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80049cc:	2308      	movs	r3, #8
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d2:	e0ce      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80049d4:	2310      	movs	r3, #16
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049da:	e0ca      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80049dc:	2320      	movs	r3, #32
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e2:	e0c6      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80049e4:	2340      	movs	r3, #64	; 0x40
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ea:	e0c2      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f2:	e0be      	b.n	8004b72 <UART_SetConfig+0x7ae>
 80049f4:	40011400 	.word	0x40011400
 80049f8:	58024400 	.word	0x58024400
 80049fc:	40007800 	.word	0x40007800
 8004a00:	40007c00 	.word	0x40007c00
 8004a04:	40011800 	.word	0x40011800
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4aad      	ldr	r2, [pc, #692]	; (8004cc4 <UART_SetConfig+0x900>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d176      	bne.n	8004b00 <UART_SetConfig+0x73c>
 8004a12:	4bad      	ldr	r3, [pc, #692]	; (8004cc8 <UART_SetConfig+0x904>)
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1a:	2b28      	cmp	r3, #40	; 0x28
 8004a1c:	d86c      	bhi.n	8004af8 <UART_SetConfig+0x734>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x660>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004ac9 	.word	0x08004ac9
 8004a28:	08004af9 	.word	0x08004af9
 8004a2c:	08004af9 	.word	0x08004af9
 8004a30:	08004af9 	.word	0x08004af9
 8004a34:	08004af9 	.word	0x08004af9
 8004a38:	08004af9 	.word	0x08004af9
 8004a3c:	08004af9 	.word	0x08004af9
 8004a40:	08004af9 	.word	0x08004af9
 8004a44:	08004ad1 	.word	0x08004ad1
 8004a48:	08004af9 	.word	0x08004af9
 8004a4c:	08004af9 	.word	0x08004af9
 8004a50:	08004af9 	.word	0x08004af9
 8004a54:	08004af9 	.word	0x08004af9
 8004a58:	08004af9 	.word	0x08004af9
 8004a5c:	08004af9 	.word	0x08004af9
 8004a60:	08004af9 	.word	0x08004af9
 8004a64:	08004ad9 	.word	0x08004ad9
 8004a68:	08004af9 	.word	0x08004af9
 8004a6c:	08004af9 	.word	0x08004af9
 8004a70:	08004af9 	.word	0x08004af9
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004af9 	.word	0x08004af9
 8004a7c:	08004af9 	.word	0x08004af9
 8004a80:	08004af9 	.word	0x08004af9
 8004a84:	08004ae1 	.word	0x08004ae1
 8004a88:	08004af9 	.word	0x08004af9
 8004a8c:	08004af9 	.word	0x08004af9
 8004a90:	08004af9 	.word	0x08004af9
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	08004af9 	.word	0x08004af9
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004ae9 	.word	0x08004ae9
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004af9 	.word	0x08004af9
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004af9 	.word	0x08004af9
 8004ab8:	08004af9 	.word	0x08004af9
 8004abc:	08004af9 	.word	0x08004af9
 8004ac0:	08004af9 	.word	0x08004af9
 8004ac4:	08004af1 	.word	0x08004af1
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ace:	e050      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad6:	e04c      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ade:	e048      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae6:	e044      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aee:	e040      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004af0:	2340      	movs	r3, #64	; 0x40
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af6:	e03c      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e038      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a71      	ldr	r2, [pc, #452]	; (8004ccc <UART_SetConfig+0x908>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d130      	bne.n	8004b6c <UART_SetConfig+0x7a8>
 8004b0a:	4b6f      	ldr	r3, [pc, #444]	; (8004cc8 <UART_SetConfig+0x904>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d826      	bhi.n	8004b64 <UART_SetConfig+0x7a0>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0x758>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b35 	.word	0x08004b35
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	08004b45 	.word	0x08004b45
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b5d 	.word	0x08004b5d
 8004b34:	2302      	movs	r3, #2
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3a:	e01a      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b42:	e016      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b44:	2308      	movs	r3, #8
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4a:	e012      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b52:	e00e      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b54:	2320      	movs	r3, #32
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5a:	e00a      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b62:	e006      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e002      	b.n	8004b72 <UART_SetConfig+0x7ae>
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a55      	ldr	r2, [pc, #340]	; (8004ccc <UART_SetConfig+0x908>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f040 80f8 	bne.w	8004d6e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	dc46      	bgt.n	8004c14 <UART_SetConfig+0x850>
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	db75      	blt.n	8004c76 <UART_SetConfig+0x8b2>
 8004b8a:	3b02      	subs	r3, #2
 8004b8c:	2b1e      	cmp	r3, #30
 8004b8e:	d872      	bhi.n	8004c76 <UART_SetConfig+0x8b2>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <UART_SetConfig+0x7d4>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004c1b 	.word	0x08004c1b
 8004b9c:	08004c77 	.word	0x08004c77
 8004ba0:	08004c23 	.word	0x08004c23
 8004ba4:	08004c77 	.word	0x08004c77
 8004ba8:	08004c77 	.word	0x08004c77
 8004bac:	08004c77 	.word	0x08004c77
 8004bb0:	08004c33 	.word	0x08004c33
 8004bb4:	08004c77 	.word	0x08004c77
 8004bb8:	08004c77 	.word	0x08004c77
 8004bbc:	08004c77 	.word	0x08004c77
 8004bc0:	08004c77 	.word	0x08004c77
 8004bc4:	08004c77 	.word	0x08004c77
 8004bc8:	08004c77 	.word	0x08004c77
 8004bcc:	08004c77 	.word	0x08004c77
 8004bd0:	08004c43 	.word	0x08004c43
 8004bd4:	08004c77 	.word	0x08004c77
 8004bd8:	08004c77 	.word	0x08004c77
 8004bdc:	08004c77 	.word	0x08004c77
 8004be0:	08004c77 	.word	0x08004c77
 8004be4:	08004c77 	.word	0x08004c77
 8004be8:	08004c77 	.word	0x08004c77
 8004bec:	08004c77 	.word	0x08004c77
 8004bf0:	08004c77 	.word	0x08004c77
 8004bf4:	08004c77 	.word	0x08004c77
 8004bf8:	08004c77 	.word	0x08004c77
 8004bfc:	08004c77 	.word	0x08004c77
 8004c00:	08004c77 	.word	0x08004c77
 8004c04:	08004c77 	.word	0x08004c77
 8004c08:	08004c77 	.word	0x08004c77
 8004c0c:	08004c77 	.word	0x08004c77
 8004c10:	08004c69 	.word	0x08004c69
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d02a      	beq.n	8004c6e <UART_SetConfig+0x8aa>
 8004c18:	e02d      	b.n	8004c76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004c1a:	f7fe fecb 	bl	80039b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c20:	e02f      	b.n	8004c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe feda 	bl	80039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c30:	e027      	b.n	8004c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c32:	f107 0318 	add.w	r3, r7, #24
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff f826 	bl	8003c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c40:	e01f      	b.n	8004c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c42:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <UART_SetConfig+0x904>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <UART_SetConfig+0x904>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	08db      	lsrs	r3, r3, #3
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <UART_SetConfig+0x90c>)
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c60:	e00f      	b.n	8004c82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c62:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <UART_SetConfig+0x90c>)
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c66:	e00c      	b.n	8004c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <UART_SetConfig+0x910>)
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c6c:	e009      	b.n	8004c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c74:	e005      	b.n	8004c82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 81ee 	beq.w	8005066 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	4a12      	ldr	r2, [pc, #72]	; (8004cd8 <UART_SetConfig+0x914>)
 8004c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d305      	bcc.n	8004cba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d910      	bls.n	8004cdc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004cc0:	e1d1      	b.n	8005066 <UART_SetConfig+0xca2>
 8004cc2:	bf00      	nop
 8004cc4:	40011c00 	.word	0x40011c00
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	58000c00 	.word	0x58000c00
 8004cd0:	03d09000 	.word	0x03d09000
 8004cd4:	003d0900 	.word	0x003d0900
 8004cd8:	080062e8 	.word	0x080062e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	2200      	movs	r2, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	60fa      	str	r2, [r7, #12]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	4ac0      	ldr	r2, [pc, #768]	; (8004fec <UART_SetConfig+0xc28>)
 8004cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cfe:	f7fb fb4f 	bl	80003a0 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	020b      	lsls	r3, r1, #8
 8004d14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d18:	0202      	lsls	r2, r0, #8
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	6849      	ldr	r1, [r1, #4]
 8004d1e:	0849      	lsrs	r1, r1, #1
 8004d20:	2000      	movs	r0, #0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4605      	mov	r5, r0
 8004d26:	eb12 0804 	adds.w	r8, r2, r4
 8004d2a:	eb43 0905 	adc.w	r9, r3, r5
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	469a      	mov	sl, r3
 8004d36:	4693      	mov	fp, r2
 8004d38:	4652      	mov	r2, sl
 8004d3a:	465b      	mov	r3, fp
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	4649      	mov	r1, r9
 8004d40:	f7fb fb2e 	bl	80003a0 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4613      	mov	r3, r2
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d52:	d308      	bcc.n	8004d66 <UART_SetConfig+0x9a2>
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d204      	bcs.n	8004d66 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d62:	60da      	str	r2, [r3, #12]
 8004d64:	e17f      	b.n	8005066 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d6c:	e17b      	b.n	8005066 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d76:	f040 80bd 	bne.w	8004ef4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004d7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	dc48      	bgt.n	8004e14 <UART_SetConfig+0xa50>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	db7b      	blt.n	8004e7e <UART_SetConfig+0xaba>
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d879      	bhi.n	8004e7e <UART_SetConfig+0xaba>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x9cc>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004e1b 	.word	0x08004e1b
 8004d94:	08004e23 	.word	0x08004e23
 8004d98:	08004e7f 	.word	0x08004e7f
 8004d9c:	08004e7f 	.word	0x08004e7f
 8004da0:	08004e2b 	.word	0x08004e2b
 8004da4:	08004e7f 	.word	0x08004e7f
 8004da8:	08004e7f 	.word	0x08004e7f
 8004dac:	08004e7f 	.word	0x08004e7f
 8004db0:	08004e3b 	.word	0x08004e3b
 8004db4:	08004e7f 	.word	0x08004e7f
 8004db8:	08004e7f 	.word	0x08004e7f
 8004dbc:	08004e7f 	.word	0x08004e7f
 8004dc0:	08004e7f 	.word	0x08004e7f
 8004dc4:	08004e7f 	.word	0x08004e7f
 8004dc8:	08004e7f 	.word	0x08004e7f
 8004dcc:	08004e7f 	.word	0x08004e7f
 8004dd0:	08004e4b 	.word	0x08004e4b
 8004dd4:	08004e7f 	.word	0x08004e7f
 8004dd8:	08004e7f 	.word	0x08004e7f
 8004ddc:	08004e7f 	.word	0x08004e7f
 8004de0:	08004e7f 	.word	0x08004e7f
 8004de4:	08004e7f 	.word	0x08004e7f
 8004de8:	08004e7f 	.word	0x08004e7f
 8004dec:	08004e7f 	.word	0x08004e7f
 8004df0:	08004e7f 	.word	0x08004e7f
 8004df4:	08004e7f 	.word	0x08004e7f
 8004df8:	08004e7f 	.word	0x08004e7f
 8004dfc:	08004e7f 	.word	0x08004e7f
 8004e00:	08004e7f 	.word	0x08004e7f
 8004e04:	08004e7f 	.word	0x08004e7f
 8004e08:	08004e7f 	.word	0x08004e7f
 8004e0c:	08004e7f 	.word	0x08004e7f
 8004e10:	08004e71 	.word	0x08004e71
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d02e      	beq.n	8004e76 <UART_SetConfig+0xab2>
 8004e18:	e031      	b.n	8004e7e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e1a:	f7fd fbe1 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8004e1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e20:	e033      	b.n	8004e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e22:	f7fd fbf3 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8004e26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e28:	e02f      	b.n	8004e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe fdd6 	bl	80039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e38:	e027      	b.n	8004e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e3a:	f107 0318 	add.w	r3, r7, #24
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe ff22 	bl	8003c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e48:	e01f      	b.n	8004e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4a:	4b69      	ldr	r3, [pc, #420]	; (8004ff0 <UART_SetConfig+0xc2c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e56:	4b66      	ldr	r3, [pc, #408]	; (8004ff0 <UART_SetConfig+0xc2c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	08db      	lsrs	r3, r3, #3
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	4a64      	ldr	r2, [pc, #400]	; (8004ff4 <UART_SetConfig+0xc30>)
 8004e62:	fa22 f303 	lsr.w	r3, r2, r3
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e68:	e00f      	b.n	8004e8a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004e6a:	4b62      	ldr	r3, [pc, #392]	; (8004ff4 <UART_SetConfig+0xc30>)
 8004e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e6e:	e00c      	b.n	8004e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e70:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <UART_SetConfig+0xc34>)
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e74:	e009      	b.n	8004e8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e7c:	e005      	b.n	8004e8a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80ea 	beq.w	8005066 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	4a55      	ldr	r2, [pc, #340]	; (8004fec <UART_SetConfig+0xc28>)
 8004e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea4:	005a      	lsls	r2, r3, #1
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	441a      	add	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	2b0f      	cmp	r3, #15
 8004ebc:	d916      	bls.n	8004eec <UART_SetConfig+0xb28>
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d212      	bcs.n	8004eec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f023 030f 	bic.w	r3, r3, #15
 8004ece:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e0bc      	b.n	8005066 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ef2:	e0b8      	b.n	8005066 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	dc4b      	bgt.n	8004f94 <UART_SetConfig+0xbd0>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f2c0 8087 	blt.w	8005010 <UART_SetConfig+0xc4c>
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	f200 8084 	bhi.w	8005010 <UART_SetConfig+0xc4c>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0xb4c>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f9b 	.word	0x08004f9b
 8004f14:	08004fa3 	.word	0x08004fa3
 8004f18:	08005011 	.word	0x08005011
 8004f1c:	08005011 	.word	0x08005011
 8004f20:	08004fab 	.word	0x08004fab
 8004f24:	08005011 	.word	0x08005011
 8004f28:	08005011 	.word	0x08005011
 8004f2c:	08005011 	.word	0x08005011
 8004f30:	08004fbb 	.word	0x08004fbb
 8004f34:	08005011 	.word	0x08005011
 8004f38:	08005011 	.word	0x08005011
 8004f3c:	08005011 	.word	0x08005011
 8004f40:	08005011 	.word	0x08005011
 8004f44:	08005011 	.word	0x08005011
 8004f48:	08005011 	.word	0x08005011
 8004f4c:	08005011 	.word	0x08005011
 8004f50:	08004fcb 	.word	0x08004fcb
 8004f54:	08005011 	.word	0x08005011
 8004f58:	08005011 	.word	0x08005011
 8004f5c:	08005011 	.word	0x08005011
 8004f60:	08005011 	.word	0x08005011
 8004f64:	08005011 	.word	0x08005011
 8004f68:	08005011 	.word	0x08005011
 8004f6c:	08005011 	.word	0x08005011
 8004f70:	08005011 	.word	0x08005011
 8004f74:	08005011 	.word	0x08005011
 8004f78:	08005011 	.word	0x08005011
 8004f7c:	08005011 	.word	0x08005011
 8004f80:	08005011 	.word	0x08005011
 8004f84:	08005011 	.word	0x08005011
 8004f88:	08005011 	.word	0x08005011
 8004f8c:	08005011 	.word	0x08005011
 8004f90:	08005003 	.word	0x08005003
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d037      	beq.n	8005008 <UART_SetConfig+0xc44>
 8004f98:	e03a      	b.n	8005010 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f9a:	f7fd fb21 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8004f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004fa0:	e03c      	b.n	800501c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa2:	f7fd fb33 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8004fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004fa8:	e038      	b.n	800501c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fd16 	bl	80039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb8:	e030      	b.n	800501c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fba:	f107 0318 	add.w	r3, r7, #24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fe62 	bl	8003c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fc8:	e028      	b.n	800501c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <UART_SetConfig+0xc2c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d012      	beq.n	8004ffc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <UART_SetConfig+0xc2c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <UART_SetConfig+0xc30>)
 8004fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fe8:	e018      	b.n	800501c <UART_SetConfig+0xc58>
 8004fea:	bf00      	nop
 8004fec:	080062e8 	.word	0x080062e8
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <UART_SetConfig+0xccc>)
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005000:	e00c      	b.n	800501c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005002:	4b24      	ldr	r3, [pc, #144]	; (8005094 <UART_SetConfig+0xcd0>)
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005006:	e009      	b.n	800501c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800500e:	e005      	b.n	800501c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800501a:	bf00      	nop
    }

    if (pclk != 0U)
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d021      	beq.n	8005066 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <UART_SetConfig+0xcd4>)
 8005028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800502c:	461a      	mov	r2, r3
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	fbb3 f2f2 	udiv	r2, r3, r2
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	441a      	add	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b0f      	cmp	r3, #15
 800504a:	d909      	bls.n	8005060 <UART_SetConfig+0xc9c>
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005052:	d205      	bcs.n	8005060 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	b29a      	uxth	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	e002      	b.n	8005066 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2201      	movs	r2, #1
 800506a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2201      	movs	r2, #1
 8005072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005082:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005086:	4618      	mov	r0, r3
 8005088:	3748      	adds	r7, #72	; 0x48
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005090:	03d09000 	.word	0x03d09000
 8005094:	003d0900 	.word	0x003d0900
 8005098:	080062e8 	.word	0x080062e8

0800509c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519a:	d10a      	bne.n	80051b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b098      	sub	sp, #96	; 0x60
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f0:	f7fb ff46 	bl	8001080 <HAL_GetTick>
 80051f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d12f      	bne.n	8005264 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520c:	2200      	movs	r2, #0
 800520e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f88e 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d022      	beq.n	8005264 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	653b      	str	r3, [r7, #80]	; 0x50
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
 800523e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800524a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e6      	bne.n	800521e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e063      	b.n	800532c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d149      	bne.n	8005306 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005272:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527a:	2200      	movs	r2, #0
 800527c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f857 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d03c      	beq.n	8005306 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	623b      	str	r3, [r7, #32]
   return(result);
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30
 80052ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052de:	61fa      	str	r2, [r7, #28]
 80052e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	617b      	str	r3, [r7, #20]
   return(result);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e5      	bne.n	80052be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e012      	b.n	800532c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3758      	adds	r7, #88	; 0x58
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	e049      	b.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d045      	beq.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fb fe97 	bl	8001080 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <UART_WaitOnFlagUntilTimeout+0x30>
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e048      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d031      	beq.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b08      	cmp	r3, #8
 8005382:	d110      	bne.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2208      	movs	r2, #8
 800538a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f839 	bl	8005404 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2208      	movs	r2, #8
 8005396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e029      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b4:	d111      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f81f 	bl	8005404 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e00f      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d0a6      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b095      	sub	sp, #84	; 0x54
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542a:	643b      	str	r3, [r7, #64]	; 0x40
 800542c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e6      	bne.n	800540c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3308      	adds	r3, #8
 8005444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	61fb      	str	r3, [r7, #28]
   return(result);
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <UART_EndRxTransfer+0xc8>)
 8005452:	4013      	ands	r3, r2
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800545e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e5      	bne.n	800543e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005476:	2b01      	cmp	r3, #1
 8005478:	d118      	bne.n	80054ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	60bb      	str	r3, [r7, #8]
   return(result);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f023 0310 	bic.w	r3, r3, #16
 800548e:	647b      	str	r3, [r7, #68]	; 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6979      	ldr	r1, [r7, #20]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	613b      	str	r3, [r7, #16]
   return(result);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e6      	bne.n	800547a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	675a      	str	r2, [r3, #116]	; 0x74
}
 80054c0:	bf00      	nop
 80054c2:	3754      	adds	r7, #84	; 0x54
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	effffffe 	.word	0xeffffffe

080054d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e027      	b.n	8005536 <HAL_UARTEx_DisableFifoMode+0x66>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2224      	movs	r2, #36	; 0x24
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005514:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005556:	2302      	movs	r3, #2
 8005558:	e02d      	b.n	80055b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2224      	movs	r2, #36	; 0x24
 8005566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f850 	bl	800563c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e02d      	b.n	8005632 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2224      	movs	r2, #36	; 0x24
 80055e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f812 	bl	800563c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005648:	2b00      	cmp	r3, #0
 800564a:	d108      	bne.n	800565e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800565c:	e031      	b.n	80056c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800565e:	2310      	movs	r3, #16
 8005660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005662:	2310      	movs	r3, #16
 8005664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	0e5b      	lsrs	r3, r3, #25
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	0f5b      	lsrs	r3, r3, #29
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	7b3a      	ldrb	r2, [r7, #12]
 800568a:	4911      	ldr	r1, [pc, #68]	; (80056d0 <UARTEx_SetNbDataToProcess+0x94>)
 800568c:	5c8a      	ldrb	r2, [r1, r2]
 800568e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005692:	7b3a      	ldrb	r2, [r7, #12]
 8005694:	490f      	ldr	r1, [pc, #60]	; (80056d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005698:	fb93 f3f2 	sdiv	r3, r3, r2
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	7b7a      	ldrb	r2, [r7, #13]
 80056a8:	4909      	ldr	r1, [pc, #36]	; (80056d0 <UARTEx_SetNbDataToProcess+0x94>)
 80056aa:	5c8a      	ldrb	r2, [r1, r2]
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056b0:	7b7a      	ldrb	r2, [r7, #13]
 80056b2:	4908      	ldr	r1, [pc, #32]	; (80056d4 <UARTEx_SetNbDataToProcess+0x98>)
 80056b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	08006300 	.word	0x08006300
 80056d4:	08006308 	.word	0x08006308

080056d8 <malloc>:
 80056d8:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <malloc+0xc>)
 80056da:	4601      	mov	r1, r0
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	f000 b823 	b.w	8005728 <_malloc_r>
 80056e2:	bf00      	nop
 80056e4:	2400005c 	.word	0x2400005c

080056e8 <sbrk_aligned>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4e0e      	ldr	r6, [pc, #56]	; (8005724 <sbrk_aligned+0x3c>)
 80056ec:	460c      	mov	r4, r1
 80056ee:	6831      	ldr	r1, [r6, #0]
 80056f0:	4605      	mov	r5, r0
 80056f2:	b911      	cbnz	r1, 80056fa <sbrk_aligned+0x12>
 80056f4:	f000 f8cc 	bl	8005890 <_sbrk_r>
 80056f8:	6030      	str	r0, [r6, #0]
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f8c7 	bl	8005890 <_sbrk_r>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d00a      	beq.n	800571c <sbrk_aligned+0x34>
 8005706:	1cc4      	adds	r4, r0, #3
 8005708:	f024 0403 	bic.w	r4, r4, #3
 800570c:	42a0      	cmp	r0, r4
 800570e:	d007      	beq.n	8005720 <sbrk_aligned+0x38>
 8005710:	1a21      	subs	r1, r4, r0
 8005712:	4628      	mov	r0, r5
 8005714:	f000 f8bc 	bl	8005890 <_sbrk_r>
 8005718:	3001      	adds	r0, #1
 800571a:	d101      	bne.n	8005720 <sbrk_aligned+0x38>
 800571c:	f04f 34ff 	mov.w	r4, #4294967295
 8005720:	4620      	mov	r0, r4
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	240001b0 	.word	0x240001b0

08005728 <_malloc_r>:
 8005728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800572c:	1ccd      	adds	r5, r1, #3
 800572e:	f025 0503 	bic.w	r5, r5, #3
 8005732:	3508      	adds	r5, #8
 8005734:	2d0c      	cmp	r5, #12
 8005736:	bf38      	it	cc
 8005738:	250c      	movcc	r5, #12
 800573a:	2d00      	cmp	r5, #0
 800573c:	4607      	mov	r7, r0
 800573e:	db01      	blt.n	8005744 <_malloc_r+0x1c>
 8005740:	42a9      	cmp	r1, r5
 8005742:	d905      	bls.n	8005750 <_malloc_r+0x28>
 8005744:	230c      	movs	r3, #12
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	2600      	movs	r6, #0
 800574a:	4630      	mov	r0, r6
 800574c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005750:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005824 <_malloc_r+0xfc>
 8005754:	f000 f868 	bl	8005828 <__malloc_lock>
 8005758:	f8d8 3000 	ldr.w	r3, [r8]
 800575c:	461c      	mov	r4, r3
 800575e:	bb5c      	cbnz	r4, 80057b8 <_malloc_r+0x90>
 8005760:	4629      	mov	r1, r5
 8005762:	4638      	mov	r0, r7
 8005764:	f7ff ffc0 	bl	80056e8 <sbrk_aligned>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	4604      	mov	r4, r0
 800576c:	d155      	bne.n	800581a <_malloc_r+0xf2>
 800576e:	f8d8 4000 	ldr.w	r4, [r8]
 8005772:	4626      	mov	r6, r4
 8005774:	2e00      	cmp	r6, #0
 8005776:	d145      	bne.n	8005804 <_malloc_r+0xdc>
 8005778:	2c00      	cmp	r4, #0
 800577a:	d048      	beq.n	800580e <_malloc_r+0xe6>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	4631      	mov	r1, r6
 8005780:	4638      	mov	r0, r7
 8005782:	eb04 0903 	add.w	r9, r4, r3
 8005786:	f000 f883 	bl	8005890 <_sbrk_r>
 800578a:	4581      	cmp	r9, r0
 800578c:	d13f      	bne.n	800580e <_malloc_r+0xe6>
 800578e:	6821      	ldr	r1, [r4, #0]
 8005790:	1a6d      	subs	r5, r5, r1
 8005792:	4629      	mov	r1, r5
 8005794:	4638      	mov	r0, r7
 8005796:	f7ff ffa7 	bl	80056e8 <sbrk_aligned>
 800579a:	3001      	adds	r0, #1
 800579c:	d037      	beq.n	800580e <_malloc_r+0xe6>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	442b      	add	r3, r5
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	f8d8 3000 	ldr.w	r3, [r8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d038      	beq.n	800581e <_malloc_r+0xf6>
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	42a2      	cmp	r2, r4
 80057b0:	d12b      	bne.n	800580a <_malloc_r+0xe2>
 80057b2:	2200      	movs	r2, #0
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	e00f      	b.n	80057d8 <_malloc_r+0xb0>
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	1b52      	subs	r2, r2, r5
 80057bc:	d41f      	bmi.n	80057fe <_malloc_r+0xd6>
 80057be:	2a0b      	cmp	r2, #11
 80057c0:	d917      	bls.n	80057f2 <_malloc_r+0xca>
 80057c2:	1961      	adds	r1, r4, r5
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	6025      	str	r5, [r4, #0]
 80057c8:	bf18      	it	ne
 80057ca:	6059      	strne	r1, [r3, #4]
 80057cc:	6863      	ldr	r3, [r4, #4]
 80057ce:	bf08      	it	eq
 80057d0:	f8c8 1000 	streq.w	r1, [r8]
 80057d4:	5162      	str	r2, [r4, r5]
 80057d6:	604b      	str	r3, [r1, #4]
 80057d8:	4638      	mov	r0, r7
 80057da:	f104 060b 	add.w	r6, r4, #11
 80057de:	f000 f829 	bl	8005834 <__malloc_unlock>
 80057e2:	f026 0607 	bic.w	r6, r6, #7
 80057e6:	1d23      	adds	r3, r4, #4
 80057e8:	1af2      	subs	r2, r6, r3
 80057ea:	d0ae      	beq.n	800574a <_malloc_r+0x22>
 80057ec:	1b9b      	subs	r3, r3, r6
 80057ee:	50a3      	str	r3, [r4, r2]
 80057f0:	e7ab      	b.n	800574a <_malloc_r+0x22>
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	6862      	ldr	r2, [r4, #4]
 80057f6:	d1dd      	bne.n	80057b4 <_malloc_r+0x8c>
 80057f8:	f8c8 2000 	str.w	r2, [r8]
 80057fc:	e7ec      	b.n	80057d8 <_malloc_r+0xb0>
 80057fe:	4623      	mov	r3, r4
 8005800:	6864      	ldr	r4, [r4, #4]
 8005802:	e7ac      	b.n	800575e <_malloc_r+0x36>
 8005804:	4634      	mov	r4, r6
 8005806:	6876      	ldr	r6, [r6, #4]
 8005808:	e7b4      	b.n	8005774 <_malloc_r+0x4c>
 800580a:	4613      	mov	r3, r2
 800580c:	e7cc      	b.n	80057a8 <_malloc_r+0x80>
 800580e:	230c      	movs	r3, #12
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4638      	mov	r0, r7
 8005814:	f000 f80e 	bl	8005834 <__malloc_unlock>
 8005818:	e797      	b.n	800574a <_malloc_r+0x22>
 800581a:	6025      	str	r5, [r4, #0]
 800581c:	e7dc      	b.n	80057d8 <_malloc_r+0xb0>
 800581e:	605b      	str	r3, [r3, #4]
 8005820:	deff      	udf	#255	; 0xff
 8005822:	bf00      	nop
 8005824:	240001ac 	.word	0x240001ac

08005828 <__malloc_lock>:
 8005828:	4801      	ldr	r0, [pc, #4]	; (8005830 <__malloc_lock+0x8>)
 800582a:	f000 b86b 	b.w	8005904 <__retarget_lock_acquire_recursive>
 800582e:	bf00      	nop
 8005830:	240002f0 	.word	0x240002f0

08005834 <__malloc_unlock>:
 8005834:	4801      	ldr	r0, [pc, #4]	; (800583c <__malloc_unlock+0x8>)
 8005836:	f000 b866 	b.w	8005906 <__retarget_lock_release_recursive>
 800583a:	bf00      	nop
 800583c:	240002f0 	.word	0x240002f0

08005840 <siprintf>:
 8005840:	b40e      	push	{r1, r2, r3}
 8005842:	b500      	push	{lr}
 8005844:	b09c      	sub	sp, #112	; 0x70
 8005846:	ab1d      	add	r3, sp, #116	; 0x74
 8005848:	9002      	str	r0, [sp, #8]
 800584a:	9006      	str	r0, [sp, #24]
 800584c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005850:	4809      	ldr	r0, [pc, #36]	; (8005878 <siprintf+0x38>)
 8005852:	9107      	str	r1, [sp, #28]
 8005854:	9104      	str	r1, [sp, #16]
 8005856:	4909      	ldr	r1, [pc, #36]	; (800587c <siprintf+0x3c>)
 8005858:	f853 2b04 	ldr.w	r2, [r3], #4
 800585c:	9105      	str	r1, [sp, #20]
 800585e:	6800      	ldr	r0, [r0, #0]
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	a902      	add	r1, sp, #8
 8005864:	f000 f904 	bl	8005a70 <_svfiprintf_r>
 8005868:	9b02      	ldr	r3, [sp, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	b01c      	add	sp, #112	; 0x70
 8005870:	f85d eb04 	ldr.w	lr, [sp], #4
 8005874:	b003      	add	sp, #12
 8005876:	4770      	bx	lr
 8005878:	2400005c 	.word	0x2400005c
 800587c:	ffff0208 	.word	0xffff0208

08005880 <memset>:
 8005880:	4402      	add	r2, r0
 8005882:	4603      	mov	r3, r0
 8005884:	4293      	cmp	r3, r2
 8005886:	d100      	bne.n	800588a <memset+0xa>
 8005888:	4770      	bx	lr
 800588a:	f803 1b01 	strb.w	r1, [r3], #1
 800588e:	e7f9      	b.n	8005884 <memset+0x4>

08005890 <_sbrk_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4d06      	ldr	r5, [pc, #24]	; (80058ac <_sbrk_r+0x1c>)
 8005894:	2300      	movs	r3, #0
 8005896:	4604      	mov	r4, r0
 8005898:	4608      	mov	r0, r1
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	f7fb f92c 	bl	8000af8 <_sbrk>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_sbrk_r+0x1a>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_sbrk_r+0x1a>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	240002ec 	.word	0x240002ec

080058b0 <__errno>:
 80058b0:	4b01      	ldr	r3, [pc, #4]	; (80058b8 <__errno+0x8>)
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	2400005c 	.word	0x2400005c

080058bc <__libc_init_array>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4d0d      	ldr	r5, [pc, #52]	; (80058f4 <__libc_init_array+0x38>)
 80058c0:	4c0d      	ldr	r4, [pc, #52]	; (80058f8 <__libc_init_array+0x3c>)
 80058c2:	1b64      	subs	r4, r4, r5
 80058c4:	10a4      	asrs	r4, r4, #2
 80058c6:	2600      	movs	r6, #0
 80058c8:	42a6      	cmp	r6, r4
 80058ca:	d109      	bne.n	80058e0 <__libc_init_array+0x24>
 80058cc:	4d0b      	ldr	r5, [pc, #44]	; (80058fc <__libc_init_array+0x40>)
 80058ce:	4c0c      	ldr	r4, [pc, #48]	; (8005900 <__libc_init_array+0x44>)
 80058d0:	f000 fbae 	bl	8006030 <_init>
 80058d4:	1b64      	subs	r4, r4, r5
 80058d6:	10a4      	asrs	r4, r4, #2
 80058d8:	2600      	movs	r6, #0
 80058da:	42a6      	cmp	r6, r4
 80058dc:	d105      	bne.n	80058ea <__libc_init_array+0x2e>
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e4:	4798      	blx	r3
 80058e6:	3601      	adds	r6, #1
 80058e8:	e7ee      	b.n	80058c8 <__libc_init_array+0xc>
 80058ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ee:	4798      	blx	r3
 80058f0:	3601      	adds	r6, #1
 80058f2:	e7f2      	b.n	80058da <__libc_init_array+0x1e>
 80058f4:	0800634c 	.word	0x0800634c
 80058f8:	0800634c 	.word	0x0800634c
 80058fc:	0800634c 	.word	0x0800634c
 8005900:	08006350 	.word	0x08006350

08005904 <__retarget_lock_acquire_recursive>:
 8005904:	4770      	bx	lr

08005906 <__retarget_lock_release_recursive>:
 8005906:	4770      	bx	lr

08005908 <memcpy>:
 8005908:	440a      	add	r2, r1
 800590a:	4291      	cmp	r1, r2
 800590c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005910:	d100      	bne.n	8005914 <memcpy+0xc>
 8005912:	4770      	bx	lr
 8005914:	b510      	push	{r4, lr}
 8005916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800591a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800591e:	4291      	cmp	r1, r2
 8005920:	d1f9      	bne.n	8005916 <memcpy+0xe>
 8005922:	bd10      	pop	{r4, pc}

08005924 <_free_r>:
 8005924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005926:	2900      	cmp	r1, #0
 8005928:	d044      	beq.n	80059b4 <_free_r+0x90>
 800592a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592e:	9001      	str	r0, [sp, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f1a1 0404 	sub.w	r4, r1, #4
 8005936:	bfb8      	it	lt
 8005938:	18e4      	addlt	r4, r4, r3
 800593a:	f7ff ff75 	bl	8005828 <__malloc_lock>
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <_free_r+0x94>)
 8005940:	9801      	ldr	r0, [sp, #4]
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	b933      	cbnz	r3, 8005954 <_free_r+0x30>
 8005946:	6063      	str	r3, [r4, #4]
 8005948:	6014      	str	r4, [r2, #0]
 800594a:	b003      	add	sp, #12
 800594c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005950:	f7ff bf70 	b.w	8005834 <__malloc_unlock>
 8005954:	42a3      	cmp	r3, r4
 8005956:	d908      	bls.n	800596a <_free_r+0x46>
 8005958:	6825      	ldr	r5, [r4, #0]
 800595a:	1961      	adds	r1, r4, r5
 800595c:	428b      	cmp	r3, r1
 800595e:	bf01      	itttt	eq
 8005960:	6819      	ldreq	r1, [r3, #0]
 8005962:	685b      	ldreq	r3, [r3, #4]
 8005964:	1949      	addeq	r1, r1, r5
 8005966:	6021      	streq	r1, [r4, #0]
 8005968:	e7ed      	b.n	8005946 <_free_r+0x22>
 800596a:	461a      	mov	r2, r3
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	b10b      	cbz	r3, 8005974 <_free_r+0x50>
 8005970:	42a3      	cmp	r3, r4
 8005972:	d9fa      	bls.n	800596a <_free_r+0x46>
 8005974:	6811      	ldr	r1, [r2, #0]
 8005976:	1855      	adds	r5, r2, r1
 8005978:	42a5      	cmp	r5, r4
 800597a:	d10b      	bne.n	8005994 <_free_r+0x70>
 800597c:	6824      	ldr	r4, [r4, #0]
 800597e:	4421      	add	r1, r4
 8005980:	1854      	adds	r4, r2, r1
 8005982:	42a3      	cmp	r3, r4
 8005984:	6011      	str	r1, [r2, #0]
 8005986:	d1e0      	bne.n	800594a <_free_r+0x26>
 8005988:	681c      	ldr	r4, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	6053      	str	r3, [r2, #4]
 800598e:	440c      	add	r4, r1
 8005990:	6014      	str	r4, [r2, #0]
 8005992:	e7da      	b.n	800594a <_free_r+0x26>
 8005994:	d902      	bls.n	800599c <_free_r+0x78>
 8005996:	230c      	movs	r3, #12
 8005998:	6003      	str	r3, [r0, #0]
 800599a:	e7d6      	b.n	800594a <_free_r+0x26>
 800599c:	6825      	ldr	r5, [r4, #0]
 800599e:	1961      	adds	r1, r4, r5
 80059a0:	428b      	cmp	r3, r1
 80059a2:	bf04      	itt	eq
 80059a4:	6819      	ldreq	r1, [r3, #0]
 80059a6:	685b      	ldreq	r3, [r3, #4]
 80059a8:	6063      	str	r3, [r4, #4]
 80059aa:	bf04      	itt	eq
 80059ac:	1949      	addeq	r1, r1, r5
 80059ae:	6021      	streq	r1, [r4, #0]
 80059b0:	6054      	str	r4, [r2, #4]
 80059b2:	e7ca      	b.n	800594a <_free_r+0x26>
 80059b4:	b003      	add	sp, #12
 80059b6:	bd30      	pop	{r4, r5, pc}
 80059b8:	240001ac 	.word	0x240001ac

080059bc <__ssputs_r>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	688e      	ldr	r6, [r1, #8]
 80059c2:	461f      	mov	r7, r3
 80059c4:	42be      	cmp	r6, r7
 80059c6:	680b      	ldr	r3, [r1, #0]
 80059c8:	4682      	mov	sl, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	4690      	mov	r8, r2
 80059ce:	d82c      	bhi.n	8005a2a <__ssputs_r+0x6e>
 80059d0:	898a      	ldrh	r2, [r1, #12]
 80059d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059d6:	d026      	beq.n	8005a26 <__ssputs_r+0x6a>
 80059d8:	6965      	ldr	r5, [r4, #20]
 80059da:	6909      	ldr	r1, [r1, #16]
 80059dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059e0:	eba3 0901 	sub.w	r9, r3, r1
 80059e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059e8:	1c7b      	adds	r3, r7, #1
 80059ea:	444b      	add	r3, r9
 80059ec:	106d      	asrs	r5, r5, #1
 80059ee:	429d      	cmp	r5, r3
 80059f0:	bf38      	it	cc
 80059f2:	461d      	movcc	r5, r3
 80059f4:	0553      	lsls	r3, r2, #21
 80059f6:	d527      	bpl.n	8005a48 <__ssputs_r+0x8c>
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7ff fe95 	bl	8005728 <_malloc_r>
 80059fe:	4606      	mov	r6, r0
 8005a00:	b360      	cbz	r0, 8005a5c <__ssputs_r+0xa0>
 8005a02:	6921      	ldr	r1, [r4, #16]
 8005a04:	464a      	mov	r2, r9
 8005a06:	f7ff ff7f 	bl	8005908 <memcpy>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	6126      	str	r6, [r4, #16]
 8005a18:	6165      	str	r5, [r4, #20]
 8005a1a:	444e      	add	r6, r9
 8005a1c:	eba5 0509 	sub.w	r5, r5, r9
 8005a20:	6026      	str	r6, [r4, #0]
 8005a22:	60a5      	str	r5, [r4, #8]
 8005a24:	463e      	mov	r6, r7
 8005a26:	42be      	cmp	r6, r7
 8005a28:	d900      	bls.n	8005a2c <__ssputs_r+0x70>
 8005a2a:	463e      	mov	r6, r7
 8005a2c:	6820      	ldr	r0, [r4, #0]
 8005a2e:	4632      	mov	r2, r6
 8005a30:	4641      	mov	r1, r8
 8005a32:	f000 faab 	bl	8005f8c <memmove>
 8005a36:	68a3      	ldr	r3, [r4, #8]
 8005a38:	1b9b      	subs	r3, r3, r6
 8005a3a:	60a3      	str	r3, [r4, #8]
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	4433      	add	r3, r6
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	2000      	movs	r0, #0
 8005a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a48:	462a      	mov	r2, r5
 8005a4a:	f000 fab9 	bl	8005fc0 <_realloc_r>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d1e0      	bne.n	8005a16 <__ssputs_r+0x5a>
 8005a54:	6921      	ldr	r1, [r4, #16]
 8005a56:	4650      	mov	r0, sl
 8005a58:	f7ff ff64 	bl	8005924 <_free_r>
 8005a5c:	230c      	movs	r3, #12
 8005a5e:	f8ca 3000 	str.w	r3, [sl]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a68:	81a3      	strh	r3, [r4, #12]
 8005a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6e:	e7e9      	b.n	8005a44 <__ssputs_r+0x88>

08005a70 <_svfiprintf_r>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	4698      	mov	r8, r3
 8005a76:	898b      	ldrh	r3, [r1, #12]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	b09d      	sub	sp, #116	; 0x74
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	460d      	mov	r5, r1
 8005a80:	4614      	mov	r4, r2
 8005a82:	d50e      	bpl.n	8005aa2 <_svfiprintf_r+0x32>
 8005a84:	690b      	ldr	r3, [r1, #16]
 8005a86:	b963      	cbnz	r3, 8005aa2 <_svfiprintf_r+0x32>
 8005a88:	2140      	movs	r1, #64	; 0x40
 8005a8a:	f7ff fe4d 	bl	8005728 <_malloc_r>
 8005a8e:	6028      	str	r0, [r5, #0]
 8005a90:	6128      	str	r0, [r5, #16]
 8005a92:	b920      	cbnz	r0, 8005a9e <_svfiprintf_r+0x2e>
 8005a94:	230c      	movs	r3, #12
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e0d0      	b.n	8005c40 <_svfiprintf_r+0x1d0>
 8005a9e:	2340      	movs	r3, #64	; 0x40
 8005aa0:	616b      	str	r3, [r5, #20]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa6:	2320      	movs	r3, #32
 8005aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab0:	2330      	movs	r3, #48	; 0x30
 8005ab2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c58 <_svfiprintf_r+0x1e8>
 8005ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aba:	f04f 0901 	mov.w	r9, #1
 8005abe:	4623      	mov	r3, r4
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac6:	b10a      	cbz	r2, 8005acc <_svfiprintf_r+0x5c>
 8005ac8:	2a25      	cmp	r2, #37	; 0x25
 8005aca:	d1f9      	bne.n	8005ac0 <_svfiprintf_r+0x50>
 8005acc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad0:	d00b      	beq.n	8005aea <_svfiprintf_r+0x7a>
 8005ad2:	465b      	mov	r3, fp
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f7ff ff6f 	bl	80059bc <__ssputs_r>
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f000 80a9 	beq.w	8005c36 <_svfiprintf_r+0x1c6>
 8005ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae6:	445a      	add	r2, fp
 8005ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aea:	f89a 3000 	ldrb.w	r3, [sl]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80a1 	beq.w	8005c36 <_svfiprintf_r+0x1c6>
 8005af4:	2300      	movs	r3, #0
 8005af6:	f04f 32ff 	mov.w	r2, #4294967295
 8005afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005afe:	f10a 0a01 	add.w	sl, sl, #1
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	9307      	str	r3, [sp, #28]
 8005b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0c:	4654      	mov	r4, sl
 8005b0e:	2205      	movs	r2, #5
 8005b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b14:	4850      	ldr	r0, [pc, #320]	; (8005c58 <_svfiprintf_r+0x1e8>)
 8005b16:	f7fa fbf3 	bl	8000300 <memchr>
 8005b1a:	9a04      	ldr	r2, [sp, #16]
 8005b1c:	b9d8      	cbnz	r0, 8005b56 <_svfiprintf_r+0xe6>
 8005b1e:	06d0      	lsls	r0, r2, #27
 8005b20:	bf44      	itt	mi
 8005b22:	2320      	movmi	r3, #32
 8005b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b28:	0711      	lsls	r1, r2, #28
 8005b2a:	bf44      	itt	mi
 8005b2c:	232b      	movmi	r3, #43	; 0x2b
 8005b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b32:	f89a 3000 	ldrb.w	r3, [sl]
 8005b36:	2b2a      	cmp	r3, #42	; 0x2a
 8005b38:	d015      	beq.n	8005b66 <_svfiprintf_r+0xf6>
 8005b3a:	9a07      	ldr	r2, [sp, #28]
 8005b3c:	4654      	mov	r4, sl
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f04f 0c0a 	mov.w	ip, #10
 8005b44:	4621      	mov	r1, r4
 8005b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4a:	3b30      	subs	r3, #48	; 0x30
 8005b4c:	2b09      	cmp	r3, #9
 8005b4e:	d94d      	bls.n	8005bec <_svfiprintf_r+0x17c>
 8005b50:	b1b0      	cbz	r0, 8005b80 <_svfiprintf_r+0x110>
 8005b52:	9207      	str	r2, [sp, #28]
 8005b54:	e014      	b.n	8005b80 <_svfiprintf_r+0x110>
 8005b56:	eba0 0308 	sub.w	r3, r0, r8
 8005b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	46a2      	mov	sl, r4
 8005b64:	e7d2      	b.n	8005b0c <_svfiprintf_r+0x9c>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	1d19      	adds	r1, r3, #4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	9103      	str	r1, [sp, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfbb      	ittet	lt
 8005b72:	425b      	neglt	r3, r3
 8005b74:	f042 0202 	orrlt.w	r2, r2, #2
 8005b78:	9307      	strge	r3, [sp, #28]
 8005b7a:	9307      	strlt	r3, [sp, #28]
 8005b7c:	bfb8      	it	lt
 8005b7e:	9204      	strlt	r2, [sp, #16]
 8005b80:	7823      	ldrb	r3, [r4, #0]
 8005b82:	2b2e      	cmp	r3, #46	; 0x2e
 8005b84:	d10c      	bne.n	8005ba0 <_svfiprintf_r+0x130>
 8005b86:	7863      	ldrb	r3, [r4, #1]
 8005b88:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8a:	d134      	bne.n	8005bf6 <_svfiprintf_r+0x186>
 8005b8c:	9b03      	ldr	r3, [sp, #12]
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	9203      	str	r2, [sp, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bfb8      	it	lt
 8005b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b9c:	3402      	adds	r4, #2
 8005b9e:	9305      	str	r3, [sp, #20]
 8005ba0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005c68 <_svfiprintf_r+0x1f8>
 8005ba4:	7821      	ldrb	r1, [r4, #0]
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	4650      	mov	r0, sl
 8005baa:	f7fa fba9 	bl	8000300 <memchr>
 8005bae:	b138      	cbz	r0, 8005bc0 <_svfiprintf_r+0x150>
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	eba0 000a 	sub.w	r0, r0, sl
 8005bb6:	2240      	movs	r2, #64	; 0x40
 8005bb8:	4082      	lsls	r2, r0
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc4:	4825      	ldr	r0, [pc, #148]	; (8005c5c <_svfiprintf_r+0x1ec>)
 8005bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bca:	2206      	movs	r2, #6
 8005bcc:	f7fa fb98 	bl	8000300 <memchr>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d038      	beq.n	8005c46 <_svfiprintf_r+0x1d6>
 8005bd4:	4b22      	ldr	r3, [pc, #136]	; (8005c60 <_svfiprintf_r+0x1f0>)
 8005bd6:	bb1b      	cbnz	r3, 8005c20 <_svfiprintf_r+0x1b0>
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	3307      	adds	r3, #7
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	3308      	adds	r3, #8
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be6:	4433      	add	r3, r6
 8005be8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bea:	e768      	b.n	8005abe <_svfiprintf_r+0x4e>
 8005bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e7a6      	b.n	8005b44 <_svfiprintf_r+0xd4>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	3401      	adds	r4, #1
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f04f 0c0a 	mov.w	ip, #10
 8005c02:	4620      	mov	r0, r4
 8005c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c08:	3a30      	subs	r2, #48	; 0x30
 8005c0a:	2a09      	cmp	r2, #9
 8005c0c:	d903      	bls.n	8005c16 <_svfiprintf_r+0x1a6>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c6      	beq.n	8005ba0 <_svfiprintf_r+0x130>
 8005c12:	9105      	str	r1, [sp, #20]
 8005c14:	e7c4      	b.n	8005ba0 <_svfiprintf_r+0x130>
 8005c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e7f0      	b.n	8005c02 <_svfiprintf_r+0x192>
 8005c20:	ab03      	add	r3, sp, #12
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	462a      	mov	r2, r5
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <_svfiprintf_r+0x1f4>)
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	f3af 8000 	nop.w
 8005c30:	1c42      	adds	r2, r0, #1
 8005c32:	4606      	mov	r6, r0
 8005c34:	d1d6      	bne.n	8005be4 <_svfiprintf_r+0x174>
 8005c36:	89ab      	ldrh	r3, [r5, #12]
 8005c38:	065b      	lsls	r3, r3, #25
 8005c3a:	f53f af2d 	bmi.w	8005a98 <_svfiprintf_r+0x28>
 8005c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c40:	b01d      	add	sp, #116	; 0x74
 8005c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c46:	ab03      	add	r3, sp, #12
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	462a      	mov	r2, r5
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <_svfiprintf_r+0x1f4>)
 8005c4e:	a904      	add	r1, sp, #16
 8005c50:	4638      	mov	r0, r7
 8005c52:	f000 f879 	bl	8005d48 <_printf_i>
 8005c56:	e7eb      	b.n	8005c30 <_svfiprintf_r+0x1c0>
 8005c58:	08006310 	.word	0x08006310
 8005c5c:	0800631a 	.word	0x0800631a
 8005c60:	00000000 	.word	0x00000000
 8005c64:	080059bd 	.word	0x080059bd
 8005c68:	08006316 	.word	0x08006316

08005c6c <_printf_common>:
 8005c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c70:	4616      	mov	r6, r2
 8005c72:	4699      	mov	r9, r3
 8005c74:	688a      	ldr	r2, [r1, #8]
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	bfb8      	it	lt
 8005c80:	4613      	movlt	r3, r2
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c88:	4607      	mov	r7, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	b10a      	cbz	r2, 8005c92 <_printf_common+0x26>
 8005c8e:	3301      	adds	r3, #1
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	0699      	lsls	r1, r3, #26
 8005c96:	bf42      	ittt	mi
 8005c98:	6833      	ldrmi	r3, [r6, #0]
 8005c9a:	3302      	addmi	r3, #2
 8005c9c:	6033      	strmi	r3, [r6, #0]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	f015 0506 	ands.w	r5, r5, #6
 8005ca4:	d106      	bne.n	8005cb4 <_printf_common+0x48>
 8005ca6:	f104 0a19 	add.w	sl, r4, #25
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	6832      	ldr	r2, [r6, #0]
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dc26      	bgt.n	8005d02 <_printf_common+0x96>
 8005cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cb8:	1e13      	subs	r3, r2, #0
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	bf18      	it	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	0692      	lsls	r2, r2, #26
 8005cc2:	d42b      	bmi.n	8005d1c <_printf_common+0xb0>
 8005cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4638      	mov	r0, r7
 8005ccc:	47c0      	blx	r8
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d01e      	beq.n	8005d10 <_printf_common+0xa4>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	6922      	ldr	r2, [r4, #16]
 8005cd6:	f003 0306 	and.w	r3, r3, #6
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	bf02      	ittt	eq
 8005cde:	68e5      	ldreq	r5, [r4, #12]
 8005ce0:	6833      	ldreq	r3, [r6, #0]
 8005ce2:	1aed      	subeq	r5, r5, r3
 8005ce4:	68a3      	ldr	r3, [r4, #8]
 8005ce6:	bf0c      	ite	eq
 8005ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cec:	2500      	movne	r5, #0
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	bfc4      	itt	gt
 8005cf2:	1a9b      	subgt	r3, r3, r2
 8005cf4:	18ed      	addgt	r5, r5, r3
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	341a      	adds	r4, #26
 8005cfa:	42b5      	cmp	r5, r6
 8005cfc:	d11a      	bne.n	8005d34 <_printf_common+0xc8>
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e008      	b.n	8005d14 <_printf_common+0xa8>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4652      	mov	r2, sl
 8005d06:	4649      	mov	r1, r9
 8005d08:	4638      	mov	r0, r7
 8005d0a:	47c0      	blx	r8
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d103      	bne.n	8005d18 <_printf_common+0xac>
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d18:	3501      	adds	r5, #1
 8005d1a:	e7c6      	b.n	8005caa <_printf_common+0x3e>
 8005d1c:	18e1      	adds	r1, r4, r3
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	2030      	movs	r0, #48	; 0x30
 8005d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d26:	4422      	add	r2, r4
 8005d28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d30:	3302      	adds	r3, #2
 8005d32:	e7c7      	b.n	8005cc4 <_printf_common+0x58>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4622      	mov	r2, r4
 8005d38:	4649      	mov	r1, r9
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	47c0      	blx	r8
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d0e6      	beq.n	8005d10 <_printf_common+0xa4>
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7d9      	b.n	8005cfa <_printf_common+0x8e>
	...

08005d48 <_printf_i>:
 8005d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	7e0f      	ldrb	r7, [r1, #24]
 8005d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d50:	2f78      	cmp	r7, #120	; 0x78
 8005d52:	4691      	mov	r9, r2
 8005d54:	4680      	mov	r8, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	469a      	mov	sl, r3
 8005d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d5e:	d807      	bhi.n	8005d70 <_printf_i+0x28>
 8005d60:	2f62      	cmp	r7, #98	; 0x62
 8005d62:	d80a      	bhi.n	8005d7a <_printf_i+0x32>
 8005d64:	2f00      	cmp	r7, #0
 8005d66:	f000 80d4 	beq.w	8005f12 <_printf_i+0x1ca>
 8005d6a:	2f58      	cmp	r7, #88	; 0x58
 8005d6c:	f000 80c0 	beq.w	8005ef0 <_printf_i+0x1a8>
 8005d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d78:	e03a      	b.n	8005df0 <_printf_i+0xa8>
 8005d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d7e:	2b15      	cmp	r3, #21
 8005d80:	d8f6      	bhi.n	8005d70 <_printf_i+0x28>
 8005d82:	a101      	add	r1, pc, #4	; (adr r1, 8005d88 <_printf_i+0x40>)
 8005d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d88:	08005de1 	.word	0x08005de1
 8005d8c:	08005df5 	.word	0x08005df5
 8005d90:	08005d71 	.word	0x08005d71
 8005d94:	08005d71 	.word	0x08005d71
 8005d98:	08005d71 	.word	0x08005d71
 8005d9c:	08005d71 	.word	0x08005d71
 8005da0:	08005df5 	.word	0x08005df5
 8005da4:	08005d71 	.word	0x08005d71
 8005da8:	08005d71 	.word	0x08005d71
 8005dac:	08005d71 	.word	0x08005d71
 8005db0:	08005d71 	.word	0x08005d71
 8005db4:	08005ef9 	.word	0x08005ef9
 8005db8:	08005e21 	.word	0x08005e21
 8005dbc:	08005eb3 	.word	0x08005eb3
 8005dc0:	08005d71 	.word	0x08005d71
 8005dc4:	08005d71 	.word	0x08005d71
 8005dc8:	08005f1b 	.word	0x08005f1b
 8005dcc:	08005d71 	.word	0x08005d71
 8005dd0:	08005e21 	.word	0x08005e21
 8005dd4:	08005d71 	.word	0x08005d71
 8005dd8:	08005d71 	.word	0x08005d71
 8005ddc:	08005ebb 	.word	0x08005ebb
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	1d1a      	adds	r2, r3, #4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	602a      	str	r2, [r5, #0]
 8005de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df0:	2301      	movs	r3, #1
 8005df2:	e09f      	b.n	8005f34 <_printf_i+0x1ec>
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	0607      	lsls	r7, r0, #24
 8005dfa:	f103 0104 	add.w	r1, r3, #4
 8005dfe:	6029      	str	r1, [r5, #0]
 8005e00:	d501      	bpl.n	8005e06 <_printf_i+0xbe>
 8005e02:	681e      	ldr	r6, [r3, #0]
 8005e04:	e003      	b.n	8005e0e <_printf_i+0xc6>
 8005e06:	0646      	lsls	r6, r0, #25
 8005e08:	d5fb      	bpl.n	8005e02 <_printf_i+0xba>
 8005e0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	da03      	bge.n	8005e1a <_printf_i+0xd2>
 8005e12:	232d      	movs	r3, #45	; 0x2d
 8005e14:	4276      	negs	r6, r6
 8005e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e1a:	485a      	ldr	r0, [pc, #360]	; (8005f84 <_printf_i+0x23c>)
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	e012      	b.n	8005e46 <_printf_i+0xfe>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	1d19      	adds	r1, r3, #4
 8005e26:	6029      	str	r1, [r5, #0]
 8005e28:	0605      	lsls	r5, r0, #24
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0xe8>
 8005e2c:	681e      	ldr	r6, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <_printf_i+0xee>
 8005e30:	0641      	lsls	r1, r0, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0xe4>
 8005e34:	881e      	ldrh	r6, [r3, #0]
 8005e36:	4853      	ldr	r0, [pc, #332]	; (8005f84 <_printf_i+0x23c>)
 8005e38:	2f6f      	cmp	r7, #111	; 0x6f
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2308      	moveq	r3, #8
 8005e3e:	230a      	movne	r3, #10
 8005e40:	2100      	movs	r1, #0
 8005e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e46:	6865      	ldr	r5, [r4, #4]
 8005e48:	60a5      	str	r5, [r4, #8]
 8005e4a:	2d00      	cmp	r5, #0
 8005e4c:	bfa2      	ittt	ge
 8005e4e:	6821      	ldrge	r1, [r4, #0]
 8005e50:	f021 0104 	bicge.w	r1, r1, #4
 8005e54:	6021      	strge	r1, [r4, #0]
 8005e56:	b90e      	cbnz	r6, 8005e5c <_printf_i+0x114>
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	d04b      	beq.n	8005ef4 <_printf_i+0x1ac>
 8005e5c:	4615      	mov	r5, r2
 8005e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e62:	fb03 6711 	mls	r7, r3, r1, r6
 8005e66:	5dc7      	ldrb	r7, [r0, r7]
 8005e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e6c:	4637      	mov	r7, r6
 8005e6e:	42bb      	cmp	r3, r7
 8005e70:	460e      	mov	r6, r1
 8005e72:	d9f4      	bls.n	8005e5e <_printf_i+0x116>
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d10b      	bne.n	8005e90 <_printf_i+0x148>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	07de      	lsls	r6, r3, #31
 8005e7c:	d508      	bpl.n	8005e90 <_printf_i+0x148>
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	6861      	ldr	r1, [r4, #4]
 8005e82:	4299      	cmp	r1, r3
 8005e84:	bfde      	ittt	le
 8005e86:	2330      	movle	r3, #48	; 0x30
 8005e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e90:	1b52      	subs	r2, r2, r5
 8005e92:	6122      	str	r2, [r4, #16]
 8005e94:	f8cd a000 	str.w	sl, [sp]
 8005e98:	464b      	mov	r3, r9
 8005e9a:	aa03      	add	r2, sp, #12
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f7ff fee4 	bl	8005c6c <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d14a      	bne.n	8005f3e <_printf_i+0x1f6>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	b004      	add	sp, #16
 8005eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f043 0320 	orr.w	r3, r3, #32
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	4833      	ldr	r0, [pc, #204]	; (8005f88 <_printf_i+0x240>)
 8005ebc:	2778      	movs	r7, #120	; 0x78
 8005ebe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	6829      	ldr	r1, [r5, #0]
 8005ec6:	061f      	lsls	r7, r3, #24
 8005ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ecc:	d402      	bmi.n	8005ed4 <_printf_i+0x18c>
 8005ece:	065f      	lsls	r7, r3, #25
 8005ed0:	bf48      	it	mi
 8005ed2:	b2b6      	uxthmi	r6, r6
 8005ed4:	07df      	lsls	r7, r3, #31
 8005ed6:	bf48      	it	mi
 8005ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8005edc:	6029      	str	r1, [r5, #0]
 8005ede:	bf48      	it	mi
 8005ee0:	6023      	strmi	r3, [r4, #0]
 8005ee2:	b91e      	cbnz	r6, 8005eec <_printf_i+0x1a4>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	f023 0320 	bic.w	r3, r3, #32
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	2310      	movs	r3, #16
 8005eee:	e7a7      	b.n	8005e40 <_printf_i+0xf8>
 8005ef0:	4824      	ldr	r0, [pc, #144]	; (8005f84 <_printf_i+0x23c>)
 8005ef2:	e7e4      	b.n	8005ebe <_printf_i+0x176>
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	e7bd      	b.n	8005e74 <_printf_i+0x12c>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	6826      	ldr	r6, [r4, #0]
 8005efc:	6961      	ldr	r1, [r4, #20]
 8005efe:	1d18      	adds	r0, r3, #4
 8005f00:	6028      	str	r0, [r5, #0]
 8005f02:	0635      	lsls	r5, r6, #24
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	d501      	bpl.n	8005f0c <_printf_i+0x1c4>
 8005f08:	6019      	str	r1, [r3, #0]
 8005f0a:	e002      	b.n	8005f12 <_printf_i+0x1ca>
 8005f0c:	0670      	lsls	r0, r6, #25
 8005f0e:	d5fb      	bpl.n	8005f08 <_printf_i+0x1c0>
 8005f10:	8019      	strh	r1, [r3, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	4615      	mov	r5, r2
 8005f18:	e7bc      	b.n	8005e94 <_printf_i+0x14c>
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	1d1a      	adds	r2, r3, #4
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	681d      	ldr	r5, [r3, #0]
 8005f22:	6862      	ldr	r2, [r4, #4]
 8005f24:	2100      	movs	r1, #0
 8005f26:	4628      	mov	r0, r5
 8005f28:	f7fa f9ea 	bl	8000300 <memchr>
 8005f2c:	b108      	cbz	r0, 8005f32 <_printf_i+0x1ea>
 8005f2e:	1b40      	subs	r0, r0, r5
 8005f30:	6060      	str	r0, [r4, #4]
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	2300      	movs	r3, #0
 8005f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f3c:	e7aa      	b.n	8005e94 <_printf_i+0x14c>
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	462a      	mov	r2, r5
 8005f42:	4649      	mov	r1, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	47d0      	blx	sl
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d0ad      	beq.n	8005ea8 <_printf_i+0x160>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	079b      	lsls	r3, r3, #30
 8005f50:	d413      	bmi.n	8005f7a <_printf_i+0x232>
 8005f52:	68e0      	ldr	r0, [r4, #12]
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	4298      	cmp	r0, r3
 8005f58:	bfb8      	it	lt
 8005f5a:	4618      	movlt	r0, r3
 8005f5c:	e7a6      	b.n	8005eac <_printf_i+0x164>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4632      	mov	r2, r6
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	47d0      	blx	sl
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d09d      	beq.n	8005ea8 <_printf_i+0x160>
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	68e3      	ldr	r3, [r4, #12]
 8005f70:	9903      	ldr	r1, [sp, #12]
 8005f72:	1a5b      	subs	r3, r3, r1
 8005f74:	42ab      	cmp	r3, r5
 8005f76:	dcf2      	bgt.n	8005f5e <_printf_i+0x216>
 8005f78:	e7eb      	b.n	8005f52 <_printf_i+0x20a>
 8005f7a:	2500      	movs	r5, #0
 8005f7c:	f104 0619 	add.w	r6, r4, #25
 8005f80:	e7f5      	b.n	8005f6e <_printf_i+0x226>
 8005f82:	bf00      	nop
 8005f84:	08006321 	.word	0x08006321
 8005f88:	08006332 	.word	0x08006332

08005f8c <memmove>:
 8005f8c:	4288      	cmp	r0, r1
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	eb01 0402 	add.w	r4, r1, r2
 8005f94:	d902      	bls.n	8005f9c <memmove+0x10>
 8005f96:	4284      	cmp	r4, r0
 8005f98:	4623      	mov	r3, r4
 8005f9a:	d807      	bhi.n	8005fac <memmove+0x20>
 8005f9c:	1e43      	subs	r3, r0, #1
 8005f9e:	42a1      	cmp	r1, r4
 8005fa0:	d008      	beq.n	8005fb4 <memmove+0x28>
 8005fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005faa:	e7f8      	b.n	8005f9e <memmove+0x12>
 8005fac:	4402      	add	r2, r0
 8005fae:	4601      	mov	r1, r0
 8005fb0:	428a      	cmp	r2, r1
 8005fb2:	d100      	bne.n	8005fb6 <memmove+0x2a>
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fbe:	e7f7      	b.n	8005fb0 <memmove+0x24>

08005fc0 <_realloc_r>:
 8005fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	460e      	mov	r6, r1
 8005fca:	b921      	cbnz	r1, 8005fd6 <_realloc_r+0x16>
 8005fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	f7ff bba9 	b.w	8005728 <_malloc_r>
 8005fd6:	b92a      	cbnz	r2, 8005fe4 <_realloc_r+0x24>
 8005fd8:	f7ff fca4 	bl	8005924 <_free_r>
 8005fdc:	4625      	mov	r5, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe4:	f000 f81b 	bl	800601e <_malloc_usable_size_r>
 8005fe8:	4284      	cmp	r4, r0
 8005fea:	4607      	mov	r7, r0
 8005fec:	d802      	bhi.n	8005ff4 <_realloc_r+0x34>
 8005fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ff2:	d812      	bhi.n	800601a <_realloc_r+0x5a>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7ff fb96 	bl	8005728 <_malloc_r>
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d0ed      	beq.n	8005fde <_realloc_r+0x1e>
 8006002:	42bc      	cmp	r4, r7
 8006004:	4622      	mov	r2, r4
 8006006:	4631      	mov	r1, r6
 8006008:	bf28      	it	cs
 800600a:	463a      	movcs	r2, r7
 800600c:	f7ff fc7c 	bl	8005908 <memcpy>
 8006010:	4631      	mov	r1, r6
 8006012:	4640      	mov	r0, r8
 8006014:	f7ff fc86 	bl	8005924 <_free_r>
 8006018:	e7e1      	b.n	8005fde <_realloc_r+0x1e>
 800601a:	4635      	mov	r5, r6
 800601c:	e7df      	b.n	8005fde <_realloc_r+0x1e>

0800601e <_malloc_usable_size_r>:
 800601e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006022:	1f18      	subs	r0, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	bfbc      	itt	lt
 8006028:	580b      	ldrlt	r3, [r1, r0]
 800602a:	18c0      	addlt	r0, r0, r3
 800602c:	4770      	bx	lr
	...

08006030 <_init>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr

0800603c <_fini>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr
