
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000519c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080054a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  24000010  080054b4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  080054b4  00020158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f13a  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001e13  00000000  00000000  0002f1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000a60  00000000  00000000  00030fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000007f1  00000000  00000000  00031a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000025e0  00000000  00000000  00032221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ff44  00000000  00000000  00034801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013277d  00000000  00000000  00044745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000029c0  00000000  00000000  00176ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  00179884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005430 	.word	0x08005430

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005430 	.word	0x08005430

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_GPIO_Init+0x6c>)
 80005f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_GPIO_Init+0x6c>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_GPIO_Init+0x6c>)
 8000600:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_GPIO_Init+0x6c>)
 800060e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <MX_GPIO_Init+0x6c>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_GPIO_Init+0x6c>)
 800061e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_GPIO_Init+0x6c>)
 800062c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <MX_GPIO_Init+0x6c>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_GPIO_Init+0x6c>)
 800063c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	58024400 	.word	0x58024400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fb09 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f841 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f7ff ffbf 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800066a:	f000 f9bf 	bl	80009ec <MX_USART3_UART_Init>
  MX_UART4_Init();
 800066e:	f000 f971 	bl	8000954 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Dynamixel_PING[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x01, 0x00,/*type instruction, ici Ping*/0x01
 8000672:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <main+0x84>)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	ca07      	ldmia	r2, {r0, r1, r2}
 8000678:	c303      	stmia	r3!, {r0, r1}
 800067a:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  //dyn2_debug_sendArrayAsString(Dynamixel_PING, sizeof(Dynamixel_PING));

	  HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f000 fb8a 	bl	8000d98 <HAL_Delay>
	  huart3.Instance->CR1 |= USART_CR1_TE;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <main+0x88>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <main+0x88>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f042 0208 	orr.w	r2, r2, #8
 8000692:	601a      	str	r2, [r3, #0]
	  huart3.Instance->CR1 &= ~USART_CR1_RE;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <main+0x88>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <main+0x88>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f022 0204 	bic.w	r2, r2, #4
 80006a2:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,"ABCD\n",strlen("ABCD\n"),100);
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2205      	movs	r2, #5
 80006a8:	490e      	ldr	r1, [pc, #56]	; (80006e4 <main+0x8c>)
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <main+0x88>)
 80006ac:	f003 fc7c 	bl	8003fa8 <HAL_UART_Transmit>
	  huart3.Instance->CR1 &= ~USART_CR1_TE;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <main+0x88>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <main+0x88>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f022 0208 	bic.w	r2, r2, #8
 80006be:	601a      	str	r2, [r3, #0]
	  huart3.Instance->CR1 |= USART_CR1_RE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <main+0x88>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <main+0x88>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f042 0204 	orr.w	r2, r2, #4
 80006ce:	601a      	str	r2, [r3, #0]



	  //dyn2_ping();
	  HAL_Delay(1000);
 80006d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d4:	f000 fb60 	bl	8000d98 <HAL_Delay>
	  HAL_Delay(1000);
 80006d8:	e7d0      	b.n	800067c <main+0x24>
 80006da:	bf00      	nop
 80006dc:	08005450 	.word	0x08005450
 80006e0:	240000c0 	.word	0x240000c0
 80006e4:	08005448 	.word	0x08005448

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09c      	sub	sp, #112	; 0x70
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	224c      	movs	r2, #76	; 0x4c
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fe6e 	bl	80053d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2220      	movs	r2, #32
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fe68 	bl	80053d8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000708:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <SystemClock_Config+0xe0>)
 800070a:	f04f 32ff 	mov.w	r2, #4294967295
 800070e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000712:	2004      	movs	r0, #4
 8000714:	f000 fdf8 	bl	8001308 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <SystemClock_Config+0xe4>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <SystemClock_Config+0xe4>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xe4>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xe4>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000748:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	2302      	movs	r3, #2
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800075a:	2318      	movs	r3, #24
 800075c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000762:	2304      	movs	r3, #4
 8000764:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800076a:	230c      	movs	r3, #12
 800076c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076e:	2300      	movs	r3, #0
 8000770:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fe1e 	bl	80013bc <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000786:	f000 f823 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	233f      	movs	r3, #63	; 0x3f
 800078c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fa36 	bl	8001c20 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007ba:	f000 f809 	bl	80007d0 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3770      	adds	r7, #112	; 0x70
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58024400 	.word	0x58024400
 80007cc:	58024800 	.word	0x58024800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_MspInit+0x30>)
 80007e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x30>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x30>)
 80007f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	58024400 	.word	0x58024400

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 fa7c 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000868:	4b32      	ldr	r3, [pc, #200]	; (8000934 <SystemInit+0xd0>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a31      	ldr	r2, [pc, #196]	; (8000934 <SystemInit+0xd0>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <SystemInit+0xd4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f003 030f 	and.w	r3, r3, #15
 8000880:	2b02      	cmp	r3, #2
 8000882:	d807      	bhi.n	8000894 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <SystemInit+0xd4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f023 030f 	bic.w	r3, r3, #15
 800088c:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <SystemInit+0xd4>)
 800088e:	f043 0303 	orr.w	r3, r3, #3
 8000892:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <SystemInit+0xd8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a28      	ldr	r2, [pc, #160]	; (800093c <SystemInit+0xd8>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <SystemInit+0xd8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <SystemInit+0xd8>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4924      	ldr	r1, [pc, #144]	; (800093c <SystemInit+0xd8>)
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <SystemInit+0xdc>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <SystemInit+0xd4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 030c 	and.w	r3, r3, #12
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d007      	beq.n	80008ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <SystemInit+0xd4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f023 030f 	bic.w	r3, r3, #15
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <SystemInit+0xd4>)
 80008c8:	f043 0303 	orr.w	r3, r3, #3
 80008cc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <SystemInit+0xd8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <SystemInit+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <SystemInit+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <SystemInit+0xd8>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <SystemInit+0xe0>)
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <SystemInit+0xd8>)
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <SystemInit+0xe4>)
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <SystemInit+0xd8>)
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <SystemInit+0xe8>)
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <SystemInit+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <SystemInit+0xd8>)
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <SystemInit+0xe8>)
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <SystemInit+0xd8>)
 8000900:	2200      	movs	r2, #0
 8000902:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <SystemInit+0xd8>)
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <SystemInit+0xe8>)
 8000908:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <SystemInit+0xd8>)
 800090c:	2200      	movs	r2, #0
 800090e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <SystemInit+0xd8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <SystemInit+0xd8>)
 8000916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <SystemInit+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <SystemInit+0xec>)
 8000924:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000928:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	52002000 	.word	0x52002000
 800093c:	58024400 	.word	0x58024400
 8000940:	eaf6ed7f 	.word	0xeaf6ed7f
 8000944:	02020200 	.word	0x02020200
 8000948:	01ff0000 	.word	0x01ff0000
 800094c:	01010280 	.word	0x01010280
 8000950:	52004000 	.word	0x52004000

08000954 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_UART4_Init+0x90>)
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_UART4_Init+0x94>)
 800095c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_UART4_Init+0x90>)
 8000960:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000964:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_UART4_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_UART4_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_UART4_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_UART4_Init+0x90>)
 800097a:	2208      	movs	r2, #8
 800097c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_UART4_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_UART4_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_UART4_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_UART4_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_UART4_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_UART4_Init+0x90>)
 800099e:	f003 faab 	bl	8003ef8 <HAL_HalfDuplex_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009a8:	f7ff ff12 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_UART4_Init+0x90>)
 80009b0:	f004 fc47 	bl	8005242 <HAL_UARTEx_SetTxFifoThreshold>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80009ba:	f7ff ff09 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_UART4_Init+0x90>)
 80009c2:	f004 fc7c 	bl	80052be <HAL_UARTEx_SetRxFifoThreshold>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f7ff ff00 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_UART4_Init+0x90>)
 80009d2:	f004 fbfd 	bl	80051d0 <HAL_UARTEx_DisableFifoMode>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f7ff fef8 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2400002c 	.word	0x2400002c
 80009e8:	40004c00 	.word	0x40004c00

080009ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_USART3_UART_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a36:	f003 fa5f 	bl	8003ef8 <HAL_HalfDuplex_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f7ff fec6 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a48:	f004 fbfb 	bl	8005242 <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f7ff febd 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f004 fc30 	bl	80052be <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f7ff feb4 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a6a:	f004 fbb1 	bl	80051d0 <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f7ff feac 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240000c0 	.word	0x240000c0
 8000a80:	40004800 	.word	0x40004800

08000a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0bc      	sub	sp, #240	; 0xf0
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	22c0      	movs	r2, #192	; 0xc0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 fc97 	bl	80053d8 <memset>
  if(uartHandle->Instance==UART4)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a58      	ldr	r2, [pc, #352]	; (8000c10 <HAL_UART_MspInit+0x18c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d146      	bne.n	8000b42 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ab4:	f04f 0202 	mov.w	r2, #2
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fc34 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ad6:	f7ff fe7b 	bl	80007d0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ada:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000adc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000aea:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000aec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af8:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000afa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afe:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b08:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4837      	ldr	r0, [pc, #220]	; (8000c18 <HAL_UART_MspInit+0x194>)
 8000b3c:	f000 fa34 	bl	8000fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b40:	e061      	b.n	8000c06 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a35      	ldr	r2, [pc, #212]	; (8000c1c <HAL_UART_MspInit+0x198>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d15c      	bne.n	8000c06 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b4c:	f04f 0202 	mov.w	r2, #2
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fbe8 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000b6e:	f7ff fe2f 	bl	80007d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000b74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b78:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000b84:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_UART_MspInit+0x190>)
 8000ba2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4810      	ldr	r0, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x194>)
 8000bd6:	f000 f9e7 	bl	8000fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_UART_MspInit+0x194>)
 8000c02:	f000 f9d1 	bl	8000fa8 <HAL_GPIO_Init>
}
 8000c06:	bf00      	nop
 8000c08:	37f0      	adds	r7, #240	; 0xf0
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004c00 	.word	0x40004c00
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58020c00 	.word	0x58020c00
 8000c1c:	40004800 	.word	0x40004800

08000c20 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c24:	f7ff fe1e 	bl	8000864 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f004 fbcb 	bl	80053e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fd01 	bl	8000658 <main>
  bx  lr
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c60:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c64:	080054a4 	.word	0x080054a4
  ldr r2, =_sbss
 8000c68:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c6c:	24000158 	.word	0x24000158

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f962 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000c80:	f001 f984 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_Init+0x68>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	4913      	ldr	r1, [pc, #76]	; (8000ce0 <HAL_Init+0x6c>)
 8000c92:	5ccb      	ldrb	r3, [r1, r3]
 8000c94:	f003 031f 	and.w	r3, r3, #31
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_Init+0x68>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_Init+0x6c>)
 8000ca8:	5cd3      	ldrb	r3, [r2, r3]
 8000caa:	f003 031f 	and.w	r3, r3, #31
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <HAL_Init+0x70>)
 8000cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_Init+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f814 	bl	8000cec <HAL_InitTick>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e002      	b.n	8000cd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cce:	f7ff fd85 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	0800545c 	.word	0x0800545c
 8000ce4:	24000004 	.word	0x24000004
 8000ce8:	24000000 	.word	0x24000000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_InitTick+0x60>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e021      	b.n	8000d44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_InitTick+0x64>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_InitTick+0x60>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f939 	bl	8000f8e <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f911 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x68>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2400000c 	.word	0x2400000c
 8000d50:	24000000 	.word	0x24000000
 8000d54:	24000008 	.word	0x24000008

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2400000c 	.word	0x2400000c
 8000d7c:	24000154 	.word	0x24000154

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	24000154 	.word	0x24000154

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2400000c 	.word	0x2400000c

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	05fa0000 	.word	0x05fa0000

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff5e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff90 	bl	8000e98 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5f 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffb2 	bl	8000f00 <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fb6:	4b89      	ldr	r3, [pc, #548]	; (80011dc <HAL_GPIO_Init+0x234>)
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fba:	e194      	b.n	80012e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8186 	beq.w	80012e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x44>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d017      	beq.n	800108a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	69b9      	ldr	r1, [r7, #24]
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0203 	and.w	r2, r3, #3
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80e0 	beq.w	80012e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_GPIO_Init+0x238>)
 8001122:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001126:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <HAL_GPIO_Init+0x238>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <HAL_GPIO_Init+0x238>)
 8001132:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <HAL_GPIO_Init+0x23c>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <HAL_GPIO_Init+0x240>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d052      	beq.n	8001210 <HAL_GPIO_Init+0x268>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <HAL_GPIO_Init+0x244>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d031      	beq.n	80011d6 <HAL_GPIO_Init+0x22e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_GPIO_Init+0x248>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d02b      	beq.n	80011d2 <HAL_GPIO_Init+0x22a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_GPIO_Init+0x24c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_GPIO_Init+0x250>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <HAL_GPIO_Init+0x254>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <HAL_GPIO_Init+0x258>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_GPIO_Init+0x25c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x260>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_GPIO_Init+0x264>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x20e>
 80011b2:	2309      	movs	r3, #9
 80011b4:	e02d      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011b6:	230a      	movs	r3, #10
 80011b8:	e02b      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e029      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011be:	2307      	movs	r3, #7
 80011c0:	e027      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e025      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e023      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e021      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e01f      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e01d      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e01b      	b.n	8001212 <HAL_GPIO_Init+0x26a>
 80011da:	bf00      	nop
 80011dc:	58000080 	.word	0x58000080
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58000400 	.word	0x58000400
 80011e8:	58020000 	.word	0x58020000
 80011ec:	58020400 	.word	0x58020400
 80011f0:	58020800 	.word	0x58020800
 80011f4:	58020c00 	.word	0x58020c00
 80011f8:	58021000 	.word	0x58021000
 80011fc:	58021400 	.word	0x58021400
 8001200:	58021800 	.word	0x58021800
 8001204:	58021c00 	.word	0x58021c00
 8001208:	58022000 	.word	0x58022000
 800120c:	58022400 	.word	0x58022400
 8001210:	2300      	movs	r3, #0
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001222:	4938      	ldr	r1, [pc, #224]	; (8001304 <HAL_GPIO_Init+0x35c>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	3301      	adds	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f47f ae63 	bne.w	8000fbc <HAL_GPIO_Init+0x14>
  }
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	3724      	adds	r7, #36	; 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	58000400 	.word	0x58000400

08001308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	2b06      	cmp	r3, #6
 800131a:	d00a      	beq.n	8001332 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d001      	beq.n	800132e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e040      	b.n	80013b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e03e      	b.n	80013b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800133a:	491f      	ldr	r1, [pc, #124]	; (80013b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4313      	orrs	r3, r2
 8001340:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001342:	f7ff fd1d 	bl	8000d80 <HAL_GetTick>
 8001346:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001348:	e009      	b.n	800135e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800134a:	f7ff fd19 	bl	8000d80 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001358:	d901      	bls.n	800135e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e028      	b.n	80013b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800136a:	d1ee      	bne.n	800134a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b1e      	cmp	r3, #30
 8001370:	d008      	beq.n	8001384 <HAL_PWREx_ConfigSupply+0x7c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b2e      	cmp	r3, #46	; 0x2e
 8001376:	d005      	beq.n	8001384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b1d      	cmp	r3, #29
 800137c:	d002      	beq.n	8001384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b2d      	cmp	r3, #45	; 0x2d
 8001382:	d114      	bne.n	80013ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001384:	f7ff fcfc 	bl	8000d80 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800138a:	e009      	b.n	80013a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800138c:	f7ff fcf8 	bl	8000d80 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139a:	d901      	bls.n	80013a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e007      	b.n	80013b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d1ee      	bne.n	800138c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024800 	.word	0x58024800

080013bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f000 bc1f 	b.w	8001c0e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80b3 	beq.w	8001544 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013de:	4b95      	ldr	r3, [pc, #596]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d007      	beq.n	8001404 <HAL_RCC_OscConfig+0x48>
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	2b18      	cmp	r3, #24
 80013f8:	d112      	bne.n	8001420 <HAL_RCC_OscConfig+0x64>
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d10d      	bne.n	8001420 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8098 	beq.w	8001542 <HAL_RCC_OscConfig+0x186>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8093 	bne.w	8001542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e3f6      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x7c>
 800142a:	4b82      	ldr	r3, [pc, #520]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a81      	ldr	r2, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e058      	b.n	80014ea <HAL_RCC_OscConfig+0x12e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d112      	bne.n	8001466 <HAL_RCC_OscConfig+0xaa>
 8001440:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a7b      	ldr	r2, [pc, #492]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b79      	ldr	r3, [pc, #484]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a78      	ldr	r2, [pc, #480]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001452:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a75      	ldr	r2, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e041      	b.n	80014ea <HAL_RCC_OscConfig+0x12e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146e:	d112      	bne.n	8001496 <HAL_RCC_OscConfig+0xda>
 8001470:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6f      	ldr	r2, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a69      	ldr	r2, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e029      	b.n	80014ea <HAL_RCC_OscConfig+0x12e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800149e:	d112      	bne.n	80014c6 <HAL_RCC_OscConfig+0x10a>
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a63      	ldr	r2, [pc, #396]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a60      	ldr	r2, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e011      	b.n	80014ea <HAL_RCC_OscConfig+0x12e>
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a5a      	ldr	r2, [pc, #360]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a57      	ldr	r2, [pc, #348]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b55      	ldr	r3, [pc, #340]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a54      	ldr	r2, [pc, #336]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d013      	beq.n	800151a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fc45 	bl	8000d80 <HAL_GetTick>
 80014f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fa:	f7ff fc41 	bl	8000d80 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b64      	cmp	r3, #100	; 0x64
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e380      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800150c:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x13e>
 8001518:	e014      	b.n	8001544 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fc31 	bl	8000d80 <HAL_GetTick>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fc2d 	bl	8000d80 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e36c      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x166>
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 808c 	beq.w	800166a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800155a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_RCC_OscConfig+0x1bc>
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	2b18      	cmp	r3, #24
 800156c:	d137      	bne.n	80015de <HAL_RCC_OscConfig+0x222>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d132      	bne.n	80015de <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x1d4>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e33e      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 0219 	bic.w	r2, r3, #25
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4925      	ldr	r1, [pc, #148]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fbed 	bl	8000d80 <HAL_GetTick>
 80015a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fbe9 	bl	8000d80 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e328      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	4917      	ldr	r1, [pc, #92]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	e045      	b.n	800166a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d028      	beq.n	8001638 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 0219 	bic.w	r2, r3, #25
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	4910      	ldr	r1, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbc2 	bl	8000d80 <HAL_GetTick>
 80015fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fbbe 	bl	8000d80 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e2fd      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	061b      	lsls	r3, r3, #24
 800162c:	4901      	ldr	r1, [pc, #4]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
 8001632:	e01a      	b.n	800166a <HAL_RCC_OscConfig+0x2ae>
 8001634:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001638:	4b97      	ldr	r3, [pc, #604]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a96      	ldr	r2, [pc, #600]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fb9c 	bl	8000d80 <HAL_GetTick>
 8001648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fb98 	bl	8000d80 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e2d7      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800165e:	4b8e      	ldr	r3, [pc, #568]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d06a      	beq.n	800174c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001676:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800167e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001680:	4b85      	ldr	r3, [pc, #532]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b08      	cmp	r3, #8
 800168a:	d007      	beq.n	800169c <HAL_RCC_OscConfig+0x2e0>
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b18      	cmp	r3, #24
 8001690:	d11b      	bne.n	80016ca <HAL_RCC_OscConfig+0x30e>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d116      	bne.n	80016ca <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2f8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e2ac      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016b4:	4b78      	ldr	r3, [pc, #480]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	4975      	ldr	r1, [pc, #468]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016c8:	e040      	b.n	800174c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d023      	beq.n	800171a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016d2:	4b71      	ldr	r3, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a70      	ldr	r2, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fb4f 	bl	8000d80 <HAL_GetTick>
 80016e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb4b 	bl	8000d80 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e28a      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016f8:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	4961      	ldr	r1, [pc, #388]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
 8001718:	e018      	b.n	800174c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fb2b 	bl	8000d80 <HAL_GetTick>
 800172a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800172e:	f7ff fb27 	bl	8000d80 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e266      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d036      	beq.n	80017c6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d019      	beq.n	8001794 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001764:	4a4c      	ldr	r2, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fb08 	bl	8000d80 <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff fb04 	bl	8000d80 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e243      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001786:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x3b8>
 8001792:	e018      	b.n	80017c6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001794:	4b40      	ldr	r3, [pc, #256]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001798:	4a3f      	ldr	r2, [pc, #252]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff faee 	bl	8000d80 <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff faea 	bl	8000d80 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e229      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d036      	beq.n	8001840 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d019      	beq.n	800180e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017e6:	f7ff facb 	bl	8000d80 <HAL_GetTick>
 80017ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ee:	f7ff fac7 	bl	8000d80 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e206      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x432>
 800180c:	e018      	b.n	8001840 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001818:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800181a:	f7ff fab1 	bl	8000d80 <HAL_GetTick>
 800181e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001822:	f7ff faad 	bl	8000d80 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1ec      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80af 	beq.w	80019ac <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_RCC_OscConfig+0x4e0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_RCC_OscConfig+0x4e0>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800185a:	f7ff fa91 	bl	8000d80 <HAL_GetTick>
 800185e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fa8d 	bl	8000d80 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	; 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1cc      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_OscConfig+0x4e0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4e4>
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a02      	ldr	r2, [pc, #8]	; (8001898 <HAL_RCC_OscConfig+0x4dc>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	e05b      	b.n	800194e <HAL_RCC_OscConfig+0x592>
 8001896:	bf00      	nop
 8001898:	58024400 	.word	0x58024400
 800189c:	58024800 	.word	0x58024800
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d112      	bne.n	80018ce <HAL_RCC_OscConfig+0x512>
 80018a8:	4b9d      	ldr	r3, [pc, #628]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a9c      	ldr	r2, [pc, #624]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	4b9a      	ldr	r3, [pc, #616]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a99      	ldr	r2, [pc, #612]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	4b97      	ldr	r3, [pc, #604]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a96      	ldr	r2, [pc, #600]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	e03f      	b.n	800194e <HAL_RCC_OscConfig+0x592>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x540>
 80018d6:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a91      	ldr	r2, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a8e      	ldr	r2, [pc, #568]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	4a8b      	ldr	r2, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	; 0x70
 80018fa:	e028      	b.n	800194e <HAL_RCC_OscConfig+0x592>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b85      	cmp	r3, #133	; 0x85
 8001902:	d112      	bne.n	800192a <HAL_RCC_OscConfig+0x56e>
 8001904:	4b86      	ldr	r3, [pc, #536]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a85      	ldr	r2, [pc, #532]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a82      	ldr	r2, [pc, #520]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	; 0x70
 8001928:	e011      	b.n	800194e <HAL_RCC_OscConfig+0x592>
 800192a:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a7c      	ldr	r2, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a79      	ldr	r2, [pc, #484]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	4b77      	ldr	r3, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a76      	ldr	r2, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fa13 	bl	8000d80 <HAL_GetTick>
 800195a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff fa0f 	bl	8000d80 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e14c      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ee      	beq.n	800195e <HAL_RCC_OscConfig+0x5a2>
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff f9fd 	bl	8000d80 <HAL_GetTick>
 8001986:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f9f9 	bl	8000d80 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e136      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ee      	bne.n	800198a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 812b 	beq.w	8001c0c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019be:	2b18      	cmp	r3, #24
 80019c0:	f000 80bb 	beq.w	8001b3a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 8095 	bne.w	8001af8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80019d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff f9d1 	bl	8000d80 <HAL_GetTick>
 80019de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff f9cd 	bl	8000d80 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e10c      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_OscConfig+0x768>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	430a      	orrs	r2, r1
 8001a14:	4942      	ldr	r1, [pc, #264]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	628b      	str	r3, [r1, #40]	; 0x28
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a42:	3b01      	subs	r3, #1
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a4a:	4935      	ldr	r1, [pc, #212]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a5c:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCC_OscConfig+0x76c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a68:	00d2      	lsls	r2, r2, #3
 8001a6a:	492d      	ldr	r1, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	f023 020c 	bic.w	r2, r3, #12
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	4928      	ldr	r1, [pc, #160]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f023 0202 	bic.w	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4924      	ldr	r1, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f956 	bl	8000d80 <HAL_GetTick>
 8001ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f952 	bl	8000d80 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e091      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x71c>
 8001af6:	e089      	b.n	8001c0c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_RCC_OscConfig+0x764>)
 8001afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f93c 	bl	8000d80 <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f938 	bl	8000d80 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e077      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
 8001b1e:	bf00      	nop
 8001b20:	58024400 	.word	0x58024400
 8001b24:	fffffc0c 	.word	0xfffffc0c
 8001b28:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x750>
 8001b38:	e068      	b.n	8001c0c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d031      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d12a      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d122      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d11a      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	0a5b      	lsrs	r3, r3, #9
 8001b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d111      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d108      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	0e1b      	lsrs	r3, r3, #24
 8001ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e02b      	b.n	8001c0e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bc0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d01f      	beq.n	8001c0c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd8:	f7ff f8d2 	bl	8000d80 <HAL_GetTick>
 8001bdc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bde:	bf00      	nop
 8001be0:	f7ff f8ce 	bl	8000d80 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d0f9      	beq.n	8001be0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_OscConfig+0x860>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bf8:	00d2      	lsls	r2, r2, #3
 8001bfa:	4907      	ldr	r1, [pc, #28]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_RCC_OscConfig+0x85c>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3730      	adds	r7, #48	; 0x30
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	ffff0007 	.word	0xffff0007

08001c20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e19c      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b8a      	ldr	r3, [pc, #552]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d910      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b87      	ldr	r3, [pc, #540]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 020f 	bic.w	r2, r3, #15
 8001c4a:	4985      	ldr	r1, [pc, #532]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b83      	ldr	r3, [pc, #524]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e184      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d908      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c80:	4b78      	ldr	r3, [pc, #480]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	4975      	ldr	r1, [pc, #468]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d010      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	4b70      	ldr	r3, [pc, #448]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d908      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cae:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	496a      	ldr	r1, [pc, #424]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	4b64      	ldr	r3, [pc, #400]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d908      	bls.n	8001cee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	495e      	ldr	r1, [pc, #376]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d908      	bls.n	8001d1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d0a:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4953      	ldr	r1, [pc, #332]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d908      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f023 020f 	bic.w	r2, r3, #15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4947      	ldr	r1, [pc, #284]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d055      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4940      	ldr	r1, [pc, #256]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d70:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d121      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0f6      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d115      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0ea      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0de      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0d6      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f023 0207 	bic.w	r2, r3, #7
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4925      	ldr	r1, [pc, #148]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd2:	f7fe ffd5 	bl	8000d80 <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dda:	f7fe ffd1 	bl	8000d80 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0be      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d1eb      	bne.n	8001dda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d208      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f023 020f 	bic.w	r2, r3, #15
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	490e      	ldr	r1, [pc, #56]	; (8001e64 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d214      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 020f 	bic.w	r2, r3, #15
 8001e46:	4906      	ldr	r1, [pc, #24]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_ClockConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e086      	b.n	8001f6e <HAL_RCC_ClockConfig+0x34e>
 8001e60:	52002000 	.word	0x52002000
 8001e64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d208      	bcs.n	8001e96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e84:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4939      	ldr	r1, [pc, #228]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d010      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d208      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	492e      	ldr	r1, [pc, #184]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d208      	bcs.n	8001ef2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d010      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d208      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4917      	ldr	r1, [pc, #92]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f20:	f000 f834 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	4912      	ldr	r1, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x35c>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_RCC_ClockConfig+0x358>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_RCC_ClockConfig+0x35c>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x360>)
 8001f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_RCC_ClockConfig+0x364>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x368>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fec2 	bl	8000cec <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	0800545c 	.word	0x0800545c
 8001f80:	24000004 	.word	0x24000004
 8001f84:	24000000 	.word	0x24000000
 8001f88:	24000008 	.word	0x24000008

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f92:	4bb3      	ldr	r3, [pc, #716]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f9a:	2b18      	cmp	r3, #24
 8001f9c:	f200 8155 	bhi.w	800224a <HAL_RCC_GetSysClockFreq+0x2be>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	0800200d 	.word	0x0800200d
 8001fac:	0800224b 	.word	0x0800224b
 8001fb0:	0800224b 	.word	0x0800224b
 8001fb4:	0800224b 	.word	0x0800224b
 8001fb8:	0800224b 	.word	0x0800224b
 8001fbc:	0800224b 	.word	0x0800224b
 8001fc0:	0800224b 	.word	0x0800224b
 8001fc4:	0800224b 	.word	0x0800224b
 8001fc8:	08002033 	.word	0x08002033
 8001fcc:	0800224b 	.word	0x0800224b
 8001fd0:	0800224b 	.word	0x0800224b
 8001fd4:	0800224b 	.word	0x0800224b
 8001fd8:	0800224b 	.word	0x0800224b
 8001fdc:	0800224b 	.word	0x0800224b
 8001fe0:	0800224b 	.word	0x0800224b
 8001fe4:	0800224b 	.word	0x0800224b
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	0800224b 	.word	0x0800224b
 8001ff0:	0800224b 	.word	0x0800224b
 8001ff4:	0800224b 	.word	0x0800224b
 8001ff8:	0800224b 	.word	0x0800224b
 8001ffc:	0800224b 	.word	0x0800224b
 8002000:	0800224b 	.word	0x0800224b
 8002004:	0800224b 	.word	0x0800224b
 8002008:	0800203f 	.word	0x0800203f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800200c:	4b94      	ldr	r3, [pc, #592]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002018:	4b91      	ldr	r3, [pc, #580]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	4a90      	ldr	r2, [pc, #576]	; (8002264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
 8002028:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800202a:	e111      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800202c:	4b8d      	ldr	r3, [pc, #564]	; (8002264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800202e:	61bb      	str	r3, [r7, #24]
      break;
 8002030:	e10e      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002032:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002034:	61bb      	str	r3, [r7, #24]
      break;
 8002036:	e10b      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002038:	4b8c      	ldr	r3, [pc, #560]	; (800226c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800203a:	61bb      	str	r3, [r7, #24]
      break;
 800203c:	e108      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002048:	4b85      	ldr	r3, [pc, #532]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002052:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002054:	4b82      	ldr	r3, [pc, #520]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800205e:	4b80      	ldr	r3, [pc, #512]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002076:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80e1 	beq.w	8002244 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b02      	cmp	r3, #2
 8002086:	f000 8083 	beq.w	8002190 <HAL_RCC_GetSysClockFreq+0x204>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b02      	cmp	r3, #2
 800208e:	f200 80a1 	bhi.w	80021d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x114>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d056      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x1c0>
 800209e:	e099      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020a0:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d02d      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020ac:	4b6c      	ldr	r3, [pc, #432]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	4a6b      	ldr	r2, [pc, #428]	; (8002264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020d6:	4b62      	ldr	r3, [pc, #392]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002102:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002106:	e087      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002274 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800212a:	ed97 6a02 	vldr	s12, [r7, #8]
 800212e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800213a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800213e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800214a:	e065      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002278 <HAL_RCC_GetSysClockFreq+0x2ec>
 800215a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800215e:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800216e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002172:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800217a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800217e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800218e:	e043      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800227c <HAL_RCC_GetSysClockFreq+0x2f0>
 800219e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021d2:	e021      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002278 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800220a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002216:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	0a5b      	lsrs	r3, r3, #9
 800221e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002222:	3301      	adds	r3, #1
 8002224:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002230:	edd7 6a07 	vldr	s13, [r7, #28]
 8002234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223c:	ee17 3a90 	vmov	r3, s15
 8002240:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002242:	e005      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
      break;
 8002248:	e002      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800224c:	61bb      	str	r3, [r7, #24]
      break;
 800224e:	bf00      	nop
  }

  return sysclockfreq;
 8002250:	69bb      	ldr	r3, [r7, #24]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	58024400 	.word	0x58024400
 8002264:	03d09000 	.word	0x03d09000
 8002268:	003d0900 	.word	0x003d0900
 800226c:	007a1200 	.word	0x007a1200
 8002270:	46000000 	.word	0x46000000
 8002274:	4c742400 	.word	0x4c742400
 8002278:	4a742400 	.word	0x4a742400
 800227c:	4af42400 	.word	0x4af42400

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002286:	f7ff fe81 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490f      	ldr	r1, [pc, #60]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80022bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58024400 	.word	0x58024400
 80022d4:	0800545c 	.word	0x0800545c
 80022d8:	24000004 	.word	0x24000004
 80022dc:	24000000 	.word	0x24000000

080022e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80022e4:	f7ff ffcc 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4904      	ldr	r1, [pc, #16]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022f6:	5ccb      	ldrb	r3, [r1, r3]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	58024400 	.word	0x58024400
 8002308:	0800545c 	.word	0x0800545c

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002310:	f7ff ffb6 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4904      	ldr	r1, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	58024400 	.word	0x58024400
 8002334:	0800545c 	.word	0x0800545c

08002338 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800233c:	b0c8      	sub	sp, #288	; 0x120
 800233e:	af00      	add	r7, sp, #0
 8002340:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002344:	2300      	movs	r3, #0
 8002346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800234a:	2300      	movs	r3, #0
 800234c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800235c:	2500      	movs	r5, #0
 800235e:	ea54 0305 	orrs.w	r3, r4, r5
 8002362:	d049      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800236e:	d02f      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002374:	d828      	bhi.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800237a:	d01a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800237c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002380:	d822      	bhi.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d007      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800238c:	e01c      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800238e:	4ba7      	ldr	r3, [pc, #668]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	4aa6      	ldr	r2, [pc, #664]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800239a:	e01a      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800239c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023a0:	3308      	adds	r3, #8
 80023a2:	2102      	movs	r1, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fc43 	bl	8003c30 <RCCEx_PLL2_Config>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023b0:	e00f      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023b6:	3328      	adds	r3, #40	; 0x28
 80023b8:	2102      	movs	r1, #2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fcea 	bl	8003d94 <RCCEx_PLL3_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023c6:	e004      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80023ce:	e000      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80023d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023da:	4b94      	ldr	r3, [pc, #592]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80023e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e8:	4a90      	ldr	r2, [pc, #576]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023ea:	430b      	orrs	r3, r1
 80023ec:	6513      	str	r3, [r2, #80]	; 0x50
 80023ee:	e003      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80023f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002404:	f04f 0900 	mov.w	r9, #0
 8002408:	ea58 0309 	orrs.w	r3, r8, r9
 800240c:	d047      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800240e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	2b04      	cmp	r3, #4
 8002416:	d82a      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002435 	.word	0x08002435
 8002424:	08002443 	.word	0x08002443
 8002428:	08002459 	.word	0x08002459
 800242c:	08002477 	.word	0x08002477
 8002430:	08002477 	.word	0x08002477
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002434:	4b7d      	ldr	r3, [pc, #500]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	4a7c      	ldr	r2, [pc, #496]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002440:	e01a      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002446:	3308      	adds	r3, #8
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fbf0 	bl	8003c30 <RCCEx_PLL2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002456:	e00f      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800245c:	3328      	adds	r3, #40	; 0x28
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fc97 	bl	8003d94 <RCCEx_PLL3_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800246c:	e004      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002474:	e000      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002484:	f023 0107 	bic.w	r1, r3, #7
 8002488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	4a67      	ldr	r2, [pc, #412]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002490:	430b      	orrs	r3, r1
 8002492:	6513      	str	r3, [r2, #80]	; 0x50
 8002494:	e003      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002496:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800249a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800249e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80024aa:	f04f 0b00 	mov.w	fp, #0
 80024ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80024b2:	d054      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80024b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024be:	d036      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80024c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024c4:	d82f      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d032      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d0:	d829      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024d2:	2bc0      	cmp	r3, #192	; 0xc0
 80024d4:	d02f      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80024d6:	2bc0      	cmp	r3, #192	; 0xc0
 80024d8:	d825      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d018      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d821      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d007      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80024ea:	e01c      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ec:	4b4f      	ldr	r3, [pc, #316]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	4a4e      	ldr	r2, [pc, #312]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80024f8:	e01e      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024fe:	3308      	adds	r3, #8
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fb94 	bl	8003c30 <RCCEx_PLL2_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800250e:	e013      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002514:	3328      	adds	r3, #40	; 0x28
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f001 fc3b 	bl	8003d94 <RCCEx_PLL3_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002524:	e008      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800252c:	e004      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800252e:	bf00      	nop
 8002530:	e002      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002538:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	4a37      	ldr	r2, [pc, #220]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002550:	430b      	orrs	r3, r1
 8002552:	6513      	str	r3, [r2, #80]	; 0x50
 8002554:	e003      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002556:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800255a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800255e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800256a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002574:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002578:	460b      	mov	r3, r1
 800257a:	4313      	orrs	r3, r2
 800257c:	d05c      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800257e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002588:	d03b      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800258a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800258e:	d834      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002594:	d037      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259a:	d82e      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800259c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025a0:	d033      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80025a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025a6:	d828      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d01a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b2:	d822      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d007      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x296>
 80025be:	e01c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80025cc:	e01e      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025d2:	3308      	adds	r3, #8
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fb2a 	bl	8003c30 <RCCEx_PLL2_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80025e2:	e013      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025e8:	3328      	adds	r3, #40	; 0x28
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 fbd1 	bl	8003d94 <RCCEx_PLL3_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80025f8:	e008      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002600:	e004      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002602:	bf00      	nop
 8002604:	e002      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800260a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800260c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002618:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800261c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	4a02      	ldr	r2, [pc, #8]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002624:	430b      	orrs	r3, r1
 8002626:	6513      	str	r3, [r2, #80]	; 0x50
 8002628:	e006      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800262a:	bf00      	nop
 800262c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002634:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002640:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800264e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002652:	460b      	mov	r3, r1
 8002654:	4313      	orrs	r3, r2
 8002656:	d03a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	2b30      	cmp	r3, #48	; 0x30
 8002660:	d01f      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002662:	2b30      	cmp	r3, #48	; 0x30
 8002664:	d819      	bhi.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002666:	2b20      	cmp	r3, #32
 8002668:	d00c      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800266a:	2b20      	cmp	r3, #32
 800266c:	d815      	bhi.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002672:	2b10      	cmp	r3, #16
 8002674:	d111      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002676:	4bae      	ldr	r3, [pc, #696]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	4aad      	ldr	r2, [pc, #692]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002682:	e011      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002688:	3308      	adds	r3, #8
 800268a:	2102      	movs	r1, #2
 800268c:	4618      	mov	r0, r3
 800268e:	f001 facf 	bl	8003c30 <RCCEx_PLL2_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002698:	e006      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026a0:	e002      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80026b0:	4b9f      	ldr	r3, [pc, #636]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80026b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	4a9c      	ldr	r2, [pc, #624]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026c0:	430b      	orrs	r3, r1
 80026c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c4:	e003      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80026ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80026da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80026e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4313      	orrs	r3, r2
 80026ec:	d051      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80026ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f8:	d035      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fe:	d82e      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002704:	d031      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800270a:	d828      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800270c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002710:	d01a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002716:	d822      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d007      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002722:	e01c      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002724:	4b82      	ldr	r3, [pc, #520]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	4a81      	ldr	r2, [pc, #516]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800272a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002730:	e01c      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002736:	3308      	adds	r3, #8
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f001 fa78 	bl	8003c30 <RCCEx_PLL2_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002746:	e011      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800274c:	3328      	adds	r3, #40	; 0x28
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f001 fb1f 	bl	8003d94 <RCCEx_PLL3_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800275c:	e006      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002764:	e002      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800276a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800276c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002774:	4b6e      	ldr	r3, [pc, #440]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002778:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800277c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002782:	4a6b      	ldr	r2, [pc, #428]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002784:	430b      	orrs	r3, r1
 8002786:	6513      	str	r3, [r2, #80]	; 0x50
 8002788:	e003      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800278e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800279e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80027a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80027ac:	460b      	mov	r3, r1
 80027ae:	4313      	orrs	r3, r2
 80027b0:	d053      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80027b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d033      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80027be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c2:	d82c      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027c8:	d02f      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80027ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027ce:	d826      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d4:	d02b      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80027d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027da:	d820      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e0:	d012      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80027e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e6:	d81a      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d022      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d115      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f6:	3308      	adds	r3, #8
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fa18 	bl	8003c30 <RCCEx_PLL2_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002806:	e015      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800280c:	3328      	adds	r3, #40	; 0x28
 800280e:	2101      	movs	r1, #1
 8002810:	4618      	mov	r0, r3
 8002812:	f001 fabf 	bl	8003d94 <RCCEx_PLL3_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800281c:	e00a      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002824:	e006      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002826:	bf00      	nop
 8002828:	e004      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800283c:	4b3c      	ldr	r3, [pc, #240]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800284a:	4a39      	ldr	r2, [pc, #228]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800284c:	430b      	orrs	r3, r1
 800284e:	6513      	str	r3, [r2, #80]	; 0x50
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002852:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002856:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800285a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002866:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002870:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002874:	460b      	mov	r3, r1
 8002876:	4313      	orrs	r3, r2
 8002878:	d060      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800287a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800287e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002882:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002886:	d039      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002888:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800288c:	d832      	bhi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800288e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002892:	d035      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002898:	d82c      	bhi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d031      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d826      	bhi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028aa:	d02d      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80028ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028b0:	d820      	bhi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b6:	d012      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80028b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028bc:	d81a      	bhi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d024      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80028c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c6:	d115      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028cc:	3308      	adds	r3, #8
 80028ce:	2101      	movs	r1, #1
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 f9ad 	bl	8003c30 <RCCEx_PLL2_Config>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80028dc:	e017      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e2:	3328      	adds	r3, #40	; 0x28
 80028e4:	2101      	movs	r1, #1
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 fa54 	bl	8003d94 <RCCEx_PLL3_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80028f2:	e00c      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028fa:	e008      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80028fc:	bf00      	nop
 80028fe:	e006      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002900:	bf00      	nop
 8002902:	e004      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002904:	bf00      	nop
 8002906:	e002      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800290c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800290e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10e      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800291e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002926:	4a02      	ldr	r2, [pc, #8]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002928:	430b      	orrs	r3, r1
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	e006      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800292e:	bf00      	nop
 8002930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002938:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800293c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002956:	460b      	mov	r3, r1
 8002958:	4313      	orrs	r3, r2
 800295a:	d037      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800295c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002966:	d00e      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800296c:	d816      	bhi.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002976:	d111      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002978:	4bc4      	ldr	r3, [pc, #784]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4ac3      	ldr	r2, [pc, #780]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800297e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002984:	e00f      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800298a:	3308      	adds	r3, #8
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f001 f94e 	bl	8003c30 <RCCEx_PLL2_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800299a:	e004      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029a2:	e000      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80029a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029ae:	4bb7      	ldr	r3, [pc, #732]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80029b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029bc:	4ab3      	ldr	r2, [pc, #716]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029be:	430b      	orrs	r3, r1
 80029c0:	6513      	str	r3, [r2, #80]	; 0x50
 80029c2:	e003      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80029d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80029e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4313      	orrs	r3, r2
 80029ea:	d039      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80029ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d81c      	bhi.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80029f6:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a39 	.word	0x08002a39
 8002a00:	08002a0d 	.word	0x08002a0d
 8002a04:	08002a1b 	.word	0x08002a1b
 8002a08:	08002a39 	.word	0x08002a39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a0c:	4b9f      	ldr	r3, [pc, #636]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	4a9e      	ldr	r2, [pc, #632]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a18:	e00f      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1e:	3308      	adds	r3, #8
 8002a20:	2102      	movs	r1, #2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f904 	bl	8003c30 <RCCEx_PLL2_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a2e:	e004      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a36:	e000      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a42:	4b92      	ldr	r3, [pc, #584]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f023 0103 	bic.w	r1, r3, #3
 8002a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a50:	4a8e      	ldr	r2, [pc, #568]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a52:	430b      	orrs	r3, r1
 8002a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a56:	e003      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f000 8099 	beq.w	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a82:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a82      	ldr	r2, [pc, #520]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a8e:	f7fe f977 	bl	8000d80 <HAL_GetTick>
 8002a92:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fe f972 	bl	8000d80 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	; 0x64
 8002aa6:	d903      	bls.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002aae:	e005      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab0:	4b77      	ldr	r3, [pc, #476]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ed      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002abc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d173      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ac4:	4b71      	ldr	r3, [pc, #452]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ad0:	4053      	eors	r3, r2
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002afe:	4a63      	ldr	r2, [pc, #396]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b12:	d118      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe f934 	bl	8000d80 <HAL_GetTick>
 8002b18:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1c:	e00d      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe f92f 	bl	8000d80 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b28:	1ad2      	subs	r2, r2, r3
 8002b2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d903      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002b38:	e005      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0eb      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002b46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d129      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b5e:	d10e      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002b60:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b70:	091a      	lsrs	r2, r3, #4
 8002b72:	4b48      	ldr	r3, [pc, #288]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	4a45      	ldr	r2, [pc, #276]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6113      	str	r3, [r2, #16]
 8002b7c:	e005      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002b7e:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b88:	6113      	str	r3, [r2, #16]
 8002b8a:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9a:	4a3c      	ldr	r2, [pc, #240]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002baa:	e003      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f002 0301 	and.w	r3, r2, #1
 8002bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f000 8090 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bde:	2b28      	cmp	r3, #40	; 0x28
 8002be0:	d870      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002ccd 	.word	0x08002ccd
 8002bec:	08002cc5 	.word	0x08002cc5
 8002bf0:	08002cc5 	.word	0x08002cc5
 8002bf4:	08002cc5 	.word	0x08002cc5
 8002bf8:	08002cc5 	.word	0x08002cc5
 8002bfc:	08002cc5 	.word	0x08002cc5
 8002c00:	08002cc5 	.word	0x08002cc5
 8002c04:	08002cc5 	.word	0x08002cc5
 8002c08:	08002c99 	.word	0x08002c99
 8002c0c:	08002cc5 	.word	0x08002cc5
 8002c10:	08002cc5 	.word	0x08002cc5
 8002c14:	08002cc5 	.word	0x08002cc5
 8002c18:	08002cc5 	.word	0x08002cc5
 8002c1c:	08002cc5 	.word	0x08002cc5
 8002c20:	08002cc5 	.word	0x08002cc5
 8002c24:	08002cc5 	.word	0x08002cc5
 8002c28:	08002caf 	.word	0x08002caf
 8002c2c:	08002cc5 	.word	0x08002cc5
 8002c30:	08002cc5 	.word	0x08002cc5
 8002c34:	08002cc5 	.word	0x08002cc5
 8002c38:	08002cc5 	.word	0x08002cc5
 8002c3c:	08002cc5 	.word	0x08002cc5
 8002c40:	08002cc5 	.word	0x08002cc5
 8002c44:	08002cc5 	.word	0x08002cc5
 8002c48:	08002ccd 	.word	0x08002ccd
 8002c4c:	08002cc5 	.word	0x08002cc5
 8002c50:	08002cc5 	.word	0x08002cc5
 8002c54:	08002cc5 	.word	0x08002cc5
 8002c58:	08002cc5 	.word	0x08002cc5
 8002c5c:	08002cc5 	.word	0x08002cc5
 8002c60:	08002cc5 	.word	0x08002cc5
 8002c64:	08002cc5 	.word	0x08002cc5
 8002c68:	08002ccd 	.word	0x08002ccd
 8002c6c:	08002cc5 	.word	0x08002cc5
 8002c70:	08002cc5 	.word	0x08002cc5
 8002c74:	08002cc5 	.word	0x08002cc5
 8002c78:	08002cc5 	.word	0x08002cc5
 8002c7c:	08002cc5 	.word	0x08002cc5
 8002c80:	08002cc5 	.word	0x08002cc5
 8002c84:	08002cc5 	.word	0x08002cc5
 8002c88:	08002ccd 	.word	0x08002ccd
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	58024800 	.word	0x58024800
 8002c94:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 ffc5 	bl	8003c30 <RCCEx_PLL2_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002cac:	e00f      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb2:	3328      	adds	r3, #40	; 0x28
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 f86c 	bl	8003d94 <RCCEx_PLL3_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002cc2:	e004      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cca:	e000      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cd6:	4bc0      	ldr	r3, [pc, #768]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce6:	4abc      	ldr	r2, [pc, #752]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6553      	str	r3, [r2, #84]	; 0x54
 8002cec:	e003      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f002 0302 	and.w	r3, r2, #2
 8002d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d0c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d10:	460b      	mov	r3, r1
 8002d12:	4313      	orrs	r3, r2
 8002d14:	d043      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d824      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d75 	.word	0x08002d75
 8002d2c:	08002d41 	.word	0x08002d41
 8002d30:	08002d57 	.word	0x08002d57
 8002d34:	08002d75 	.word	0x08002d75
 8002d38:	08002d75 	.word	0x08002d75
 8002d3c:	08002d75 	.word	0x08002d75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d44:	3308      	adds	r3, #8
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 ff71 	bl	8003c30 <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d54:	e00f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5a:	3328      	adds	r3, #40	; 0x28
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f818 	bl	8003d94 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d7e:	4b96      	ldr	r3, [pc, #600]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f023 0107 	bic.w	r1, r3, #7
 8002d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8e:	4a92      	ldr	r2, [pc, #584]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6553      	str	r3, [r2, #84]	; 0x54
 8002d94:	e003      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f002 0304 	and.w	r3, r2, #4
 8002daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	d043      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d824      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e1d 	.word	0x08002e1d
 8002dd4:	08002de9 	.word	0x08002de9
 8002dd8:	08002dff 	.word	0x08002dff
 8002ddc:	08002e1d 	.word	0x08002e1d
 8002de0:	08002e1d 	.word	0x08002e1d
 8002de4:	08002e1d 	.word	0x08002e1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dec:	3308      	adds	r3, #8
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 ff1d 	bl	8003c30 <RCCEx_PLL2_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002dfc:	e00f      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e02:	3328      	adds	r3, #40	; 0x28
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 ffc4 	bl	8003d94 <RCCEx_PLL3_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e12:	e004      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f023 0107 	bic.w	r1, r3, #7
 8002e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e36:	4a68      	ldr	r2, [pc, #416]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	e003      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f002 0320 	and.w	r3, r2, #32
 8002e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e60:	460b      	mov	r3, r1
 8002e62:	4313      	orrs	r3, r2
 8002e64:	d055      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e72:	d033      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e78:	d82c      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7e:	d02f      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d826      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e8a:	d02b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002e8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e90:	d820      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e96:	d012      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9c:	d81a      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d022      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ea6:	d115      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eac:	3308      	adds	r3, #8
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 febd 	bl	8003c30 <RCCEx_PLL2_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002ebc:	e015      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec2:	3328      	adds	r3, #40	; 0x28
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 ff64 	bl	8003d94 <RCCEx_PLL3_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002ed2:	e00a      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002eda:	e006      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002edc:	bf00      	nop
 8002ede:	e004      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ee0:	bf00      	nop
 8002ee2:	e002      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f02:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6553      	str	r3, [r2, #84]	; 0x54
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	d058      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f3e:	d033      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002f40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f44:	d82c      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4a:	d02f      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d826      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f56:	d02b      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f5c:	d820      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f62:	d012      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	d81a      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d022      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d115      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f78:	3308      	adds	r3, #8
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fe57 	bl	8003c30 <RCCEx_PLL2_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f88:	e015      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f8e:	3328      	adds	r3, #40	; 0x28
 8002f90:	2102      	movs	r1, #2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fefe 	bl	8003d94 <RCCEx_PLL3_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fa6:	e006      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fa8:	bf00      	nop
 8002faa:	e004      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fac:	bf00      	nop
 8002fae:	e002      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10e      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fce:	4a02      	ldr	r2, [pc, #8]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd4:	e006      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8002fd6:	bf00      	nop
 8002fd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fe0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ffa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002ffe:	460b      	mov	r3, r1
 8003000:	4313      	orrs	r3, r2
 8003002:	d055      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003008:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800300c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003010:	d033      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003012:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003016:	d82c      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301c:	d02f      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003022:	d826      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003024:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003028:	d02b      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800302a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800302e:	d820      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003034:	d012      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303a:	d81a      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d022      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003044:	d115      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304a:	3308      	adds	r3, #8
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fdee 	bl	8003c30 <RCCEx_PLL2_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800305a:	e015      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800305c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003060:	3328      	adds	r3, #40	; 0x28
 8003062:	2102      	movs	r1, #2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fe95 	bl	8003d94 <RCCEx_PLL3_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003070:	e00a      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800307a:	bf00      	nop
 800307c:	e004      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800307e:	bf00      	nop
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003090:	4ba1      	ldr	r3, [pc, #644]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030a0:	4a9d      	ldr	r2, [pc, #628]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6593      	str	r3, [r2, #88]	; 0x58
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80030b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f002 0308 	and.w	r3, r2, #8
 80030bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80030ca:	460b      	mov	r3, r1
 80030cc:	4313      	orrs	r3, r2
 80030ce:	d01e      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80030d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80030de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e2:	3328      	adds	r3, #40	; 0x28
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fe54 	bl	8003d94 <RCCEx_PLL3_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030f8:	4b87      	ldr	r3, [pc, #540]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003108:	4a83      	ldr	r2, [pc, #524]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800310a:	430b      	orrs	r3, r1
 800310c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800310e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f002 0310 	and.w	r3, r2, #16
 800311a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003124:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003128:	460b      	mov	r3, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	d01e      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800312e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313a:	d10c      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800313c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003140:	3328      	adds	r3, #40	; 0x28
 8003142:	2102      	movs	r1, #2
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fe25 	bl	8003d94 <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003156:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800315e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003166:	4a6c      	ldr	r2, [pc, #432]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003168:	430b      	orrs	r3, r1
 800316a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003182:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003186:	460b      	mov	r3, r1
 8003188:	4313      	orrs	r3, r2
 800318a:	d03e      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800318c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003190:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003198:	d022      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800319a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800319e:	d81b      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80031aa:	e015      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b0:	3308      	adds	r3, #8
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fd3b 	bl	8003c30 <RCCEx_PLL2_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80031c0:	e00f      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c6:	3328      	adds	r3, #40	; 0x28
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fde2 	bl	8003d94 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80031d6:	e004      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031de:	e000      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80031e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ea:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80031f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031fa:	4a47      	ldr	r2, [pc, #284]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	e003      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003202:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003206:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800320a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003216:	67bb      	str	r3, [r7, #120]	; 0x78
 8003218:	2300      	movs	r3, #0
 800321a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800321c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003220:	460b      	mov	r3, r1
 8003222:	4313      	orrs	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003232:	d01f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003238:	d818      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800323a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323e:	d003      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003244:	d007      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003246:	e011      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003248:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4a32      	ldr	r2, [pc, #200]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800324e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003254:	e00f      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325a:	3328      	adds	r3, #40	; 0x28
 800325c:	2101      	movs	r1, #1
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fd98 	bl	8003d94 <RCCEx_PLL3_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800326a:	e004      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003276:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10b      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	4a22      	ldr	r2, [pc, #136]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003290:	430b      	orrs	r3, r1
 8003292:	6553      	str	r3, [r2, #84]	; 0x54
 8003294:	e003      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003296:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800329a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800329e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80032aa:	673b      	str	r3, [r7, #112]	; 0x70
 80032ac:	2300      	movs	r3, #0
 80032ae:	677b      	str	r3, [r7, #116]	; 0x74
 80032b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80032b4:	460b      	mov	r3, r1
 80032b6:	4313      	orrs	r3, r2
 80032b8:	d034      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80032ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d007      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80032ca:	e011      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	4a11      	ldr	r2, [pc, #68]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80032d8:	e00e      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032de:	3308      	adds	r3, #8
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fca4 	bl	8003c30 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	4a02      	ldr	r2, [pc, #8]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003310:	430b      	orrs	r3, r1
 8003312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003316:	bf00      	nop
 8003318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003320:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003330:	66bb      	str	r3, [r7, #104]	; 0x68
 8003332:	2300      	movs	r3, #0
 8003334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003336:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800333a:	460b      	mov	r3, r1
 800333c:	4313      	orrs	r3, r2
 800333e:	d00c      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003344:	3328      	adds	r3, #40	; 0x28
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd23 	bl	8003d94 <RCCEx_PLL3_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003366:	663b      	str	r3, [r7, #96]	; 0x60
 8003368:	2300      	movs	r3, #0
 800336a:	667b      	str	r3, [r7, #100]	; 0x64
 800336c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003370:	460b      	mov	r3, r1
 8003372:	4313      	orrs	r3, r2
 8003374:	d038      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003382:	d018      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003388:	d811      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338e:	d014      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003394:	d80b      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d011      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800339a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339e:	d106      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a0:	4bc3      	ldr	r3, [pc, #780]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4ac2      	ldr	r2, [pc, #776]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80033ac:	e008      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033b4:	e004      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033b6:	bf00      	nop
 80033b8:	e002      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4bb9      	ldr	r3, [pc, #740]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	4ab5      	ldr	r2, [pc, #724]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	6553      	str	r3, [r2, #84]	; 0x54
 80033de:	e003      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80033f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80033f6:	2300      	movs	r3, #0
 80033f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80033fe:	460b      	mov	r3, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003404:	4baa      	ldr	r3, [pc, #680]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003408:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800340c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003412:	4aa7      	ldr	r2, [pc, #668]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003414:	430b      	orrs	r3, r1
 8003416:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003424:	653b      	str	r3, [r7, #80]	; 0x50
 8003426:	2300      	movs	r3, #0
 8003428:	657b      	str	r3, [r7, #84]	; 0x54
 800342a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800342e:	460b      	mov	r3, r1
 8003430:	4313      	orrs	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003434:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a9b      	ldr	r2, [pc, #620]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003444:	430b      	orrs	r3, r1
 8003446:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
 8003456:	2300      	movs	r3, #0
 8003458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800345a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003464:	4b92      	ldr	r3, [pc, #584]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800346c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	4a8f      	ldr	r2, [pc, #572]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003474:	430b      	orrs	r3, r1
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003484:	643b      	str	r3, [r7, #64]	; 0x40
 8003486:	2300      	movs	r3, #0
 8003488:	647b      	str	r3, [r7, #68]	; 0x44
 800348a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800348e:	460b      	mov	r3, r1
 8003490:	4313      	orrs	r3, r2
 8003492:	d00e      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003494:	4b86      	ldr	r3, [pc, #536]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4a85      	ldr	r2, [pc, #532]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800349a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800349e:	6113      	str	r3, [r2, #16]
 80034a0:	4b83      	ldr	r3, [pc, #524]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034a2:	6919      	ldr	r1, [r3, #16]
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034ac:	4a80      	ldr	r2, [pc, #512]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80034be:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c0:	2300      	movs	r3, #0
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80034c8:	460b      	mov	r3, r1
 80034ca:	4313      	orrs	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034ce:	4b78      	ldr	r3, [pc, #480]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80034d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	4a74      	ldr	r2, [pc, #464]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034de:	430b      	orrs	r3, r1
 80034e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
 80034f0:	2300      	movs	r3, #0
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
 80034f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80034f8:	460b      	mov	r3, r1
 80034fa:	4313      	orrs	r3, r2
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034fe:	4b6c      	ldr	r3, [pc, #432]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350e:	4a68      	ldr	r2, [pc, #416]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	2100      	movs	r1, #0
 800351e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003526:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d011      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003534:	3308      	adds	r3, #8
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fb79 	bl	8003c30 <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003550:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	2100      	movs	r1, #0
 800355e:	6239      	str	r1, [r7, #32]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d011      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003574:	3308      	adds	r3, #8
 8003576:	2101      	movs	r1, #1
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fb59 	bl	8003c30 <RCCEx_PLL2_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003584:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003590:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	2100      	movs	r1, #0
 800359e:	61b9      	str	r1, [r7, #24]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035aa:	460b      	mov	r3, r1
 80035ac:	4313      	orrs	r3, r2
 80035ae:	d011      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b4:	3308      	adds	r3, #8
 80035b6:	2102      	movs	r1, #2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fb39 	bl	8003c30 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80035d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	2100      	movs	r1, #0
 80035de:	6139      	str	r1, [r7, #16]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	d011      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f4:	3328      	adds	r3, #40	; 0x28
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fbcb 	bl	8003d94 <RCCEx_PLL3_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003610:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	2100      	movs	r1, #0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800362a:	460b      	mov	r3, r1
 800362c:	4313      	orrs	r3, r2
 800362e:	d011      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003634:	3328      	adds	r3, #40	; 0x28
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fbab 	bl	8003d94 <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003650:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	2100      	movs	r1, #0
 800365e:	6039      	str	r1, [r7, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	e9d7 1200 	ldrd	r1, r2, [r7]
 800366a:	460b      	mov	r3, r1
 800366c:	4313      	orrs	r3, r2
 800366e:	d011      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	3328      	adds	r3, #40	; 0x28
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fb8b 	bl	8003d94 <RCCEx_PLL3_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003690:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003694:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80036a8:	46bd      	mov	sp, r7
 80036aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ae:	bf00      	nop
 80036b0:	58024400 	.word	0x58024400

080036b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80036b8:	f7fe fde2 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4904      	ldr	r1, [pc, #16]	; (80036dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	58024400 	.word	0x58024400
 80036dc:	0800545c 	.word	0x0800545c

080036e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036e8:	4ba1      	ldr	r3, [pc, #644]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80036f2:	4b9f      	ldr	r3, [pc, #636]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	0b1b      	lsrs	r3, r3, #12
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80036fe:	4b9c      	ldr	r3, [pc, #624]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800370a:	4b99      	ldr	r3, [pc, #612]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8111 	beq.w	8003950 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b02      	cmp	r3, #2
 8003732:	f000 8083 	beq.w	800383c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f200 80a1 	bhi.w	8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d056      	beq.n	80037f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800374a:	e099      	b.n	8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800374c:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d02d      	beq.n	80037b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003758:	4b85      	ldr	r3, [pc, #532]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	4a84      	ldr	r2, [pc, #528]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	ee07 3a90 	vmov	s15, r3
 8003770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003782:	4b7b      	ldr	r3, [pc, #492]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003792:	ed97 6a03 	vldr	s12, [r7, #12]
 8003796:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800379a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800379e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80037b2:	e087      	b.n	80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800397c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80037c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c6:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037f6:	e065      	b.n	80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003802:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380a:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381a:	ed97 6a03 	vldr	s12, [r7, #12]
 800381e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800382e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800383a:	e043      	b.n	80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800384a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800384e:	4b48      	ldr	r3, [pc, #288]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003862:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800387e:	e021      	b.n	80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800388e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80038c4:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	0a5b      	lsrs	r3, r3, #9
 80038ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038de:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ea:	ee17 2a90 	vmov	r2, s15
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800390c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003918:	ee17 2a90 	vmov	r2, s15
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	0e1b      	lsrs	r3, r3, #24
 8003926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800393a:	edd7 6a07 	vldr	s13, [r7, #28]
 800393e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003946:	ee17 2a90 	vmov	r2, s15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800394e:	e008      	b.n	8003962 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	58024400 	.word	0x58024400
 8003974:	03d09000 	.word	0x03d09000
 8003978:	46000000 	.word	0x46000000
 800397c:	4c742400 	.word	0x4c742400
 8003980:	4a742400 	.word	0x4a742400
 8003984:	4af42400 	.word	0x4af42400

08003988 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003990:	4ba1      	ldr	r3, [pc, #644]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800399a:	4b9f      	ldr	r3, [pc, #636]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	0d1b      	lsrs	r3, r3, #20
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039a6:	4b9c      	ldr	r3, [pc, #624]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80039b2:	4b99      	ldr	r3, [pc, #612]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	08db      	lsrs	r3, r3, #3
 80039b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8111 	beq.w	8003bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	f000 8083 	beq.w	8003ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	f200 80a1 	bhi.w	8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d056      	beq.n	8003aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80039f2:	e099      	b.n	8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d02d      	beq.n	8003a5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a00:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	08db      	lsrs	r3, r3, #3
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	4a84      	ldr	r2, [pc, #528]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	ee07 3a90 	vmov	s15, r3
 8003a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2a:	4b7b      	ldr	r3, [pc, #492]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a5a:	e087      	b.n	8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a9e:	e065      	b.n	8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ae2:	e043      	b.n	8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b48      	ldr	r3, [pc, #288]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	e021      	b.n	8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	0a5b      	lsrs	r3, r3, #9
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 2a90 	vmov	r2, s15
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc0:	ee17 2a90 	vmov	r2, s15
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 2a90 	vmov	r2, s15
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003bf6:	e008      	b.n	8003c0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
}
 8003c0a:	bf00      	nop
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	03d09000 	.word	0x03d09000
 8003c20:	46000000 	.word	0x46000000
 8003c24:	4c742400 	.word	0x4c742400
 8003c28:	4a742400 	.word	0x4a742400
 8003c2c:	4af42400 	.word	0x4af42400

08003c30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c3e:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d101      	bne.n	8003c4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e099      	b.n	8003d82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c4e:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a4e      	ldr	r2, [pc, #312]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003c54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5a:	f7fd f891 	bl	8000d80 <HAL_GetTick>
 8003c5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c62:	f7fd f88d 	bl	8000d80 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e086      	b.n	8003d82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c74:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c80:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	031b      	lsls	r3, r3, #12
 8003c8e:	493f      	ldr	r1, [pc, #252]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	628b      	str	r3, [r1, #40]	; 0x28
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	025b      	lsls	r3, r3, #9
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	061b      	lsls	r3, r3, #24
 8003cc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cc4:	4931      	ldr	r1, [pc, #196]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003cca:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	492d      	ldr	r1, [pc, #180]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003cdc:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f023 0220 	bic.w	r2, r3, #32
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4928      	ldr	r1, [pc, #160]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	f023 0310 	bic.w	r3, r3, #16
 8003cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <RCCEx_PLL2_Config+0x160>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	69d2      	ldr	r2, [r2, #28]
 8003d06:	00d2      	lsls	r2, r2, #3
 8003d08:	4920      	ldr	r1, [pc, #128]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d14:	f043 0310 	orr.w	r3, r3, #16
 8003d18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d2c:	e00f      	b.n	8003d4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d106      	bne.n	8003d42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d34:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d40:	e005      	b.n	8003d4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5a:	f7fd f811 	bl	8000d80 <HAL_GetTick>
 8003d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d60:	e008      	b.n	8003d74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d62:	f7fd f80d 	bl	8000d80 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e006      	b.n	8003d82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <RCCEx_PLL2_Config+0x15c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	58024400 	.word	0x58024400
 8003d90:	ffff0007 	.word	0xffff0007

08003d94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003da2:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d101      	bne.n	8003db2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e099      	b.n	8003ee6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003db2:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4e      	ldr	r2, [pc, #312]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fc ffdf 	bl	8000d80 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dc6:	f7fc ffdb 	bl	8000d80 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e086      	b.n	8003ee6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	051b      	lsls	r3, r3, #20
 8003df2:	493f      	ldr	r1, [pc, #252]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	628b      	str	r3, [r1, #40]	; 0x28
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	025b      	lsls	r3, r3, #9
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e28:	4931      	ldr	r1, [pc, #196]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e2e:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	492d      	ldr	r1, [pc, #180]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e40:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4928      	ldr	r1, [pc, #160]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e52:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <RCCEx_PLL3_Config+0x160>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	69d2      	ldr	r2, [r2, #28]
 8003e6a:	00d2      	lsls	r2, r2, #3
 8003e6c:	4920      	ldr	r1, [pc, #128]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e72:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e84:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e90:	e00f      	b.n	8003eb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003e9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ea4:	e005      	b.n	8003eb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003eac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fc ff5f 	bl	8000d80 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ec4:	e008      	b.n	8003ed8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ec6:	f7fc ff5b 	bl	8000d80 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e006      	b.n	8003ee6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	ffff0007 	.word	0xffff0007

08003ef8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e04a      	b.n	8003fa0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fc fdb1 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2224      	movs	r2, #36	; 0x24
 8003f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8c2 	bl	80040c4 <UART_SetConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e02a      	b.n	8003fa0 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 ff22 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003f76:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0208 	orr.w	r2, r2, #8
 8003f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 ffa1 	bl	8004ee0 <UART_CheckIdleState>
 8003f9e:	4603      	mov	r3, r0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d17b      	bne.n	80040ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_Transmit+0x26>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e074      	b.n	80040bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2221      	movs	r2, #33	; 0x21
 8003fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe2:	f7fc fecd 	bl	8000d80 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d108      	bne.n	8004014 <HAL_UART_Transmit+0x6c>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e003      	b.n	800401c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800401c:	e030      	b.n	8004080 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f001 f803 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e03d      	b.n	80040bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3302      	adds	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e007      	b.n	800406e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1c8      	bne.n	800401e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2200      	movs	r2, #0
 8004094:	2140      	movs	r1, #64	; 0x40
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 ffcc 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e006      	b.n	80040bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e000      	b.n	80040bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c8:	b092      	sub	sp, #72	; 0x48
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	431a      	orrs	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4bbe      	ldr	r3, [pc, #760]	; (80043ec <UART_SetConfig+0x328>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4ab3      	ldr	r2, [pc, #716]	; (80043f0 <UART_SetConfig+0x32c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800412c:	4313      	orrs	r3, r2
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	4baf      	ldr	r3, [pc, #700]	; (80043f4 <UART_SetConfig+0x330>)
 8004138:	4013      	ands	r3, r2
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004140:	430b      	orrs	r3, r1
 8004142:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	f023 010f 	bic.w	r1, r3, #15
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4aa6      	ldr	r2, [pc, #664]	; (80043f8 <UART_SetConfig+0x334>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d177      	bne.n	8004254 <UART_SetConfig+0x190>
 8004164:	4ba5      	ldr	r3, [pc, #660]	; (80043fc <UART_SetConfig+0x338>)
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800416c:	2b28      	cmp	r3, #40	; 0x28
 800416e:	d86d      	bhi.n	800424c <UART_SetConfig+0x188>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0xb4>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	0800421d 	.word	0x0800421d
 800417c:	0800424d 	.word	0x0800424d
 8004180:	0800424d 	.word	0x0800424d
 8004184:	0800424d 	.word	0x0800424d
 8004188:	0800424d 	.word	0x0800424d
 800418c:	0800424d 	.word	0x0800424d
 8004190:	0800424d 	.word	0x0800424d
 8004194:	0800424d 	.word	0x0800424d
 8004198:	08004225 	.word	0x08004225
 800419c:	0800424d 	.word	0x0800424d
 80041a0:	0800424d 	.word	0x0800424d
 80041a4:	0800424d 	.word	0x0800424d
 80041a8:	0800424d 	.word	0x0800424d
 80041ac:	0800424d 	.word	0x0800424d
 80041b0:	0800424d 	.word	0x0800424d
 80041b4:	0800424d 	.word	0x0800424d
 80041b8:	0800422d 	.word	0x0800422d
 80041bc:	0800424d 	.word	0x0800424d
 80041c0:	0800424d 	.word	0x0800424d
 80041c4:	0800424d 	.word	0x0800424d
 80041c8:	0800424d 	.word	0x0800424d
 80041cc:	0800424d 	.word	0x0800424d
 80041d0:	0800424d 	.word	0x0800424d
 80041d4:	0800424d 	.word	0x0800424d
 80041d8:	08004235 	.word	0x08004235
 80041dc:	0800424d 	.word	0x0800424d
 80041e0:	0800424d 	.word	0x0800424d
 80041e4:	0800424d 	.word	0x0800424d
 80041e8:	0800424d 	.word	0x0800424d
 80041ec:	0800424d 	.word	0x0800424d
 80041f0:	0800424d 	.word	0x0800424d
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	0800423d 	.word	0x0800423d
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	0800424d 	.word	0x0800424d
 8004204:	0800424d 	.word	0x0800424d
 8004208:	0800424d 	.word	0x0800424d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
 8004218:	08004245 	.word	0x08004245
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004222:	e326      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004224:	2304      	movs	r3, #4
 8004226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422a:	e322      	b.n	8004872 <UART_SetConfig+0x7ae>
 800422c:	2308      	movs	r3, #8
 800422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004232:	e31e      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004234:	2310      	movs	r3, #16
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e31a      	b.n	8004872 <UART_SetConfig+0x7ae>
 800423c:	2320      	movs	r3, #32
 800423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004242:	e316      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004244:	2340      	movs	r3, #64	; 0x40
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e312      	b.n	8004872 <UART_SetConfig+0x7ae>
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e30e      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a69      	ldr	r2, [pc, #420]	; (8004400 <UART_SetConfig+0x33c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d130      	bne.n	80042c0 <UART_SetConfig+0x1fc>
 800425e:	4b67      	ldr	r3, [pc, #412]	; (80043fc <UART_SetConfig+0x338>)
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	2b05      	cmp	r3, #5
 8004268:	d826      	bhi.n	80042b8 <UART_SetConfig+0x1f4>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x1ac>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004289 	.word	0x08004289
 8004274:	08004291 	.word	0x08004291
 8004278:	08004299 	.word	0x08004299
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042b1 	.word	0x080042b1
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428e:	e2f0      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004296:	e2ec      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429e:	e2e8      	b.n	8004872 <UART_SetConfig+0x7ae>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e2e4      	b.n	8004872 <UART_SetConfig+0x7ae>
 80042a8:	2320      	movs	r3, #32
 80042aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ae:	e2e0      	b.n	8004872 <UART_SetConfig+0x7ae>
 80042b0:	2340      	movs	r3, #64	; 0x40
 80042b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b6:	e2dc      	b.n	8004872 <UART_SetConfig+0x7ae>
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042be:	e2d8      	b.n	8004872 <UART_SetConfig+0x7ae>
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a4f      	ldr	r2, [pc, #316]	; (8004404 <UART_SetConfig+0x340>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d130      	bne.n	800432c <UART_SetConfig+0x268>
 80042ca:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <UART_SetConfig+0x338>)
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d826      	bhi.n	8004324 <UART_SetConfig+0x260>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x218>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	080042f5 	.word	0x080042f5
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	08004305 	.word	0x08004305
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004315 	.word	0x08004315
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e2ba      	b.n	8004872 <UART_SetConfig+0x7ae>
 80042fc:	2304      	movs	r3, #4
 80042fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004302:	e2b6      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004304:	2308      	movs	r3, #8
 8004306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430a:	e2b2      	b.n	8004872 <UART_SetConfig+0x7ae>
 800430c:	2310      	movs	r3, #16
 800430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004312:	e2ae      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004314:	2320      	movs	r3, #32
 8004316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431a:	e2aa      	b.n	8004872 <UART_SetConfig+0x7ae>
 800431c:	2340      	movs	r3, #64	; 0x40
 800431e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004322:	e2a6      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800432a:	e2a2      	b.n	8004872 <UART_SetConfig+0x7ae>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a35      	ldr	r2, [pc, #212]	; (8004408 <UART_SetConfig+0x344>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d130      	bne.n	8004398 <UART_SetConfig+0x2d4>
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <UART_SetConfig+0x338>)
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	2b05      	cmp	r3, #5
 8004340:	d826      	bhi.n	8004390 <UART_SetConfig+0x2cc>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x284>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	08004361 	.word	0x08004361
 800434c:	08004369 	.word	0x08004369
 8004350:	08004371 	.word	0x08004371
 8004354:	08004379 	.word	0x08004379
 8004358:	08004381 	.word	0x08004381
 800435c:	08004389 	.word	0x08004389
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e284      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436e:	e280      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004376:	e27c      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437e:	e278      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004380:	2320      	movs	r3, #32
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004386:	e274      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004388:	2340      	movs	r3, #64	; 0x40
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800438e:	e270      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004396:	e26c      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <UART_SetConfig+0x348>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d142      	bne.n	8004428 <UART_SetConfig+0x364>
 80043a2:	4b16      	ldr	r3, [pc, #88]	; (80043fc <UART_SetConfig+0x338>)
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d838      	bhi.n	8004420 <UART_SetConfig+0x35c>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0x2f0>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043cd 	.word	0x080043cd
 80043b8:	080043d5 	.word	0x080043d5
 80043bc:	080043dd 	.word	0x080043dd
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	08004411 	.word	0x08004411
 80043c8:	08004419 	.word	0x08004419
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e24e      	b.n	8004872 <UART_SetConfig+0x7ae>
 80043d4:	2304      	movs	r3, #4
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e24a      	b.n	8004872 <UART_SetConfig+0x7ae>
 80043dc:	2308      	movs	r3, #8
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e246      	b.n	8004872 <UART_SetConfig+0x7ae>
 80043e4:	2310      	movs	r3, #16
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e242      	b.n	8004872 <UART_SetConfig+0x7ae>
 80043ec:	cfff69f3 	.word	0xcfff69f3
 80043f0:	58000c00 	.word	0x58000c00
 80043f4:	11fff4ff 	.word	0x11fff4ff
 80043f8:	40011000 	.word	0x40011000
 80043fc:	58024400 	.word	0x58024400
 8004400:	40004400 	.word	0x40004400
 8004404:	40004800 	.word	0x40004800
 8004408:	40004c00 	.word	0x40004c00
 800440c:	40005000 	.word	0x40005000
 8004410:	2320      	movs	r3, #32
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004416:	e22c      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004418:	2340      	movs	r3, #64	; 0x40
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441e:	e228      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004426:	e224      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4ab1      	ldr	r2, [pc, #708]	; (80046f4 <UART_SetConfig+0x630>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d176      	bne.n	8004520 <UART_SetConfig+0x45c>
 8004432:	4bb1      	ldr	r3, [pc, #708]	; (80046f8 <UART_SetConfig+0x634>)
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800443a:	2b28      	cmp	r3, #40	; 0x28
 800443c:	d86c      	bhi.n	8004518 <UART_SetConfig+0x454>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x380>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	080044e9 	.word	0x080044e9
 8004448:	08004519 	.word	0x08004519
 800444c:	08004519 	.word	0x08004519
 8004450:	08004519 	.word	0x08004519
 8004454:	08004519 	.word	0x08004519
 8004458:	08004519 	.word	0x08004519
 800445c:	08004519 	.word	0x08004519
 8004460:	08004519 	.word	0x08004519
 8004464:	080044f1 	.word	0x080044f1
 8004468:	08004519 	.word	0x08004519
 800446c:	08004519 	.word	0x08004519
 8004470:	08004519 	.word	0x08004519
 8004474:	08004519 	.word	0x08004519
 8004478:	08004519 	.word	0x08004519
 800447c:	08004519 	.word	0x08004519
 8004480:	08004519 	.word	0x08004519
 8004484:	080044f9 	.word	0x080044f9
 8004488:	08004519 	.word	0x08004519
 800448c:	08004519 	.word	0x08004519
 8004490:	08004519 	.word	0x08004519
 8004494:	08004519 	.word	0x08004519
 8004498:	08004519 	.word	0x08004519
 800449c:	08004519 	.word	0x08004519
 80044a0:	08004519 	.word	0x08004519
 80044a4:	08004501 	.word	0x08004501
 80044a8:	08004519 	.word	0x08004519
 80044ac:	08004519 	.word	0x08004519
 80044b0:	08004519 	.word	0x08004519
 80044b4:	08004519 	.word	0x08004519
 80044b8:	08004519 	.word	0x08004519
 80044bc:	08004519 	.word	0x08004519
 80044c0:	08004519 	.word	0x08004519
 80044c4:	08004509 	.word	0x08004509
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004519 	.word	0x08004519
 80044d0:	08004519 	.word	0x08004519
 80044d4:	08004519 	.word	0x08004519
 80044d8:	08004519 	.word	0x08004519
 80044dc:	08004519 	.word	0x08004519
 80044e0:	08004519 	.word	0x08004519
 80044e4:	08004511 	.word	0x08004511
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ee:	e1c0      	b.n	8004872 <UART_SetConfig+0x7ae>
 80044f0:	2304      	movs	r3, #4
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f6:	e1bc      	b.n	8004872 <UART_SetConfig+0x7ae>
 80044f8:	2308      	movs	r3, #8
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fe:	e1b8      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004500:	2310      	movs	r3, #16
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004506:	e1b4      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004508:	2320      	movs	r3, #32
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450e:	e1b0      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004510:	2340      	movs	r3, #64	; 0x40
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004516:	e1ac      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451e:	e1a8      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a75      	ldr	r2, [pc, #468]	; (80046fc <UART_SetConfig+0x638>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d130      	bne.n	800458c <UART_SetConfig+0x4c8>
 800452a:	4b73      	ldr	r3, [pc, #460]	; (80046f8 <UART_SetConfig+0x634>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	2b05      	cmp	r3, #5
 8004534:	d826      	bhi.n	8004584 <UART_SetConfig+0x4c0>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <UART_SetConfig+0x478>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004555 	.word	0x08004555
 8004540:	0800455d 	.word	0x0800455d
 8004544:	08004565 	.word	0x08004565
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004575 	.word	0x08004575
 8004550:	0800457d 	.word	0x0800457d
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455a:	e18a      	b.n	8004872 <UART_SetConfig+0x7ae>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004562:	e186      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456a:	e182      	b.n	8004872 <UART_SetConfig+0x7ae>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004572:	e17e      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004574:	2320      	movs	r3, #32
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800457a:	e17a      	b.n	8004872 <UART_SetConfig+0x7ae>
 800457c:	2340      	movs	r3, #64	; 0x40
 800457e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004582:	e176      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458a:	e172      	b.n	8004872 <UART_SetConfig+0x7ae>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a5b      	ldr	r2, [pc, #364]	; (8004700 <UART_SetConfig+0x63c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d130      	bne.n	80045f8 <UART_SetConfig+0x534>
 8004596:	4b58      	ldr	r3, [pc, #352]	; (80046f8 <UART_SetConfig+0x634>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d826      	bhi.n	80045f0 <UART_SetConfig+0x52c>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x4e4>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045c1 	.word	0x080045c1
 80045ac:	080045c9 	.word	0x080045c9
 80045b0:	080045d1 	.word	0x080045d1
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c6:	e154      	b.n	8004872 <UART_SetConfig+0x7ae>
 80045c8:	2304      	movs	r3, #4
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ce:	e150      	b.n	8004872 <UART_SetConfig+0x7ae>
 80045d0:	2308      	movs	r3, #8
 80045d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d6:	e14c      	b.n	8004872 <UART_SetConfig+0x7ae>
 80045d8:	2310      	movs	r3, #16
 80045da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045de:	e148      	b.n	8004872 <UART_SetConfig+0x7ae>
 80045e0:	2320      	movs	r3, #32
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e6:	e144      	b.n	8004872 <UART_SetConfig+0x7ae>
 80045e8:	2340      	movs	r3, #64	; 0x40
 80045ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ee:	e140      	b.n	8004872 <UART_SetConfig+0x7ae>
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045f6:	e13c      	b.n	8004872 <UART_SetConfig+0x7ae>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a41      	ldr	r2, [pc, #260]	; (8004704 <UART_SetConfig+0x640>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f040 8082 	bne.w	8004708 <UART_SetConfig+0x644>
 8004604:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <UART_SetConfig+0x634>)
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460c:	2b28      	cmp	r3, #40	; 0x28
 800460e:	d86d      	bhi.n	80046ec <UART_SetConfig+0x628>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x554>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	080046bd 	.word	0x080046bd
 800461c:	080046ed 	.word	0x080046ed
 8004620:	080046ed 	.word	0x080046ed
 8004624:	080046ed 	.word	0x080046ed
 8004628:	080046ed 	.word	0x080046ed
 800462c:	080046ed 	.word	0x080046ed
 8004630:	080046ed 	.word	0x080046ed
 8004634:	080046ed 	.word	0x080046ed
 8004638:	080046c5 	.word	0x080046c5
 800463c:	080046ed 	.word	0x080046ed
 8004640:	080046ed 	.word	0x080046ed
 8004644:	080046ed 	.word	0x080046ed
 8004648:	080046ed 	.word	0x080046ed
 800464c:	080046ed 	.word	0x080046ed
 8004650:	080046ed 	.word	0x080046ed
 8004654:	080046ed 	.word	0x080046ed
 8004658:	080046cd 	.word	0x080046cd
 800465c:	080046ed 	.word	0x080046ed
 8004660:	080046ed 	.word	0x080046ed
 8004664:	080046ed 	.word	0x080046ed
 8004668:	080046ed 	.word	0x080046ed
 800466c:	080046ed 	.word	0x080046ed
 8004670:	080046ed 	.word	0x080046ed
 8004674:	080046ed 	.word	0x080046ed
 8004678:	080046d5 	.word	0x080046d5
 800467c:	080046ed 	.word	0x080046ed
 8004680:	080046ed 	.word	0x080046ed
 8004684:	080046ed 	.word	0x080046ed
 8004688:	080046ed 	.word	0x080046ed
 800468c:	080046ed 	.word	0x080046ed
 8004690:	080046ed 	.word	0x080046ed
 8004694:	080046ed 	.word	0x080046ed
 8004698:	080046dd 	.word	0x080046dd
 800469c:	080046ed 	.word	0x080046ed
 80046a0:	080046ed 	.word	0x080046ed
 80046a4:	080046ed 	.word	0x080046ed
 80046a8:	080046ed 	.word	0x080046ed
 80046ac:	080046ed 	.word	0x080046ed
 80046b0:	080046ed 	.word	0x080046ed
 80046b4:	080046ed 	.word	0x080046ed
 80046b8:	080046e5 	.word	0x080046e5
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c2:	e0d6      	b.n	8004872 <UART_SetConfig+0x7ae>
 80046c4:	2304      	movs	r3, #4
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ca:	e0d2      	b.n	8004872 <UART_SetConfig+0x7ae>
 80046cc:	2308      	movs	r3, #8
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d2:	e0ce      	b.n	8004872 <UART_SetConfig+0x7ae>
 80046d4:	2310      	movs	r3, #16
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046da:	e0ca      	b.n	8004872 <UART_SetConfig+0x7ae>
 80046dc:	2320      	movs	r3, #32
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e2:	e0c6      	b.n	8004872 <UART_SetConfig+0x7ae>
 80046e4:	2340      	movs	r3, #64	; 0x40
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ea:	e0c2      	b.n	8004872 <UART_SetConfig+0x7ae>
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f2:	e0be      	b.n	8004872 <UART_SetConfig+0x7ae>
 80046f4:	40011400 	.word	0x40011400
 80046f8:	58024400 	.word	0x58024400
 80046fc:	40007800 	.word	0x40007800
 8004700:	40007c00 	.word	0x40007c00
 8004704:	40011800 	.word	0x40011800
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4aad      	ldr	r2, [pc, #692]	; (80049c4 <UART_SetConfig+0x900>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d176      	bne.n	8004800 <UART_SetConfig+0x73c>
 8004712:	4bad      	ldr	r3, [pc, #692]	; (80049c8 <UART_SetConfig+0x904>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471a:	2b28      	cmp	r3, #40	; 0x28
 800471c:	d86c      	bhi.n	80047f8 <UART_SetConfig+0x734>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x660>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	080047c9 	.word	0x080047c9
 8004728:	080047f9 	.word	0x080047f9
 800472c:	080047f9 	.word	0x080047f9
 8004730:	080047f9 	.word	0x080047f9
 8004734:	080047f9 	.word	0x080047f9
 8004738:	080047f9 	.word	0x080047f9
 800473c:	080047f9 	.word	0x080047f9
 8004740:	080047f9 	.word	0x080047f9
 8004744:	080047d1 	.word	0x080047d1
 8004748:	080047f9 	.word	0x080047f9
 800474c:	080047f9 	.word	0x080047f9
 8004750:	080047f9 	.word	0x080047f9
 8004754:	080047f9 	.word	0x080047f9
 8004758:	080047f9 	.word	0x080047f9
 800475c:	080047f9 	.word	0x080047f9
 8004760:	080047f9 	.word	0x080047f9
 8004764:	080047d9 	.word	0x080047d9
 8004768:	080047f9 	.word	0x080047f9
 800476c:	080047f9 	.word	0x080047f9
 8004770:	080047f9 	.word	0x080047f9
 8004774:	080047f9 	.word	0x080047f9
 8004778:	080047f9 	.word	0x080047f9
 800477c:	080047f9 	.word	0x080047f9
 8004780:	080047f9 	.word	0x080047f9
 8004784:	080047e1 	.word	0x080047e1
 8004788:	080047f9 	.word	0x080047f9
 800478c:	080047f9 	.word	0x080047f9
 8004790:	080047f9 	.word	0x080047f9
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047f9 	.word	0x080047f9
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047e9 	.word	0x080047e9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047f9 	.word	0x080047f9
 80047b8:	080047f9 	.word	0x080047f9
 80047bc:	080047f9 	.word	0x080047f9
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e050      	b.n	8004872 <UART_SetConfig+0x7ae>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e04c      	b.n	8004872 <UART_SetConfig+0x7ae>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e048      	b.n	8004872 <UART_SetConfig+0x7ae>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e6:	e044      	b.n	8004872 <UART_SetConfig+0x7ae>
 80047e8:	2320      	movs	r3, #32
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ee:	e040      	b.n	8004872 <UART_SetConfig+0x7ae>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e03c      	b.n	8004872 <UART_SetConfig+0x7ae>
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fe:	e038      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a71      	ldr	r2, [pc, #452]	; (80049cc <UART_SetConfig+0x908>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d130      	bne.n	800486c <UART_SetConfig+0x7a8>
 800480a:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <UART_SetConfig+0x904>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	2b05      	cmp	r3, #5
 8004814:	d826      	bhi.n	8004864 <UART_SetConfig+0x7a0>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0x758>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004835 	.word	0x08004835
 8004820:	0800483d 	.word	0x0800483d
 8004824:	08004845 	.word	0x08004845
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004855 	.word	0x08004855
 8004830:	0800485d 	.word	0x0800485d
 8004834:	2302      	movs	r3, #2
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e01a      	b.n	8004872 <UART_SetConfig+0x7ae>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e016      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e012      	b.n	8004872 <UART_SetConfig+0x7ae>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004852:	e00e      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004854:	2320      	movs	r3, #32
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485a:	e00a      	b.n	8004872 <UART_SetConfig+0x7ae>
 800485c:	2340      	movs	r3, #64	; 0x40
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004862:	e006      	b.n	8004872 <UART_SetConfig+0x7ae>
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800486a:	e002      	b.n	8004872 <UART_SetConfig+0x7ae>
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a55      	ldr	r2, [pc, #340]	; (80049cc <UART_SetConfig+0x908>)
 8004878:	4293      	cmp	r3, r2
 800487a:	f040 80f8 	bne.w	8004a6e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800487e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004882:	2b20      	cmp	r3, #32
 8004884:	dc46      	bgt.n	8004914 <UART_SetConfig+0x850>
 8004886:	2b02      	cmp	r3, #2
 8004888:	db75      	blt.n	8004976 <UART_SetConfig+0x8b2>
 800488a:	3b02      	subs	r3, #2
 800488c:	2b1e      	cmp	r3, #30
 800488e:	d872      	bhi.n	8004976 <UART_SetConfig+0x8b2>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x7d4>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	0800491b 	.word	0x0800491b
 800489c:	08004977 	.word	0x08004977
 80048a0:	08004923 	.word	0x08004923
 80048a4:	08004977 	.word	0x08004977
 80048a8:	08004977 	.word	0x08004977
 80048ac:	08004977 	.word	0x08004977
 80048b0:	08004933 	.word	0x08004933
 80048b4:	08004977 	.word	0x08004977
 80048b8:	08004977 	.word	0x08004977
 80048bc:	08004977 	.word	0x08004977
 80048c0:	08004977 	.word	0x08004977
 80048c4:	08004977 	.word	0x08004977
 80048c8:	08004977 	.word	0x08004977
 80048cc:	08004977 	.word	0x08004977
 80048d0:	08004943 	.word	0x08004943
 80048d4:	08004977 	.word	0x08004977
 80048d8:	08004977 	.word	0x08004977
 80048dc:	08004977 	.word	0x08004977
 80048e0:	08004977 	.word	0x08004977
 80048e4:	08004977 	.word	0x08004977
 80048e8:	08004977 	.word	0x08004977
 80048ec:	08004977 	.word	0x08004977
 80048f0:	08004977 	.word	0x08004977
 80048f4:	08004977 	.word	0x08004977
 80048f8:	08004977 	.word	0x08004977
 80048fc:	08004977 	.word	0x08004977
 8004900:	08004977 	.word	0x08004977
 8004904:	08004977 	.word	0x08004977
 8004908:	08004977 	.word	0x08004977
 800490c:	08004977 	.word	0x08004977
 8004910:	08004969 	.word	0x08004969
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d02a      	beq.n	800496e <UART_SetConfig+0x8aa>
 8004918:	e02d      	b.n	8004976 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800491a:	f7fe fecb 	bl	80036b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800491e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004920:	e02f      	b.n	8004982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe feda 	bl	80036e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004930:	e027      	b.n	8004982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004932:	f107 0318 	add.w	r3, r7, #24
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff f826 	bl	8003988 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004940:	e01f      	b.n	8004982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <UART_SetConfig+0x904>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <UART_SetConfig+0x904>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	08db      	lsrs	r3, r3, #3
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	4a1d      	ldr	r2, [pc, #116]	; (80049d0 <UART_SetConfig+0x90c>)
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004960:	e00f      	b.n	8004982 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004962:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <UART_SetConfig+0x90c>)
 8004964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004966:	e00c      	b.n	8004982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <UART_SetConfig+0x910>)
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800496c:	e009      	b.n	8004982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004974:	e005      	b.n	8004982 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 81ee 	beq.w	8004d66 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <UART_SetConfig+0x914>)
 8004990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004994:	461a      	mov	r2, r3
 8004996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004998:	fbb3 f3f2 	udiv	r3, r3, r2
 800499c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d305      	bcc.n	80049ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d910      	bls.n	80049dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80049c0:	e1d1      	b.n	8004d66 <UART_SetConfig+0xca2>
 80049c2:	bf00      	nop
 80049c4:	40011c00 	.word	0x40011c00
 80049c8:	58024400 	.word	0x58024400
 80049cc:	58000c00 	.word	0x58000c00
 80049d0:	03d09000 	.word	0x03d09000
 80049d4:	003d0900 	.word	0x003d0900
 80049d8:	0800546c 	.word	0x0800546c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049de:	2200      	movs	r2, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	60fa      	str	r2, [r7, #12]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	4ac0      	ldr	r2, [pc, #768]	; (8004cec <UART_SetConfig+0xc28>)
 80049ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049fe:	f7fb fc75 	bl	80002ec <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	020b      	lsls	r3, r1, #8
 8004a14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a18:	0202      	lsls	r2, r0, #8
 8004a1a:	6979      	ldr	r1, [r7, #20]
 8004a1c:	6849      	ldr	r1, [r1, #4]
 8004a1e:	0849      	lsrs	r1, r1, #1
 8004a20:	2000      	movs	r0, #0
 8004a22:	460c      	mov	r4, r1
 8004a24:	4605      	mov	r5, r0
 8004a26:	eb12 0804 	adds.w	r8, r2, r4
 8004a2a:	eb43 0905 	adc.w	r9, r3, r5
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	469a      	mov	sl, r3
 8004a36:	4693      	mov	fp, r2
 8004a38:	4652      	mov	r2, sl
 8004a3a:	465b      	mov	r3, fp
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	4649      	mov	r1, r9
 8004a40:	f7fb fc54 	bl	80002ec <__aeabi_uldivmod>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a52:	d308      	bcc.n	8004a66 <UART_SetConfig+0x9a2>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5a:	d204      	bcs.n	8004a66 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	e17f      	b.n	8004d66 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a6c:	e17b      	b.n	8004d66 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	f040 80bd 	bne.w	8004bf4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004a7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	dc48      	bgt.n	8004b14 <UART_SetConfig+0xa50>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	db7b      	blt.n	8004b7e <UART_SetConfig+0xaba>
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d879      	bhi.n	8004b7e <UART_SetConfig+0xaba>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x9cc>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004b1b 	.word	0x08004b1b
 8004a94:	08004b23 	.word	0x08004b23
 8004a98:	08004b7f 	.word	0x08004b7f
 8004a9c:	08004b7f 	.word	0x08004b7f
 8004aa0:	08004b2b 	.word	0x08004b2b
 8004aa4:	08004b7f 	.word	0x08004b7f
 8004aa8:	08004b7f 	.word	0x08004b7f
 8004aac:	08004b7f 	.word	0x08004b7f
 8004ab0:	08004b3b 	.word	0x08004b3b
 8004ab4:	08004b7f 	.word	0x08004b7f
 8004ab8:	08004b7f 	.word	0x08004b7f
 8004abc:	08004b7f 	.word	0x08004b7f
 8004ac0:	08004b7f 	.word	0x08004b7f
 8004ac4:	08004b7f 	.word	0x08004b7f
 8004ac8:	08004b7f 	.word	0x08004b7f
 8004acc:	08004b7f 	.word	0x08004b7f
 8004ad0:	08004b4b 	.word	0x08004b4b
 8004ad4:	08004b7f 	.word	0x08004b7f
 8004ad8:	08004b7f 	.word	0x08004b7f
 8004adc:	08004b7f 	.word	0x08004b7f
 8004ae0:	08004b7f 	.word	0x08004b7f
 8004ae4:	08004b7f 	.word	0x08004b7f
 8004ae8:	08004b7f 	.word	0x08004b7f
 8004aec:	08004b7f 	.word	0x08004b7f
 8004af0:	08004b7f 	.word	0x08004b7f
 8004af4:	08004b7f 	.word	0x08004b7f
 8004af8:	08004b7f 	.word	0x08004b7f
 8004afc:	08004b7f 	.word	0x08004b7f
 8004b00:	08004b7f 	.word	0x08004b7f
 8004b04:	08004b7f 	.word	0x08004b7f
 8004b08:	08004b7f 	.word	0x08004b7f
 8004b0c:	08004b7f 	.word	0x08004b7f
 8004b10:	08004b71 	.word	0x08004b71
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d02e      	beq.n	8004b76 <UART_SetConfig+0xab2>
 8004b18:	e031      	b.n	8004b7e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b1a:	f7fd fbe1 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8004b1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b20:	e033      	b.n	8004b8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b22:	f7fd fbf3 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8004b26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b28:	e02f      	b.n	8004b8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fdd6 	bl	80036e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b38:	e027      	b.n	8004b8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b3a:	f107 0318 	add.w	r3, r7, #24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe ff22 	bl	8003988 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b48:	e01f      	b.n	8004b8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b4a:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <UART_SetConfig+0xc2c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b56:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <UART_SetConfig+0xc2c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	08db      	lsrs	r3, r3, #3
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	4a64      	ldr	r2, [pc, #400]	; (8004cf4 <UART_SetConfig+0xc30>)
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b68:	e00f      	b.n	8004b8a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004b6a:	4b62      	ldr	r3, [pc, #392]	; (8004cf4 <UART_SetConfig+0xc30>)
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b6e:	e00c      	b.n	8004b8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <UART_SetConfig+0xc34>)
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b74:	e009      	b.n	8004b8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b7c:	e005      	b.n	8004b8a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004b88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80ea 	beq.w	8004d66 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	4a55      	ldr	r2, [pc, #340]	; (8004cec <UART_SetConfig+0xc28>)
 8004b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba4:	005a      	lsls	r2, r3, #1
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	441a      	add	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d916      	bls.n	8004bec <UART_SetConfig+0xb28>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d212      	bcs.n	8004bec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f023 030f 	bic.w	r3, r3, #15
 8004bce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bde:	4313      	orrs	r3, r2
 8004be0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e0bc      	b.n	8004d66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004bf2:	e0b8      	b.n	8004d66 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	dc4b      	bgt.n	8004c94 <UART_SetConfig+0xbd0>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f2c0 8087 	blt.w	8004d10 <UART_SetConfig+0xc4c>
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f200 8084 	bhi.w	8004d10 <UART_SetConfig+0xc4c>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <UART_SetConfig+0xb4c>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c9b 	.word	0x08004c9b
 8004c14:	08004ca3 	.word	0x08004ca3
 8004c18:	08004d11 	.word	0x08004d11
 8004c1c:	08004d11 	.word	0x08004d11
 8004c20:	08004cab 	.word	0x08004cab
 8004c24:	08004d11 	.word	0x08004d11
 8004c28:	08004d11 	.word	0x08004d11
 8004c2c:	08004d11 	.word	0x08004d11
 8004c30:	08004cbb 	.word	0x08004cbb
 8004c34:	08004d11 	.word	0x08004d11
 8004c38:	08004d11 	.word	0x08004d11
 8004c3c:	08004d11 	.word	0x08004d11
 8004c40:	08004d11 	.word	0x08004d11
 8004c44:	08004d11 	.word	0x08004d11
 8004c48:	08004d11 	.word	0x08004d11
 8004c4c:	08004d11 	.word	0x08004d11
 8004c50:	08004ccb 	.word	0x08004ccb
 8004c54:	08004d11 	.word	0x08004d11
 8004c58:	08004d11 	.word	0x08004d11
 8004c5c:	08004d11 	.word	0x08004d11
 8004c60:	08004d11 	.word	0x08004d11
 8004c64:	08004d11 	.word	0x08004d11
 8004c68:	08004d11 	.word	0x08004d11
 8004c6c:	08004d11 	.word	0x08004d11
 8004c70:	08004d11 	.word	0x08004d11
 8004c74:	08004d11 	.word	0x08004d11
 8004c78:	08004d11 	.word	0x08004d11
 8004c7c:	08004d11 	.word	0x08004d11
 8004c80:	08004d11 	.word	0x08004d11
 8004c84:	08004d11 	.word	0x08004d11
 8004c88:	08004d11 	.word	0x08004d11
 8004c8c:	08004d11 	.word	0x08004d11
 8004c90:	08004d03 	.word	0x08004d03
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d037      	beq.n	8004d08 <UART_SetConfig+0xc44>
 8004c98:	e03a      	b.n	8004d10 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9a:	f7fd fb21 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8004c9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ca0:	e03c      	b.n	8004d1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca2:	f7fd fb33 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8004ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ca8:	e038      	b.n	8004d1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fd16 	bl	80036e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb8:	e030      	b.n	8004d1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cba:	f107 0318 	add.w	r3, r7, #24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fe62 	bl	8003988 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cc8:	e028      	b.n	8004d1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <UART_SetConfig+0xc2c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d012      	beq.n	8004cfc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <UART_SetConfig+0xc2c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	08db      	lsrs	r3, r3, #3
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <UART_SetConfig+0xc30>)
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ce8:	e018      	b.n	8004d1c <UART_SetConfig+0xc58>
 8004cea:	bf00      	nop
 8004cec:	0800546c 	.word	0x0800546c
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	03d09000 	.word	0x03d09000
 8004cf8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004cfc:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <UART_SetConfig+0xccc>)
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d00:	e00c      	b.n	8004d1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <UART_SetConfig+0xcd0>)
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d06:	e009      	b.n	8004d1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d0e:	e005      	b.n	8004d1c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004d1a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d021      	beq.n	8004d66 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <UART_SetConfig+0xcd4>)
 8004d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d30:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	441a      	add	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b0f      	cmp	r3, #15
 8004d4a:	d909      	bls.n	8004d60 <UART_SetConfig+0xc9c>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d52:	d205      	bcs.n	8004d60 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60da      	str	r2, [r3, #12]
 8004d5e:	e002      	b.n	8004d66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d82:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3748      	adds	r7, #72	; 0x48
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d90:	03d09000 	.word	0x03d09000
 8004d94:	003d0900 	.word	0x003d0900
 8004d98:	0800546c 	.word	0x0800546c

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9a:	d10a      	bne.n	8004eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b098      	sub	sp, #96	; 0x60
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef0:	f7fb ff46 	bl	8000d80 <HAL_GetTick>
 8004ef4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d12f      	bne.n	8004f64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f88e 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d022      	beq.n	8004f64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f32:	653b      	str	r3, [r7, #80]	; 0x50
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e063      	b.n	800502c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d149      	bne.n	8005006 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f857 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d03c      	beq.n	8005006 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
 8004fac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fde:	61fa      	str	r2, [r7, #28]
 8004fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	69b9      	ldr	r1, [r7, #24]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	617b      	str	r3, [r7, #20]
   return(result);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e012      	b.n	800502c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3758      	adds	r7, #88	; 0x58
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005044:	e049      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d045      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fb fe97 	bl	8000d80 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <UART_WaitOnFlagUntilTimeout+0x30>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e048      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d031      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b08      	cmp	r3, #8
 8005082:	d110      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2208      	movs	r2, #8
 800508a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f839 	bl	8005104 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2208      	movs	r2, #8
 8005096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e029      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	d111      	bne.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f81f 	bl	8005104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e00f      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d0a6      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b095      	sub	sp, #84	; 0x54
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	643b      	str	r3, [r7, #64]	; 0x40
 800512c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	61fb      	str	r3, [r7, #28]
   return(result);
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <UART_EndRxTransfer+0xc8>)
 8005152:	4013      	ands	r3, r2
 8005154:	64bb      	str	r3, [r7, #72]	; 0x48
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800515e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e5      	bne.n	800513e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d118      	bne.n	80051ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	60bb      	str	r3, [r7, #8]
   return(result);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f023 0310 	bic.w	r3, r3, #16
 800518e:	647b      	str	r3, [r7, #68]	; 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	6979      	ldr	r1, [r7, #20]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	613b      	str	r3, [r7, #16]
   return(result);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e6      	bne.n	800517a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	675a      	str	r2, [r3, #116]	; 0x74
}
 80051c0:	bf00      	nop
 80051c2:	3754      	adds	r7, #84	; 0x54
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	effffffe 	.word	0xeffffffe

080051d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e027      	b.n	8005236 <HAL_UARTEx_DisableFifoMode+0x66>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2224      	movs	r2, #36	; 0x24
 80051f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005214:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005256:	2302      	movs	r3, #2
 8005258:	e02d      	b.n	80052b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2224      	movs	r2, #36	; 0x24
 8005266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f850 	bl	800533c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e02d      	b.n	8005332 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2224      	movs	r2, #36	; 0x24
 80052e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f812 	bl	800533c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005348:	2b00      	cmp	r3, #0
 800534a:	d108      	bne.n	800535e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800535c:	e031      	b.n	80053c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800535e:	2310      	movs	r3, #16
 8005360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005362:	2310      	movs	r3, #16
 8005364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	0e5b      	lsrs	r3, r3, #25
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	0f5b      	lsrs	r3, r3, #29
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005386:	7bbb      	ldrb	r3, [r7, #14]
 8005388:	7b3a      	ldrb	r2, [r7, #12]
 800538a:	4911      	ldr	r1, [pc, #68]	; (80053d0 <UARTEx_SetNbDataToProcess+0x94>)
 800538c:	5c8a      	ldrb	r2, [r1, r2]
 800538e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005392:	7b3a      	ldrb	r2, [r7, #12]
 8005394:	490f      	ldr	r1, [pc, #60]	; (80053d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005398:	fb93 f3f2 	sdiv	r3, r3, r2
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	7b7a      	ldrb	r2, [r7, #13]
 80053a8:	4909      	ldr	r1, [pc, #36]	; (80053d0 <UARTEx_SetNbDataToProcess+0x94>)
 80053aa:	5c8a      	ldrb	r2, [r1, r2]
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053b0:	7b7a      	ldrb	r2, [r7, #13]
 80053b2:	4908      	ldr	r1, [pc, #32]	; (80053d4 <UARTEx_SetNbDataToProcess+0x98>)
 80053b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	08005484 	.word	0x08005484
 80053d4:	0800548c 	.word	0x0800548c

080053d8 <memset>:
 80053d8:	4402      	add	r2, r0
 80053da:	4603      	mov	r3, r0
 80053dc:	4293      	cmp	r3, r2
 80053de:	d100      	bne.n	80053e2 <memset+0xa>
 80053e0:	4770      	bx	lr
 80053e2:	f803 1b01 	strb.w	r1, [r3], #1
 80053e6:	e7f9      	b.n	80053dc <memset+0x4>

080053e8 <__libc_init_array>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4d0d      	ldr	r5, [pc, #52]	; (8005420 <__libc_init_array+0x38>)
 80053ec:	4c0d      	ldr	r4, [pc, #52]	; (8005424 <__libc_init_array+0x3c>)
 80053ee:	1b64      	subs	r4, r4, r5
 80053f0:	10a4      	asrs	r4, r4, #2
 80053f2:	2600      	movs	r6, #0
 80053f4:	42a6      	cmp	r6, r4
 80053f6:	d109      	bne.n	800540c <__libc_init_array+0x24>
 80053f8:	4d0b      	ldr	r5, [pc, #44]	; (8005428 <__libc_init_array+0x40>)
 80053fa:	4c0c      	ldr	r4, [pc, #48]	; (800542c <__libc_init_array+0x44>)
 80053fc:	f000 f818 	bl	8005430 <_init>
 8005400:	1b64      	subs	r4, r4, r5
 8005402:	10a4      	asrs	r4, r4, #2
 8005404:	2600      	movs	r6, #0
 8005406:	42a6      	cmp	r6, r4
 8005408:	d105      	bne.n	8005416 <__libc_init_array+0x2e>
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005410:	4798      	blx	r3
 8005412:	3601      	adds	r6, #1
 8005414:	e7ee      	b.n	80053f4 <__libc_init_array+0xc>
 8005416:	f855 3b04 	ldr.w	r3, [r5], #4
 800541a:	4798      	blx	r3
 800541c:	3601      	adds	r6, #1
 800541e:	e7f2      	b.n	8005406 <__libc_init_array+0x1e>
 8005420:	0800549c 	.word	0x0800549c
 8005424:	0800549c 	.word	0x0800549c
 8005428:	0800549c 	.word	0x0800549c
 800542c:	080054a0 	.word	0x080054a0

08005430 <_init>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr

0800543c <_fini>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr
