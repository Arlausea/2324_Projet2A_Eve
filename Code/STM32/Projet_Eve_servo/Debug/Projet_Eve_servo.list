
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a8  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005b14  08005b14  00015b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08005b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000294  24000060  08005b78  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002f4  08005b78  000202f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f5fb  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000020aa  00000000  00000000  0002f6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ad8  00000000  00000000  00031778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000842  00000000  00000000  00032250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f94b  00000000  00000000  00032a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010127  00000000  00000000  000623dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00132efa  00000000  00000000  00072504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002ebc  00000000  00000000  001a5400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001a82bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000060 	.word	0x24000060
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800583c 	.word	0x0800583c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000064 	.word	0x24000064
 80002e8:	0800583c 	.word	0x0800583c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <dyn2_crc>:
#define HUART_SERVO &huart4



unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80005f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005f8:	6019      	str	r1, [r3, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000600:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000604:	4602      	mov	r2, r0
 8000606:	801a      	strh	r2, [r3, #0]
 8000608:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800060c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000610:	460a      	mov	r2, r1
 8000612:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000614:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000618:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <dyn2_crc+0xd8>)
 800061e:	4618      	mov	r0, r3
 8000620:	4611      	mov	r1, r2
 8000622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000626:	461a      	mov	r2, r3
 8000628:	f005 f8ae 	bl	8005788 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 800062c:	2300      	movs	r3, #0
 800062e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000632:	e031      	b.n	8000698 <dyn2_crc+0xb0>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000634:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000638:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29a      	uxth	r2, r3
 8000642:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000646:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800064a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800064e:	6809      	ldr	r1, [r1, #0]
 8000650:	440b      	add	r3, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4053      	eors	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000660:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000664:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b21a      	sxth	r2, r3
 800066e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000672:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800067a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4053      	eors	r3, r2
 8000682:	b21a      	sxth	r2, r3
 8000684:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000688:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800068c:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800068e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000692:	3301      	adds	r3, #1
 8000694:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000698:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800069c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80006a0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d3c4      	bcc.n	8000634 <dyn2_crc+0x4c>
	}
	return crc_accum;
 80006aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80006ae:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006b2:	881b      	ldrh	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	08005854 	.word	0x08005854

080006c4 <dyn2_append_crc>:
uint8_t* dyn2_append_crc(const uint8_t* instruction) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    uint8_t* instruction_sent = (uint8_t*)malloc(BUFFER_SIZE);
 80006cc:	2020      	movs	r0, #32
 80006ce:	f004 ff5b 	bl	8005588 <malloc>
 80006d2:	4603      	mov	r3, r0
 80006d4:	60fb      	str	r3, [r7, #12]

    if (instruction_sent == NULL) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d101      	bne.n	80006e0 <dyn2_append_crc+0x1c>
        // Handle memory allocation failure
        return NULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	e01a      	b.n	8000716 <dyn2_append_crc+0x52>
    }

    memcpy(instruction_sent, instruction, BUFFER_SIZE);
 80006e0:	2220      	movs	r2, #32
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f005 f84f 	bl	8005788 <memcpy>

    unsigned short crc = dyn2_crc(0, instruction_sent, BUFFER_SIZE - 2);
 80006ea:	221e      	movs	r2, #30
 80006ec:	68f9      	ldr	r1, [r7, #12]
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ff7a 	bl	80005e8 <dyn2_crc>
 80006f4:	4603      	mov	r3, r0
 80006f6:	817b      	strh	r3, [r7, #10]
    unsigned char crc_l = (unsigned char)(crc & 0x00FF);
 80006f8:	897b      	ldrh	r3, [r7, #10]
 80006fa:	727b      	strb	r3, [r7, #9]
    unsigned char crc_h = (unsigned char)((crc >> 8) & 0x00FF);
 80006fc:	897b      	ldrh	r3, [r7, #10]
 80006fe:	0a1b      	lsrs	r3, r3, #8
 8000700:	b29b      	uxth	r3, r3
 8000702:	723b      	strb	r3, [r7, #8]

    instruction_sent[BUFFER_SIZE - 2] = crc_l;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	331e      	adds	r3, #30
 8000708:	7a7a      	ldrb	r2, [r7, #9]
 800070a:	701a      	strb	r2, [r3, #0]
    instruction_sent[BUFFER_SIZE - 1] = crc_h;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	331f      	adds	r3, #31
 8000710:	7a3a      	ldrb	r2, [r7, #8]
 8000712:	701a      	strb	r2, [r3, #0]

    return instruction_sent;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <dyn2_send>:

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t buffer[BUFFER_SIZE]) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    uint8_t* buffer_crc = dyn2_append_crc(buffer);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ffcb 	bl	80006c4 <dyn2_append_crc>
 800072e:	60f8      	str	r0, [r7, #12]
    if (buffer_crc == NULL) {
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <dyn2_send+0x1c>
            // Handle memory allocation failure
            return -1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e014      	b.n	8000766 <dyn2_send+0x46>
        }
    memcpy(buffer, buffer_crc, BUFFER_SIZE);
 800073c:	2220      	movs	r2, #32
 800073e:	68f9      	ldr	r1, [r7, #12]
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f005 f821 	bl	8005788 <memcpy>
    //while(!__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE));
    if(HAL_UART_Transmit(HUART_SERVO, buffer_crc, BUFFER_SIZE, 100)!=0){
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	2220      	movs	r2, #32
 800074a:	68f9      	ldr	r1, [r7, #12]
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <dyn2_send+0x50>)
 800074e:	f003 fd03 	bl	8004158 <HAL_UART_Transmit>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <dyn2_send+0x3e>
    	return -1;
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	e003      	b.n	8000766 <dyn2_send+0x46>
    }
    free(buffer_crc); // Free the dynamically allocated memory
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f004 ff1a 	bl	8005598 <free>
	return 0;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	24000080 	.word	0x24000080

08000774 <dyn2_led>:
	uint8_t Dynamixel_PING[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x01, 0x00,/*type instruction, ici Ping*/0x01
			/* calcul of CRC after */,0x19,0x4E};
	dyn2_send(Dynamixel_PING);
}
// Status 1 : Led ON, status 0 : Led OFF
void dyn2_led(int status){
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b093      	sub	sp, #76	; 0x4c
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t Dynamixel_LED_ON_XL430[BUFFER_SIZE] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <dyn2_led+0x68>)
 800077e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000784:	c407      	stmia	r4!, {r0, r1, r2}
 8000786:	8023      	strh	r3, [r4, #0]
 8000788:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	821a      	strh	r2, [r3, #16]
			/*débutparam, address 65:*/ ,0x41,0x00
			/*value in the address*/,0x01
			/*on calcule le CRC après */,0x00,0x00};

	uint8_t Dynamixel_LED_OFF_XL430[BUFFER_SIZE] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <dyn2_led+0x6c>)
 800079a:	f107 0408 	add.w	r4, r7, #8
 800079e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a0:	c407      	stmia	r4!, {r0, r1, r2}
 80007a2:	8023      	strh	r3, [r4, #0]
 80007a4:	f107 0316 	add.w	r3, r7, #22
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	821a      	strh	r2, [r3, #16]
			/*débutparam, address 65:*/ ,0x41,0x00
			/*value in the address*/,0x00
			/*on calcule le CRC après */,0x00,0x00};


	if(status == 1){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d104      	bne.n	80007c4 <dyn2_led+0x50>
		dyn2_send(Dynamixel_LED_ON_XL430);
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffae 	bl	8000720 <dyn2_send>
	}
	if(status == 0){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d104      	bne.n	80007d4 <dyn2_led+0x60>
		dyn2_send(Dynamixel_LED_OFF_XL430);
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffa6 	bl	8000720 <dyn2_send>
	}
}
 80007d4:	bf00      	nop
 80007d6:	374c      	adds	r7, #76	; 0x4c
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	08005a60 	.word	0x08005a60
 80007e0:	08005a80 	.word	0x08005a80

080007e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_GPIO_Init+0x6c>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_GPIO_Init+0x6c>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_GPIO_Init+0x6c>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_GPIO_Init+0x6c>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <MX_GPIO_Init+0x6c>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_GPIO_Init+0x6c>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_GPIO_Init+0x6c>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082c:	4a08      	ldr	r2, [pc, #32]	; (8000850 <MX_GPIO_Init+0x6c>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_GPIO_Init+0x6c>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	58024400 	.word	0x58024400

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 fb08 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f80a 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f7ff ffc0 	bl	80007e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000864:	f000 f9be 	bl	8000be4 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000868:	f000 f970 	bl	8000b4c <MX_UART4_Init>
	  //HAL_UART_Transmit(&huart4, "hello", 5, 10);
	  //HAL_UART_Transmit(&huart4,"hello",strlen("hello"),10);
	  //HAL_Delay(100);


	  dyn2_led(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff81 	bl	8000774 <dyn2_led>
 8000872:	e7fb      	b.n	800086c <main+0x18>

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09c      	sub	sp, #112	; 0x70
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	224c      	movs	r2, #76	; 0x4c
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 ff3c 	bl	8005700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2220      	movs	r2, #32
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f004 ff36 	bl	8005700 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <SystemClock_Config+0xe0>)
 8000896:	f04f 32ff 	mov.w	r2, #4294967295
 800089a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800089e:	2004      	movs	r0, #4
 80008a0:	f000 fe0a 	bl	80014b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <SystemClock_Config+0xe4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <SystemClock_Config+0xe4>)
 80008ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <SystemClock_Config+0xe4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c0:	bf00      	nop
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <SystemClock_Config+0xe4>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ce:	d1f8      	bne.n	80008c2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	2302      	movs	r3, #2
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008e6:	2318      	movs	r3, #24
 80008e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ee:	2304      	movs	r3, #4
 80008f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008f6:	230c      	movs	r3, #12
 80008f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fe30 	bl	800156c <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000912:	f000 f823 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	233f      	movs	r3, #63	; 0x3f
 8000918:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2303      	movs	r3, #3
 800091c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2102      	movs	r1, #2
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fa48 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000946:	f000 f809 	bl	800095c <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3770      	adds	r7, #112	; 0x70
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	58024400 	.word	0x58024400
 8000958:	58024800 	.word	0x58024800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_MspInit+0x30>)
 8000970:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x30>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x30>)
 8000980:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	58024400 	.word	0x58024400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 fab2 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f004 fe86 	bl	8005730 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24100000 	.word	0x24100000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	2400007c 	.word	0x2400007c
 8000a58:	240002f8 	.word	0x240002f8

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a60:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <SystemInit+0xd0>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a31      	ldr	r2, [pc, #196]	; (8000b2c <SystemInit+0xd0>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <SystemInit+0xd4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 030f 	and.w	r3, r3, #15
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d807      	bhi.n	8000a8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <SystemInit+0xd4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f023 030f 	bic.w	r3, r3, #15
 8000a84:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <SystemInit+0xd4>)
 8000a86:	f043 0303 	orr.w	r3, r3, #3
 8000a8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <SystemInit+0xd8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a28      	ldr	r2, [pc, #160]	; (8000b34 <SystemInit+0xd8>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <SystemInit+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <SystemInit+0xd8>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4924      	ldr	r1, [pc, #144]	; (8000b34 <SystemInit+0xd8>)
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <SystemInit+0xdc>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <SystemInit+0xd4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 030c 	and.w	r3, r3, #12
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <SystemInit+0xd4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f023 030f 	bic.w	r3, r3, #15
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <SystemInit+0xd4>)
 8000ac0:	f043 0303 	orr.w	r3, r3, #3
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <SystemInit+0xd8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <SystemInit+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <SystemInit+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <SystemInit+0xd8>)
 8000ada:	4a18      	ldr	r2, [pc, #96]	; (8000b3c <SystemInit+0xe0>)
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <SystemInit+0xd8>)
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <SystemInit+0xe4>)
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <SystemInit+0xd8>)
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <SystemInit+0xe8>)
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <SystemInit+0xd8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <SystemInit+0xd8>)
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <SystemInit+0xe8>)
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <SystemInit+0xd8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <SystemInit+0xd8>)
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <SystemInit+0xe8>)
 8000b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <SystemInit+0xd8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <SystemInit+0xd8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <SystemInit+0xd8>)
 8000b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <SystemInit+0xd8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <SystemInit+0xec>)
 8000b1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	52002000 	.word	0x52002000
 8000b34:	58024400 	.word	0x58024400
 8000b38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b3c:	02020200 	.word	0x02020200
 8000b40:	01ff0000 	.word	0x01ff0000
 8000b44:	01010280 	.word	0x01010280
 8000b48:	52004000 	.word	0x52004000

08000b4c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b52:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <MX_UART4_Init+0x94>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b58:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000b94:	4811      	ldr	r0, [pc, #68]	; (8000bdc <MX_UART4_Init+0x90>)
 8000b96:	f003 fa87 	bl	80040a8 <HAL_HalfDuplex_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f7ff fedc 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_UART4_Init+0x90>)
 8000ba8:	f004 fc23 	bl	80053f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bb2:	f7ff fed3 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <MX_UART4_Init+0x90>)
 8000bba:	f004 fc58 	bl	800546e <HAL_UARTEx_SetRxFifoThreshold>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bc4:	f7ff feca 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_UART4_Init+0x90>)
 8000bca:	f004 fbd9 	bl	8005380 <HAL_UARTEx_DisableFifoMode>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bd4:	f7ff fec2 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	24000080 	.word	0x24000080
 8000be0:	40004c00 	.word	0x40004c00

08000be4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <MX_USART3_UART_Init+0x94>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c2e:	f003 fa3b 	bl	80040a8 <HAL_HalfDuplex_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c38:	f7ff fe90 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c40:	f004 fbd7 	bl	80053f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4a:	f7ff fe87 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c52:	f004 fc0c 	bl	800546e <HAL_UARTEx_SetRxFifoThreshold>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c5c:	f7ff fe7e 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c62:	f004 fb8d 	bl	8005380 <HAL_UARTEx_DisableFifoMode>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f7ff fe76 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	24000114 	.word	0x24000114
 8000c78:	40004800 	.word	0x40004800

08000c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0bc      	sub	sp, #240	; 0xf0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	22c0      	movs	r2, #192	; 0xc0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 fd2f 	bl	8005700 <memset>
  if(uartHandle->Instance==UART4)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <HAL_UART_MspInit+0x18c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d146      	bne.n	8000d3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000cac:	f04f 0202 	mov.w	r2, #2
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fc10 	bl	80024e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cce:	f7ff fe45 	bl	800095c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000cd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cd8:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cde:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000ce4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf0:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000cf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf6:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d00:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000d02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d26:	2308      	movs	r3, #8
 8000d28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d30:	4619      	mov	r1, r3
 8000d32:	4837      	ldr	r0, [pc, #220]	; (8000e10 <HAL_UART_MspInit+0x194>)
 8000d34:	f000 fa10 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d38:	e061      	b.n	8000dfe <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a35      	ldr	r2, [pc, #212]	; (8000e14 <HAL_UART_MspInit+0x198>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d15c      	bne.n	8000dfe <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d44:	f04f 0202 	mov.w	r2, #2
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 fbc4 	bl	80024e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000d66:	f7ff fdf9 	bl	800095c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000d6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d76:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000d7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000d8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_UART_MspInit+0x190>)
 8000d9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4810      	ldr	r0, [pc, #64]	; (8000e10 <HAL_UART_MspInit+0x194>)
 8000dce:	f000 f9c3 	bl	8001158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dec:	2307      	movs	r3, #7
 8000dee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_UART_MspInit+0x194>)
 8000dfa:	f000 f9ad 	bl	8001158 <HAL_GPIO_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	37f0      	adds	r7, #240	; 0xf0
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40004c00 	.word	0x40004c00
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	58020c00 	.word	0x58020c00
 8000e14:	40004800 	.word	0x40004800

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff fe1e 	bl	8000a5c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f004 fc79 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fd03 	bl	8000854 <main>
  bx  lr
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e58:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000e5c:	08005b18 	.word	0x08005b18
  ldr r2, =_sbss
 8000e60:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000e64:	240002f4 	.word	0x240002f4

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 f93e 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e78:	f001 f960 	bl	800213c <HAL_RCC_GetSysClockFreq>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_Init+0x68>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	4913      	ldr	r1, [pc, #76]	; (8000ed8 <HAL_Init+0x6c>)
 8000e8a:	5ccb      	ldrb	r3, [r1, r3]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	fa22 f303 	lsr.w	r3, r2, r3
 8000e94:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_Init+0x68>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_Init+0x6c>)
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_Init+0x70>)
 8000eae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <HAL_Init+0x74>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f814 	bl	8000ee4 <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e002      	b.n	8000ecc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec6:	f7ff fd4f 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	08005ad0 	.word	0x08005ad0
 8000edc:	24000004 	.word	0x24000004
 8000ee0:	24000000 	.word	0x24000000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_InitTick+0x60>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e021      	b.n	8000f3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_InitTick+0x64>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_InitTick+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f915 	bl	800113e <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f8ed 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x68>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2400000c 	.word	0x2400000c
 8000f48:	24000000 	.word	0x24000000
 8000f4c:	24000008 	.word	0x24000008

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2400000c 	.word	0x2400000c
 8000f74:	240001a8 	.word	0x240001a8

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	240001a8 	.word	0x240001a8

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	05fa0000 	.word	0x05fa0000

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff47 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb2 	bl	80010b0 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001166:	4b89      	ldr	r3, [pc, #548]	; (800138c <HAL_GPIO_Init+0x234>)
 8001168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800116a:	e194      	b.n	8001496 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8186 	beq.w	8001490 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d005      	beq.n	800119c <HAL_GPIO_Init+0x44>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d130      	bne.n	80011fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d2:	2201      	movs	r2, #1
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 0201 	and.w	r2, r3, #1
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b03      	cmp	r3, #3
 8001208:	d017      	beq.n	800123a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d123      	bne.n	800128e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0203 	and.w	r2, r3, #3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 80e0 	beq.w	8001490 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x238>)
 80012d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012d6:	4a2e      	ldr	r2, [pc, #184]	; (8001390 <HAL_GPIO_Init+0x238>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_GPIO_Init+0x238>)
 80012e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ee:	4a29      	ldr	r2, [pc, #164]	; (8001394 <HAL_GPIO_Init+0x23c>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <HAL_GPIO_Init+0x240>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d052      	beq.n	80013c0 <HAL_GPIO_Init+0x268>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_GPIO_Init+0x244>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d031      	beq.n	8001386 <HAL_GPIO_Init+0x22e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <HAL_GPIO_Init+0x248>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d02b      	beq.n	8001382 <HAL_GPIO_Init+0x22a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_GPIO_Init+0x24c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_GPIO_Init+0x250>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <HAL_GPIO_Init+0x254>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <HAL_GPIO_Init+0x258>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_GPIO_Init+0x25c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x216>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <HAL_GPIO_Init+0x260>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x212>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_GPIO_Init+0x264>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x20e>
 8001362:	2309      	movs	r3, #9
 8001364:	e02d      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 8001366:	230a      	movs	r3, #10
 8001368:	e02b      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 800136a:	2308      	movs	r3, #8
 800136c:	e029      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 800136e:	2307      	movs	r3, #7
 8001370:	e027      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 8001372:	2306      	movs	r3, #6
 8001374:	e025      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 8001376:	2305      	movs	r3, #5
 8001378:	e023      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 800137a:	2304      	movs	r3, #4
 800137c:	e021      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 800137e:	2303      	movs	r3, #3
 8001380:	e01f      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 8001382:	2302      	movs	r3, #2
 8001384:	e01d      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 8001386:	2301      	movs	r3, #1
 8001388:	e01b      	b.n	80013c2 <HAL_GPIO_Init+0x26a>
 800138a:	bf00      	nop
 800138c:	58000080 	.word	0x58000080
 8001390:	58024400 	.word	0x58024400
 8001394:	58000400 	.word	0x58000400
 8001398:	58020000 	.word	0x58020000
 800139c:	58020400 	.word	0x58020400
 80013a0:	58020800 	.word	0x58020800
 80013a4:	58020c00 	.word	0x58020c00
 80013a8:	58021000 	.word	0x58021000
 80013ac:	58021400 	.word	0x58021400
 80013b0:	58021800 	.word	0x58021800
 80013b4:	58021c00 	.word	0x58021c00
 80013b8:	58022000 	.word	0x58022000
 80013bc:	58022400 	.word	0x58022400
 80013c0:	2300      	movs	r3, #0
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	f002 0203 	and.w	r2, r2, #3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d2:	4938      	ldr	r1, [pc, #224]	; (80014b4 <HAL_GPIO_Init+0x35c>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	3301      	adds	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f47f ae63 	bne.w	800116c <HAL_GPIO_Init+0x14>
  }
}
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
 80014aa:	3724      	adds	r7, #36	; 0x24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	58000400 	.word	0x58000400

080014b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d00a      	beq.n	80014e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d001      	beq.n	80014de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e040      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e03e      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014ea:	491f      	ldr	r1, [pc, #124]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014f2:	f7ff fd41 	bl	8000f78 <HAL_GetTick>
 80014f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014f8:	e009      	b.n	800150e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014fa:	f7ff fd3d 	bl	8000f78 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001508:	d901      	bls.n	800150e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e028      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800151a:	d1ee      	bne.n	80014fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b1e      	cmp	r3, #30
 8001520:	d008      	beq.n	8001534 <HAL_PWREx_ConfigSupply+0x7c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b2e      	cmp	r3, #46	; 0x2e
 8001526:	d005      	beq.n	8001534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b1d      	cmp	r3, #29
 800152c:	d002      	beq.n	8001534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b2d      	cmp	r3, #45	; 0x2d
 8001532:	d114      	bne.n	800155e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001534:	f7ff fd20 	bl	8000f78 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800153a:	e009      	b.n	8001550 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800153c:	f7ff fd1c 	bl	8000f78 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154a:	d901      	bls.n	8001550 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e007      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d1ee      	bne.n	800153c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024800 	.word	0x58024800

0800156c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 bc1f 	b.w	8001dbe <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80b3 	beq.w	80016f4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4b95      	ldr	r3, [pc, #596]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001598:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d007      	beq.n	80015b4 <HAL_RCC_OscConfig+0x48>
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	2b18      	cmp	r3, #24
 80015a8:	d112      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b8b      	ldr	r3, [pc, #556]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8098 	beq.w	80016f2 <HAL_RCC_OscConfig+0x186>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 8093 	bne.w	80016f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e3f6      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d106      	bne.n	80015e8 <HAL_RCC_OscConfig+0x7c>
 80015da:	4b82      	ldr	r3, [pc, #520]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a81      	ldr	r2, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e058      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d112      	bne.n	8001616 <HAL_RCC_OscConfig+0xaa>
 80015f0:	4b7c      	ldr	r3, [pc, #496]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a7b      	ldr	r2, [pc, #492]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a78      	ldr	r2, [pc, #480]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001602:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a75      	ldr	r2, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e041      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161e:	d112      	bne.n	8001646 <HAL_RCC_OscConfig+0xda>
 8001620:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6f      	ldr	r2, [pc, #444]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6c      	ldr	r2, [pc, #432]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001632:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a69      	ldr	r2, [pc, #420]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e029      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800164e:	d112      	bne.n	8001676 <HAL_RCC_OscConfig+0x10a>
 8001650:	4b64      	ldr	r3, [pc, #400]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a63      	ldr	r2, [pc, #396]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b61      	ldr	r3, [pc, #388]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a60      	ldr	r2, [pc, #384]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800166e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e011      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001694:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001698:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d013      	beq.n	80016ca <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fc69 	bl	8000f78 <HAL_GetTick>
 80016a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016aa:	f7ff fc65 	bl	8000f78 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e380      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016bc:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x13e>
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fc55 	bl	8000f78 <HAL_GetTick>
 80016ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d2:	f7ff fc51 	bl	8000f78 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e36c      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x166>
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 808c 	beq.w	800181a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800170a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x1bc>
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	2b18      	cmp	r3, #24
 800171c:	d137      	bne.n	800178e <HAL_RCC_OscConfig+0x222>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d132      	bne.n	800178e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_OscConfig+0x1d4>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e33e      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 0219 	bic.w	r2, r3, #25
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4925      	ldr	r1, [pc, #148]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fc11 	bl	8000f78 <HAL_GetTick>
 8001756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fc0d 	bl	8000f78 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e328      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	4917      	ldr	r1, [pc, #92]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178c:	e045      	b.n	800181a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d028      	beq.n	80017e8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0219 	bic.w	r2, r3, #25
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4910      	ldr	r1, [pc, #64]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fbe6 	bl	8000f78 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fbe2 	bl	8000f78 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e2fd      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	4901      	ldr	r1, [pc, #4]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e01a      	b.n	800181a <HAL_RCC_OscConfig+0x2ae>
 80017e4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e8:	4b97      	ldr	r3, [pc, #604]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a96      	ldr	r2, [pc, #600]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fbc0 	bl	8000f78 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fbbc 	bl	8000f78 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2d7      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d06a      	beq.n	80018fc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800182e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d007      	beq.n	800184c <HAL_RCC_OscConfig+0x2e0>
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b18      	cmp	r3, #24
 8001840:	d11b      	bne.n	800187a <HAL_RCC_OscConfig+0x30e>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d116      	bne.n	800187a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800184c:	4b7e      	ldr	r3, [pc, #504]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x2f8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b80      	cmp	r3, #128	; 0x80
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e2ac      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001864:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	4975      	ldr	r1, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001878:	e040      	b.n	80018fc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d023      	beq.n	80018ca <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001882:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a70      	ldr	r2, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fb73 	bl	8000f78 <HAL_GetTick>
 8001892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001896:	f7ff fb6f 	bl	8000f78 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e28a      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018a8:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018b4:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	4961      	ldr	r1, [pc, #388]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
 80018c8:	e018      	b.n	80018fc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ca:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a5e      	ldr	r2, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80018d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb4f 	bl	8000f78 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018de:	f7ff fb4b 	bl	8000f78 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e266      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d036      	beq.n	8001976 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d019      	beq.n	8001944 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fb2c 	bl	8000f78 <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fb28 	bl	8000f78 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e243      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x3b8>
 8001942:	e018      	b.n	8001976 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001948:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fb12 	bl	8000f78 <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fb0e 	bl	8000f78 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e229      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	2b00      	cmp	r3, #0
 8001980:	d036      	beq.n	80019f0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d019      	beq.n	80019be <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2e      	ldr	r2, [pc, #184]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001994:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001996:	f7ff faef 	bl	8000f78 <HAL_GetTick>
 800199a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199e:	f7ff faeb 	bl	8000f78 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e206      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x432>
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80019c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fad5 	bl	8000f78 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d2:	f7ff fad1 	bl	8000f78 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1ec      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80af 	beq.w	8001b5c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_RCC_OscConfig+0x4e0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <HAL_RCC_OscConfig+0x4e0>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff fab5 	bl	8000f78 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fab1 	bl	8000f78 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1cc      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_OscConfig+0x4e0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4e4>
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a02      	ldr	r2, [pc, #8]	; (8001a48 <HAL_RCC_OscConfig+0x4dc>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	e05b      	b.n	8001afe <HAL_RCC_OscConfig+0x592>
 8001a46:	bf00      	nop
 8001a48:	58024400 	.word	0x58024400
 8001a4c:	58024800 	.word	0x58024800
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d112      	bne.n	8001a7e <HAL_RCC_OscConfig+0x512>
 8001a58:	4b9d      	ldr	r3, [pc, #628]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a9c      	ldr	r2, [pc, #624]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
 8001a64:	4b9a      	ldr	r3, [pc, #616]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a99      	ldr	r2, [pc, #612]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a96      	ldr	r2, [pc, #600]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a76:	f023 0304 	bic.w	r3, r3, #4
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	e03f      	b.n	8001afe <HAL_RCC_OscConfig+0x592>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d112      	bne.n	8001aac <HAL_RCC_OscConfig+0x540>
 8001a86:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a91      	ldr	r2, [pc, #580]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a8e      	ldr	r2, [pc, #568]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	4a8b      	ldr	r2, [pc, #556]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aaa:	e028      	b.n	8001afe <HAL_RCC_OscConfig+0x592>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b85      	cmp	r3, #133	; 0x85
 8001ab2:	d112      	bne.n	8001ada <HAL_RCC_OscConfig+0x56e>
 8001ab4:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a85      	ldr	r2, [pc, #532]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac0:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a82      	ldr	r2, [pc, #520]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	e011      	b.n	8001afe <HAL_RCC_OscConfig+0x592>
 8001ada:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a7c      	ldr	r2, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a79      	ldr	r2, [pc, #484]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	4b77      	ldr	r3, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a76      	ldr	r2, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d015      	beq.n	8001b32 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff fa37 	bl	8000f78 <HAL_GetTick>
 8001b0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff fa33 	bl	8000f78 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e14c      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b24:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ee      	beq.n	8001b0e <HAL_RCC_OscConfig+0x5a2>
 8001b30:	e014      	b.n	8001b5c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff fa21 	bl	8000f78 <HAL_GetTick>
 8001b36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fa1d 	bl	8000f78 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e136      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b50:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 812b 	beq.w	8001dbc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b66:	4b5a      	ldr	r3, [pc, #360]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b6e:	2b18      	cmp	r3, #24
 8001b70:	f000 80bb 	beq.w	8001cea <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	f040 8095 	bne.w	8001ca8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a53      	ldr	r2, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f9f5 	bl	8000f78 <HAL_GetTick>
 8001b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff f9f1 	bl	8000f78 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e10c      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb0:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_OscConfig+0x768>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	4942      	ldr	r1, [pc, #264]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	628b      	str	r3, [r1, #40]	; 0x28
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001bfa:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	492d      	ldr	r1, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	f023 020c 	bic.w	r2, r3, #12
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4928      	ldr	r1, [pc, #160]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f023 0202 	bic.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4924      	ldr	r1, [pc, #144]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f97a 	bl	8000f78 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f976 	bl	8000f78 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e091      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x71c>
 8001ca6:	e089      	b.n	8001dbc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_RCC_OscConfig+0x764>)
 8001cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f960 	bl	8000f78 <HAL_GetTick>
 8001cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f95c 	bl	8000f78 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e077      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
 8001cce:	bf00      	nop
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	fffffc0c 	.word	0xfffffc0c
 8001cd8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x750>
 8001ce8:	e068      	b.n	8001dbc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d031      	beq.n	8001d62 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d12a      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d122      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d11a      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0a5b      	lsrs	r3, r3, #9
 8001d30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d111      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d108      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	0e1b      	lsrs	r3, r3, #24
 8001d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e02b      	b.n	8001dbe <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	08db      	lsrs	r3, r3, #3
 8001d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d70:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d01f      	beq.n	8001dbc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d88:	f7ff f8f6 	bl	8000f78 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d8e:	bf00      	nop
 8001d90:	f7ff f8f2 	bl	8000f78 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d0f9      	beq.n	8001d90 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_OscConfig+0x860>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_OscConfig+0x85c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3730      	adds	r7, #48	; 0x30
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	ffff0007 	.word	0xffff0007

08001dd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e19c      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b8a      	ldr	r3, [pc, #552]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b87      	ldr	r3, [pc, #540]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 020f 	bic.w	r2, r3, #15
 8001dfa:	4985      	ldr	r1, [pc, #532]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b83      	ldr	r3, [pc, #524]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e184      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d908      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e30:	4b78      	ldr	r3, [pc, #480]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	4975      	ldr	r1, [pc, #468]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	4b70      	ldr	r3, [pc, #448]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d908      	bls.n	8001e70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e5e:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	496a      	ldr	r1, [pc, #424]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	4b64      	ldr	r3, [pc, #400]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d908      	bls.n	8001e9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e8c:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	495e      	ldr	r1, [pc, #376]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d908      	bls.n	8001ecc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4953      	ldr	r1, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d908      	bls.n	8001efa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f023 020f 	bic.w	r2, r3, #15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4947      	ldr	r1, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d055      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f06:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4940      	ldr	r1, [pc, #256]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f20:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d121      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0f6      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d115      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0ea      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f50:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0de      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0d6      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f023 0207 	bic.w	r2, r3, #7
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4925      	ldr	r1, [pc, #148]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f82:	f7fe fff9 	bl	8000f78 <HAL_GetTick>
 8001f86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8a:	f7fe fff5 	bl	8000f78 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0be      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d1eb      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d010      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d208      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f023 020f 	bic.w	r2, r3, #15
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d214      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 020f 	bic.w	r2, r3, #15
 8001ff6:	4906      	ldr	r1, [pc, #24]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <HAL_RCC_ClockConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e086      	b.n	800211e <HAL_RCC_ClockConfig+0x34e>
 8002010:	52002000 	.word	0x52002000
 8002014:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002030:	429a      	cmp	r2, r3
 8002032:	d208      	bcs.n	8002046 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002034:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	4939      	ldr	r1, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 8002042:	4313      	orrs	r3, r2
 8002044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	4b34      	ldr	r3, [pc, #208]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205e:	429a      	cmp	r2, r3
 8002060:	d208      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	492e      	ldr	r1, [pc, #184]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 8002070:	4313      	orrs	r3, r2
 8002072:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	4b28      	ldr	r3, [pc, #160]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800208c:	429a      	cmp	r2, r3
 800208e:	d208      	bcs.n	80020a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d208      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4917      	ldr	r1, [pc, #92]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80020d0:	f000 f834 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	4912      	ldr	r1, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x35c>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x358>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_RCC_ClockConfig+0x35c>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x360>)
 8002106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x364>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x368>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fee6 	bl	8000ee4 <HAL_InitTick>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	58024400 	.word	0x58024400
 800212c:	08005ad0 	.word	0x08005ad0
 8002130:	24000004 	.word	0x24000004
 8002134:	24000000 	.word	0x24000000
 8002138:	24000008 	.word	0x24000008

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002142:	4bb3      	ldr	r3, [pc, #716]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800214a:	2b18      	cmp	r3, #24
 800214c:	f200 8155 	bhi.w	80023fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002150:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	080021bd 	.word	0x080021bd
 800215c:	080023fb 	.word	0x080023fb
 8002160:	080023fb 	.word	0x080023fb
 8002164:	080023fb 	.word	0x080023fb
 8002168:	080023fb 	.word	0x080023fb
 800216c:	080023fb 	.word	0x080023fb
 8002170:	080023fb 	.word	0x080023fb
 8002174:	080023fb 	.word	0x080023fb
 8002178:	080021e3 	.word	0x080021e3
 800217c:	080023fb 	.word	0x080023fb
 8002180:	080023fb 	.word	0x080023fb
 8002184:	080023fb 	.word	0x080023fb
 8002188:	080023fb 	.word	0x080023fb
 800218c:	080023fb 	.word	0x080023fb
 8002190:	080023fb 	.word	0x080023fb
 8002194:	080023fb 	.word	0x080023fb
 8002198:	080021e9 	.word	0x080021e9
 800219c:	080023fb 	.word	0x080023fb
 80021a0:	080023fb 	.word	0x080023fb
 80021a4:	080023fb 	.word	0x080023fb
 80021a8:	080023fb 	.word	0x080023fb
 80021ac:	080023fb 	.word	0x080023fb
 80021b0:	080023fb 	.word	0x080023fb
 80021b4:	080023fb 	.word	0x080023fb
 80021b8:	080021ef 	.word	0x080021ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021bc:	4b94      	ldr	r3, [pc, #592]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021c8:	4b91      	ldr	r3, [pc, #580]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	4a90      	ldr	r2, [pc, #576]	; (8002414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021da:	e111      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021dc:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021de:	61bb      	str	r3, [r7, #24]
      break;
 80021e0:	e10e      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021e2:	4b8d      	ldr	r3, [pc, #564]	; (8002418 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021e4:	61bb      	str	r3, [r7, #24]
      break;
 80021e6:	e10b      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021e8:	4b8c      	ldr	r3, [pc, #560]	; (800241c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021ea:	61bb      	str	r3, [r7, #24]
      break;
 80021ec:	e108      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021f8:	4b85      	ldr	r3, [pc, #532]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002202:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002204:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800220e:	4b80      	ldr	r3, [pc, #512]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	08db      	lsrs	r3, r3, #3
 8002214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002226:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80e1 	beq.w	80023f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b02      	cmp	r3, #2
 8002236:	f000 8083 	beq.w	8002340 <HAL_RCC_GetSysClockFreq+0x204>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b02      	cmp	r3, #2
 800223e:	f200 80a1 	bhi.w	8002384 <HAL_RCC_GetSysClockFreq+0x248>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x114>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d056      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800224e:	e099      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02d      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800225c:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	4a6b      	ldr	r2, [pc, #428]	; (8002414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002286:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002296:	ed97 6a02 	vldr	s12, [r7, #8]
 800229a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002420 <HAL_RCC_GetSysClockFreq+0x2e4>
 800229e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022b6:	e087      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002424 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022da:	ed97 6a02 	vldr	s12, [r7, #8]
 80022de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002420 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022fa:	e065      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002306:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002428 <HAL_RCC_GetSysClockFreq+0x2ec>
 800230a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800230e:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800231e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002322:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002420 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800232e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800233e:	e043      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800242c <HAL_RCC_GetSysClockFreq+0x2f0>
 800234e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002352:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002362:	ed97 6a02 	vldr	s12, [r7, #8]
 8002366:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002420 <HAL_RCC_GetSysClockFreq+0x2e4>
 800236a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800236e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002382:	e021      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002428 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002420 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	0a5b      	lsrs	r3, r3, #9
 80023ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d2:	3301      	adds	r3, #1
 80023d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80023e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ec:	ee17 3a90 	vmov	r3, s15
 80023f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023f2:	e005      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
      break;
 80023f8:	e002      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023fc:	61bb      	str	r3, [r7, #24]
      break;
 80023fe:	bf00      	nop
  }

  return sysclockfreq;
 8002400:	69bb      	ldr	r3, [r7, #24]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	58024400 	.word	0x58024400
 8002414:	03d09000 	.word	0x03d09000
 8002418:	003d0900 	.word	0x003d0900
 800241c:	007a1200 	.word	0x007a1200
 8002420:	46000000 	.word	0x46000000
 8002424:	4c742400 	.word	0x4c742400
 8002428:	4a742400 	.word	0x4a742400
 800242c:	4af42400 	.word	0x4af42400

08002430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002436:	f7ff fe81 	bl	800213c <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_GetHCLKFreq+0x50>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490f      	ldr	r1, [pc, #60]	; (8002484 <HAL_RCC_GetHCLKFreq+0x54>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_GetHCLKFreq+0x50>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_RCC_GetHCLKFreq+0x54>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_RCC_GetHCLKFreq+0x58>)
 800246c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <HAL_RCC_GetHCLKFreq+0x58>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	58024400 	.word	0x58024400
 8002484:	08005ad0 	.word	0x08005ad0
 8002488:	24000004 	.word	0x24000004
 800248c:	24000000 	.word	0x24000000

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002494:	f7ff ffcc 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4904      	ldr	r1, [pc, #16]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	58024400 	.word	0x58024400
 80024b8:	08005ad0 	.word	0x08005ad0

080024bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80024c0:	f7ff ffb6 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4904      	ldr	r1, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58024400 	.word	0x58024400
 80024e4:	08005ad0 	.word	0x08005ad0

080024e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ec:	b0c8      	sub	sp, #288	; 0x120
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800250c:	2500      	movs	r5, #0
 800250e:	ea54 0305 	orrs.w	r3, r4, r5
 8002512:	d049      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800251e:	d02f      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002520:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002524:	d828      	bhi.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800252a:	d01a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800252c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002530:	d822      	bhi.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253a:	d007      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800253c:	e01c      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800253e:	4ba7      	ldr	r3, [pc, #668]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	4aa6      	ldr	r2, [pc, #664]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800254a:	e01a      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800254c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002550:	3308      	adds	r3, #8
 8002552:	2102      	movs	r1, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fc43 	bl	8003de0 <RCCEx_PLL2_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002560:	e00f      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002566:	3328      	adds	r3, #40	; 0x28
 8002568:	2102      	movs	r1, #2
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fcea 	bl	8003f44 <RCCEx_PLL3_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002576:	e004      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800257e:	e000      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002582:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800258a:	4b94      	ldr	r3, [pc, #592]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002598:	4a90      	ldr	r2, [pc, #576]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259a:	430b      	orrs	r3, r1
 800259c:	6513      	str	r3, [r2, #80]	; 0x50
 800259e:	e003      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80025b4:	f04f 0900 	mov.w	r9, #0
 80025b8:	ea58 0309 	orrs.w	r3, r8, r9
 80025bc:	d047      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80025be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d82a      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80025c8:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	080025e5 	.word	0x080025e5
 80025d4:	080025f3 	.word	0x080025f3
 80025d8:	08002609 	.word	0x08002609
 80025dc:	08002627 	.word	0x08002627
 80025e0:	08002627 	.word	0x08002627
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e4:	4b7d      	ldr	r3, [pc, #500]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025f0:	e01a      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f6:	3308      	adds	r3, #8
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fbf0 	bl	8003de0 <RCCEx_PLL2_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002606:	e00f      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260c:	3328      	adds	r3, #40	; 0x28
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f001 fc97 	bl	8003f44 <RCCEx_PLL3_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800261c:	e004      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002624:	e000      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002634:	f023 0107 	bic.w	r1, r3, #7
 8002638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4a67      	ldr	r2, [pc, #412]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002640:	430b      	orrs	r3, r1
 8002642:	6513      	str	r3, [r2, #80]	; 0x50
 8002644:	e003      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002646:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800264a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800264e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002656:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800265a:	f04f 0b00 	mov.w	fp, #0
 800265e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002662:	d054      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800266e:	d036      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002670:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002674:	d82f      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267a:	d032      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800267c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002680:	d829      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002682:	2bc0      	cmp	r3, #192	; 0xc0
 8002684:	d02f      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002686:	2bc0      	cmp	r3, #192	; 0xc0
 8002688:	d825      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800268a:	2b80      	cmp	r3, #128	; 0x80
 800268c:	d018      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800268e:	2b80      	cmp	r3, #128	; 0x80
 8002690:	d821      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d007      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800269a:	e01c      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800269c:	4b4f      	ldr	r3, [pc, #316]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80026a8:	e01e      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 fb94 	bl	8003de0 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80026be:	e013      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c4:	3328      	adds	r3, #40	; 0x28
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fc3b 	bl	8003f44 <RCCEx_PLL3_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80026d4:	e008      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026dc:	e004      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80026de:	bf00      	nop
 80026e0:	e002      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80026e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80026f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	4a37      	ldr	r2, [pc, #220]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002700:	430b      	orrs	r3, r1
 8002702:	6513      	str	r3, [r2, #80]	; 0x50
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002706:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800270a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800270e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800271a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002724:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002728:	460b      	mov	r3, r1
 800272a:	4313      	orrs	r3, r2
 800272c:	d05c      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800272e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002734:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002738:	d03b      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800273a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800273e:	d834      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002744:	d037      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800274a:	d82e      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800274c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002750:	d033      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002752:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002756:	d828      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275c:	d01a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002762:	d822      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276c:	d007      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800276e:	e01c      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800277c:	e01e      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800277e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002782:	3308      	adds	r3, #8
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f001 fb2a 	bl	8003de0 <RCCEx_PLL2_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002792:	e013      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002798:	3328      	adds	r3, #40	; 0x28
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f001 fbd1 	bl	8003f44 <RCCEx_PLL3_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80027a8:	e008      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027b0:	e004      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80027b2:	bf00      	nop
 80027b4:	e002      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80027b6:	bf00      	nop
 80027b8:	e000      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80027ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80027cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	4a02      	ldr	r2, [pc, #8]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6513      	str	r3, [r2, #80]	; 0x50
 80027d8:	e006      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80027f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80027fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002802:	460b      	mov	r3, r1
 8002804:	4313      	orrs	r3, r2
 8002806:	d03a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	2b30      	cmp	r3, #48	; 0x30
 8002810:	d01f      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002812:	2b30      	cmp	r3, #48	; 0x30
 8002814:	d819      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002816:	2b20      	cmp	r3, #32
 8002818:	d00c      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800281a:	2b20      	cmp	r3, #32
 800281c:	d815      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002822:	2b10      	cmp	r3, #16
 8002824:	d111      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002826:	4bae      	ldr	r3, [pc, #696]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	4aad      	ldr	r2, [pc, #692]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002832:	e011      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002838:	3308      	adds	r3, #8
 800283a:	2102      	movs	r1, #2
 800283c:	4618      	mov	r0, r3
 800283e:	f001 facf 	bl	8003de0 <RCCEx_PLL2_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002848:	e006      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002850:	e002      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002860:	4b9f      	ldr	r3, [pc, #636]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4a9c      	ldr	r2, [pc, #624]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002870:	430b      	orrs	r3, r1
 8002872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002876:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800287a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800287e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800288a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002894:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002898:	460b      	mov	r3, r1
 800289a:	4313      	orrs	r3, r2
 800289c:	d051      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800289e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a8:	d035      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ae:	d82e      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80028b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028b4:	d031      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80028b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028ba:	d828      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80028bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c0:	d01a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c6:	d822      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d0:	d007      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80028d2:	e01c      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d4:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	4a81      	ldr	r2, [pc, #516]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028e0:	e01c      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e6:	3308      	adds	r3, #8
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fa78 	bl	8003de0 <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028f6:	e011      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028fc:	3328      	adds	r3, #40	; 0x28
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fb1f 	bl	8003f44 <RCCEx_PLL3_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800290c:	e006      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002914:	e002      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800291a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002924:	4b6e      	ldr	r3, [pc, #440]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800292c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002932:	4a6b      	ldr	r2, [pc, #428]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002934:	430b      	orrs	r3, r1
 8002936:	6513      	str	r3, [r2, #80]	; 0x50
 8002938:	e003      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800293e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800294e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002958:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800295c:	460b      	mov	r3, r1
 800295e:	4313      	orrs	r3, r2
 8002960:	d053      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800296c:	d033      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800296e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002972:	d82c      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002974:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002978:	d02f      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800297a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800297e:	d826      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002980:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002984:	d02b      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002986:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800298a:	d820      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800298c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002990:	d012      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002992:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002996:	d81a      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d022      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a0:	d115      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a6:	3308      	adds	r3, #8
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fa18 	bl	8003de0 <RCCEx_PLL2_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029b6:	e015      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029bc:	3328      	adds	r3, #40	; 0x28
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fabf 	bl	8003f44 <RCCEx_PLL3_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029cc:	e00a      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029d6:	bf00      	nop
 80029d8:	e004      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029ec:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80029f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fa:	4a39      	ldr	r2, [pc, #228]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6513      	str	r3, [r2, #80]	; 0x50
 8002a00:	e003      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4313      	orrs	r3, r2
 8002a28:	d060      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a32:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002a36:	d039      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002a38:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002a3c:	d832      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a42:	d035      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a48:	d82c      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4e:	d031      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d826      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a5a:	d02d      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002a5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a60:	d820      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a66:	d012      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6c:	d81a      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d024      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a76:	d115      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 f9ad 	bl	8003de0 <RCCEx_PLL2_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a8c:	e017      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a92:	3328      	adds	r3, #40	; 0x28
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fa54 	bl	8003f44 <RCCEx_PLL3_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002aa2:	e00c      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002aaa:	e008      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002aac:	bf00      	nop
 8002aae:	e006      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ab0:	bf00      	nop
 8002ab2:	e004      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ab4:	bf00      	nop
 8002ab6:	e002      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002abe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ad6:	4a02      	ldr	r2, [pc, #8]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6593      	str	r3, [r2, #88]	; 0x58
 8002adc:	e006      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002ade:	bf00      	nop
 8002ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ae8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b06:	460b      	mov	r3, r1
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	d037      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b16:	d00e      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1c:	d816      	bhi.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d018      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b26:	d111      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b28:	4bc4      	ldr	r3, [pc, #784]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	4ac3      	ldr	r2, [pc, #780]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b34:	e00f      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f94e 	bl	8003de0 <RCCEx_PLL2_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b4a:	e004      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b5e:	4bb7      	ldr	r3, [pc, #732]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6c:	4ab3      	ldr	r2, [pc, #716]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	6513      	str	r3, [r2, #80]	; 0x50
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	d039      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d81c      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002be9 	.word	0x08002be9
 8002bb0:	08002bbd 	.word	0x08002bbd
 8002bb4:	08002bcb 	.word	0x08002bcb
 8002bb8:	08002be9 	.word	0x08002be9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbc:	4b9f      	ldr	r3, [pc, #636]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	4a9e      	ldr	r2, [pc, #632]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bc8:	e00f      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bce:	3308      	adds	r3, #8
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f904 	bl	8003de0 <RCCEx_PLL2_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bde:	e004      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002be6:	e000      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bf2:	4b92      	ldr	r3, [pc, #584]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f023 0103 	bic.w	r1, r3, #3
 8002bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	4a8e      	ldr	r2, [pc, #568]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c02:	430b      	orrs	r3, r1
 8002c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c06:	e003      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f000 8099 	beq.w	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c32:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a82      	ldr	r2, [pc, #520]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe f99b 	bl	8000f78 <HAL_GetTick>
 8002c42:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c46:	e00b      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe f996 	bl	8000f78 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d903      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c5e:	e005      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c60:	4b77      	ldr	r3, [pc, #476]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ed      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d173      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c74:	4b71      	ldr	r3, [pc, #452]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c80:	4053      	eors	r3, r2
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c8a:	4b6c      	ldr	r3, [pc, #432]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c96:	4b69      	ldr	r3, [pc, #420]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a68      	ldr	r2, [pc, #416]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca2:	4b66      	ldr	r3, [pc, #408]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a65      	ldr	r2, [pc, #404]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cae:	4a63      	ldr	r2, [pc, #396]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	d118      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f958 	bl	8000f78 <HAL_GetTick>
 8002cc8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ccc:	e00d      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe f953 	bl	8000f78 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002cd8:	1ad2      	subs	r2, r2, r3
 8002cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d903      	bls.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cea:	4b54      	ldr	r3, [pc, #336]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0eb      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d129      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d0e:	d10e      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002d10:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d20:	091a      	lsrs	r2, r3, #4
 8002d22:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	4a45      	ldr	r2, [pc, #276]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6113      	str	r3, [r2, #16]
 8002d2c:	e005      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002d2e:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	4a42      	ldr	r2, [pc, #264]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d38:	6113      	str	r3, [r2, #16]
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	e008      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002d5a:	e003      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f002 0301 	and.w	r3, r2, #1
 8002d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f000 8090 	beq.w	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8e:	2b28      	cmp	r3, #40	; 0x28
 8002d90:	d870      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002e7d 	.word	0x08002e7d
 8002d9c:	08002e75 	.word	0x08002e75
 8002da0:	08002e75 	.word	0x08002e75
 8002da4:	08002e75 	.word	0x08002e75
 8002da8:	08002e75 	.word	0x08002e75
 8002dac:	08002e75 	.word	0x08002e75
 8002db0:	08002e75 	.word	0x08002e75
 8002db4:	08002e75 	.word	0x08002e75
 8002db8:	08002e49 	.word	0x08002e49
 8002dbc:	08002e75 	.word	0x08002e75
 8002dc0:	08002e75 	.word	0x08002e75
 8002dc4:	08002e75 	.word	0x08002e75
 8002dc8:	08002e75 	.word	0x08002e75
 8002dcc:	08002e75 	.word	0x08002e75
 8002dd0:	08002e75 	.word	0x08002e75
 8002dd4:	08002e75 	.word	0x08002e75
 8002dd8:	08002e5f 	.word	0x08002e5f
 8002ddc:	08002e75 	.word	0x08002e75
 8002de0:	08002e75 	.word	0x08002e75
 8002de4:	08002e75 	.word	0x08002e75
 8002de8:	08002e75 	.word	0x08002e75
 8002dec:	08002e75 	.word	0x08002e75
 8002df0:	08002e75 	.word	0x08002e75
 8002df4:	08002e75 	.word	0x08002e75
 8002df8:	08002e7d 	.word	0x08002e7d
 8002dfc:	08002e75 	.word	0x08002e75
 8002e00:	08002e75 	.word	0x08002e75
 8002e04:	08002e75 	.word	0x08002e75
 8002e08:	08002e75 	.word	0x08002e75
 8002e0c:	08002e75 	.word	0x08002e75
 8002e10:	08002e75 	.word	0x08002e75
 8002e14:	08002e75 	.word	0x08002e75
 8002e18:	08002e7d 	.word	0x08002e7d
 8002e1c:	08002e75 	.word	0x08002e75
 8002e20:	08002e75 	.word	0x08002e75
 8002e24:	08002e75 	.word	0x08002e75
 8002e28:	08002e75 	.word	0x08002e75
 8002e2c:	08002e75 	.word	0x08002e75
 8002e30:	08002e75 	.word	0x08002e75
 8002e34:	08002e75 	.word	0x08002e75
 8002e38:	08002e7d 	.word	0x08002e7d
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	58024800 	.word	0x58024800
 8002e44:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 ffc5 	bl	8003de0 <RCCEx_PLL2_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e5c:	e00f      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e62:	3328      	adds	r3, #40	; 0x28
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 f86c 	bl	8003f44 <RCCEx_PLL3_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e72:	e004      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e86:	4bc0      	ldr	r3, [pc, #768]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e96:	4abc      	ldr	r2, [pc, #752]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6553      	str	r3, [r2, #84]	; 0x54
 8002e9c:	e003      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ea2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f002 0302 	and.w	r3, r2, #2
 8002eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ebc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	d043      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d824      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002f25 	.word	0x08002f25
 8002edc:	08002ef1 	.word	0x08002ef1
 8002ee0:	08002f07 	.word	0x08002f07
 8002ee4:	08002f25 	.word	0x08002f25
 8002ee8:	08002f25 	.word	0x08002f25
 8002eec:	08002f25 	.word	0x08002f25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 ff71 	bl	8003de0 <RCCEx_PLL2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f04:	e00f      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f0a:	3328      	adds	r3, #40	; 0x28
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f818 	bl	8003f44 <RCCEx_PLL3_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f1a:	e004      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f2e:	4b96      	ldr	r3, [pc, #600]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f023 0107 	bic.w	r1, r3, #7
 8002f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3e:	4a92      	ldr	r2, [pc, #584]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6553      	str	r3, [r2, #84]	; 0x54
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f002 0304 	and.w	r3, r2, #4
 8002f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	d043      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d824      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002f7a:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002fcd 	.word	0x08002fcd
 8002f84:	08002f99 	.word	0x08002f99
 8002f88:	08002faf 	.word	0x08002faf
 8002f8c:	08002fcd 	.word	0x08002fcd
 8002f90:	08002fcd 	.word	0x08002fcd
 8002f94:	08002fcd 	.word	0x08002fcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 ff1d 	bl	8003de0 <RCCEx_PLL2_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fac:	e00f      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fb2:	3328      	adds	r3, #40	; 0x28
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 ffc4 	bl	8003f44 <RCCEx_PLL3_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fc2:	e004      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fca:	e000      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fd6:	4b6c      	ldr	r3, [pc, #432]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f023 0107 	bic.w	r1, r3, #7
 8002fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fe6:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6593      	str	r3, [r2, #88]	; 0x58
 8002fec:	e003      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ff2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f002 0320 	and.w	r3, r2, #32
 8003002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800300c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003010:	460b      	mov	r3, r1
 8003012:	4313      	orrs	r3, r2
 8003014:	d055      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800301a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003022:	d033      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003028:	d82c      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d02f      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d826      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800303a:	d02b      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800303c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003040:	d820      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003046:	d012      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304c:	d81a      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d022      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003056:	d115      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305c:	3308      	adds	r3, #8
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f000 febd 	bl	8003de0 <RCCEx_PLL2_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800306c:	e015      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	3328      	adds	r3, #40	; 0x28
 8003074:	2102      	movs	r1, #2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 ff64 	bl	8003f44 <RCCEx_PLL3_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003082:	e00a      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800308a:	e006      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800308c:	bf00      	nop
 800308e:	e004      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003090:	bf00      	nop
 8003092:	e002      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80030aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b2:	4a35      	ldr	r2, [pc, #212]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6553      	str	r3, [r2, #84]	; 0x54
 80030b8:	e003      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80030ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80030dc:	460b      	mov	r3, r1
 80030de:	4313      	orrs	r3, r2
 80030e0:	d058      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80030e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030ee:	d033      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80030f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030f4:	d82c      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	d02f      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d826      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003106:	d02b      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800310c:	d820      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800310e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003112:	d012      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003118:	d81a      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d022      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	d115      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003128:	3308      	adds	r3, #8
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fe57 	bl	8003de0 <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003138:	e015      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800313a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800313e:	3328      	adds	r3, #40	; 0x28
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fefe 	bl	8003f44 <RCCEx_PLL3_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800314e:	e00a      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003156:	e006      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003158:	bf00      	nop
 800315a:	e004      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800317e:	4a02      	ldr	r2, [pc, #8]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003180:	430b      	orrs	r3, r1
 8003182:	6593      	str	r3, [r2, #88]	; 0x58
 8003184:	e006      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003186:	bf00      	nop
 8003188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003190:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80031a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d055      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031c0:	d033      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80031c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031c6:	d82c      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031cc:	d02f      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80031ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d2:	d826      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031d8:	d02b      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80031da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031de:	d820      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e4:	d012      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80031e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ea:	d81a      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d022      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f4:	d115      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fa:	3308      	adds	r3, #8
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fdee 	bl	8003de0 <RCCEx_PLL2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800320a:	e015      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800320c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003210:	3328      	adds	r3, #40	; 0x28
 8003212:	2102      	movs	r1, #2
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fe95 	bl	8003f44 <RCCEx_PLL3_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003220:	e00a      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003238:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003240:	4ba1      	ldr	r3, [pc, #644]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003250:	4a9d      	ldr	r2, [pc, #628]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003252:	430b      	orrs	r3, r1
 8003254:	6593      	str	r3, [r2, #88]	; 0x58
 8003256:	e003      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f002 0308 	and.w	r3, r2, #8
 800326c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003276:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800327a:	460b      	mov	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	d01e      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800328e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003292:	3328      	adds	r3, #40	; 0x28
 8003294:	2102      	movs	r1, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fe54 	bl	8003f44 <RCCEx_PLL3_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032a8:	4b87      	ldr	r3, [pc, #540]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	4a83      	ldr	r2, [pc, #524]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f002 0310 	and.w	r3, r2, #16
 80032ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80032d8:	460b      	mov	r3, r1
 80032da:	4313      	orrs	r3, r2
 80032dc:	d01e      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80032de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d10c      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f0:	3328      	adds	r3, #40	; 0x28
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fe25 	bl	8003f44 <RCCEx_PLL3_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003306:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003316:	4a6c      	ldr	r2, [pc, #432]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003318:	430b      	orrs	r3, r1
 800331a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003332:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003336:	460b      	mov	r3, r1
 8003338:	4313      	orrs	r3, r2
 800333a:	d03e      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800333c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003340:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003348:	d022      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800334a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800334e:	d81b      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d00b      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800335a:	e015      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800335c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003360:	3308      	adds	r3, #8
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fd3b 	bl	8003de0 <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003370:	e00f      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003376:	3328      	adds	r3, #40	; 0x28
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fde2 	bl	8003f44 <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003386:	e004      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003392:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10b      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339a:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80033a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033aa:	4a47      	ldr	r2, [pc, #284]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	e003      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80033c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c8:	2300      	movs	r3, #0
 80033ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80033d0:	460b      	mov	r3, r1
 80033d2:	4313      	orrs	r3, r2
 80033d4:	d03b      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80033d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e2:	d01f      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80033e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e8:	d818      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ee:	d003      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80033f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f4:	d007      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80033f6:	e011      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003404:	e00f      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800340a:	3328      	adds	r3, #40	; 0x28
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fd98 	bl	8003f44 <RCCEx_PLL3_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800341a:	e004      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003422:	e000      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003426:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342e:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003440:	430b      	orrs	r3, r1
 8003442:	6553      	str	r3, [r2, #84]	; 0x54
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800344a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800344e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800345a:	673b      	str	r3, [r7, #112]	; 0x70
 800345c:	2300      	movs	r3, #0
 800345e:	677b      	str	r3, [r7, #116]	; 0x74
 8003460:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003464:	460b      	mov	r3, r1
 8003466:	4313      	orrs	r3, r2
 8003468:	d034      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800346a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d007      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800347a:	e011      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003488:	e00e      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800348a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348e:	3308      	adds	r3, #8
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fca4 	bl	8003de0 <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800349e:	e003      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	4a02      	ldr	r2, [pc, #8]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80034e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034e2:	2300      	movs	r3, #0
 80034e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80034ea:	460b      	mov	r3, r1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	d00c      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f4:	3328      	adds	r3, #40	; 0x28
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fd23 	bl	8003f44 <RCCEx_PLL3_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003516:	663b      	str	r3, [r7, #96]	; 0x60
 8003518:	2300      	movs	r3, #0
 800351a:	667b      	str	r3, [r7, #100]	; 0x64
 800351c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d038      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003532:	d018      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003538:	d811      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800353a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353e:	d014      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003544:	d80b      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d011      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d106      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003550:	4bc3      	ldr	r3, [pc, #780]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4ac2      	ldr	r2, [pc, #776]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800355c:	e008      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003564:	e004      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800356e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003570:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003578:	4bb9      	ldr	r3, [pc, #740]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	4ab5      	ldr	r2, [pc, #724]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800358a:	430b      	orrs	r3, r1
 800358c:	6553      	str	r3, [r2, #84]	; 0x54
 800358e:	e003      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003594:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80035a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80035a6:	2300      	movs	r3, #0
 80035a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80035ae:	460b      	mov	r3, r1
 80035b0:	4313      	orrs	r3, r2
 80035b2:	d009      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035b4:	4baa      	ldr	r3, [pc, #680]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80035bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c2:	4aa7      	ldr	r2, [pc, #668]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80035d4:	653b      	str	r3, [r7, #80]	; 0x50
 80035d6:	2300      	movs	r3, #0
 80035d8:	657b      	str	r3, [r7, #84]	; 0x54
 80035da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80035de:	460b      	mov	r3, r1
 80035e0:	4313      	orrs	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035e4:	4b9e      	ldr	r3, [pc, #632]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80035ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a9b      	ldr	r2, [pc, #620]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003604:	64bb      	str	r3, [r7, #72]	; 0x48
 8003606:	2300      	movs	r3, #0
 8003608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800360a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003614:	4b92      	ldr	r3, [pc, #584]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800361c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	4a8f      	ldr	r2, [pc, #572]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003624:	430b      	orrs	r3, r1
 8003626:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003634:	643b      	str	r3, [r7, #64]	; 0x40
 8003636:	2300      	movs	r3, #0
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
 800363a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	d00e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003644:	4b86      	ldr	r3, [pc, #536]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	4a85      	ldr	r2, [pc, #532]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800364a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800364e:	6113      	str	r3, [r2, #16]
 8003650:	4b83      	ldr	r3, [pc, #524]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003652:	6919      	ldr	r1, [r3, #16]
 8003654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003658:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800365c:	4a80      	ldr	r2, [pc, #512]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800365e:	430b      	orrs	r3, r1
 8003660:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003670:	2300      	movs	r3, #0
 8003672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003674:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003678:	460b      	mov	r3, r1
 800367a:	4313      	orrs	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800367e:	4b78      	ldr	r3, [pc, #480]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	4a74      	ldr	r2, [pc, #464]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800368e:	430b      	orrs	r3, r1
 8003690:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800369e:	633b      	str	r3, [r7, #48]	; 0x30
 80036a0:	2300      	movs	r3, #0
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
 80036a4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036be:	4a68      	ldr	r2, [pc, #416]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	2100      	movs	r1, #0
 80036ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80036da:	460b      	mov	r3, r1
 80036dc:	4313      	orrs	r3, r2
 80036de:	d011      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e4:	3308      	adds	r3, #8
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fb79 	bl	8003de0 <RCCEx_PLL2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003700:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	2100      	movs	r1, #0
 800370e:	6239      	str	r1, [r7, #32]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
 8003716:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800371a:	460b      	mov	r3, r1
 800371c:	4313      	orrs	r3, r2
 800371e:	d011      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003724:	3308      	adds	r3, #8
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fb59 	bl	8003de0 <RCCEx_PLL2_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003734:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003740:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	2100      	movs	r1, #0
 800374e:	61b9      	str	r1, [r7, #24]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d011      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003764:	3308      	adds	r3, #8
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fb39 	bl	8003de0 <RCCEx_PLL2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003780:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	2100      	movs	r1, #0
 800378e:	6139      	str	r1, [r7, #16]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800379a:	460b      	mov	r3, r1
 800379c:	4313      	orrs	r3, r2
 800379e:	d011      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a4:	3328      	adds	r3, #40	; 0x28
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fbcb 	bl	8003f44 <RCCEx_PLL3_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80037b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	2100      	movs	r1, #0
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037da:	460b      	mov	r3, r1
 80037dc:	4313      	orrs	r3, r2
 80037de:	d011      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e4:	3328      	adds	r3, #40	; 0x28
 80037e6:	2101      	movs	r1, #1
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fbab 	bl	8003f44 <RCCEx_PLL3_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003800:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	2100      	movs	r1, #0
 800380e:	6039      	str	r1, [r7, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e9d7 1200 	ldrd	r1, r2, [r7]
 800381a:	460b      	mov	r3, r1
 800381c:	4313      	orrs	r3, r2
 800381e:	d011      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003824:	3328      	adds	r3, #40	; 0x28
 8003826:	2102      	movs	r1, #2
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fb8b 	bl	8003f44 <RCCEx_PLL3_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003840:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003844:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
}
 8003852:	4618      	mov	r0, r3
 8003854:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003858:	46bd      	mov	sp, r7
 800385a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385e:	bf00      	nop
 8003860:	58024400 	.word	0x58024400

08003864 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003868:	f7fe fde2 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	58024400 	.word	0x58024400
 800388c:	08005ad0 	.word	0x08005ad0

08003890 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003898:	4ba1      	ldr	r3, [pc, #644]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038a2:	4b9f      	ldr	r3, [pc, #636]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	0b1b      	lsrs	r3, r3, #12
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038ae:	4b9c      	ldr	r3, [pc, #624]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038ba:	4b99      	ldr	r3, [pc, #612]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	08db      	lsrs	r3, r3, #3
 80038c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8111 	beq.w	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f000 8083 	beq.w	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f200 80a1 	bhi.w	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d056      	beq.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038fa:	e099      	b.n	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038fc:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02d      	beq.n	8003964 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003908:	4b85      	ldr	r3, [pc, #532]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	4a84      	ldr	r2, [pc, #528]	; (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b7b      	ldr	r3, [pc, #492]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a03 	vldr	s12, [r7, #12]
 8003946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003962:	e087      	b.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b6a      	ldr	r3, [pc, #424]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a03 	vldr	s12, [r7, #12]
 800398a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039a6:	e065      	b.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ea:	e043      	b.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a2e:	e021      	b.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	0a5b      	lsrs	r3, r3, #9
 8003a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9a:	ee17 2a90 	vmov	r2, s15
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	0c1b      	lsrs	r3, r3, #16
 8003aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aac:	ee07 3a90 	vmov	s15, r3
 8003ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac8:	ee17 2a90 	vmov	r2, s15
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	0e1b      	lsrs	r3, r3, #24
 8003ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af6:	ee17 2a90 	vmov	r2, s15
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003afe:	e008      	b.n	8003b12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	bf00      	nop
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	03d09000 	.word	0x03d09000
 8003b28:	46000000 	.word	0x46000000
 8003b2c:	4c742400 	.word	0x4c742400
 8003b30:	4a742400 	.word	0x4a742400
 8003b34:	4af42400 	.word	0x4af42400

08003b38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b40:	4ba1      	ldr	r3, [pc, #644]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b4a:	4b9f      	ldr	r3, [pc, #636]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	0d1b      	lsrs	r3, r3, #20
 8003b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b56:	4b9c      	ldr	r3, [pc, #624]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b62:	4b99      	ldr	r3, [pc, #612]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8111 	beq.w	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f000 8083 	beq.w	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	f200 80a1 	bhi.w	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d056      	beq.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ba2:	e099      	b.n	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba4:	4b88      	ldr	r3, [pc, #544]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d02d      	beq.n	8003c0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bb0:	4b85      	ldr	r3, [pc, #532]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	08db      	lsrs	r3, r3, #3
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	4a84      	ldr	r2, [pc, #528]	; (8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bda:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c0a:	e087      	b.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c4e:	e065      	b.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c92:	e043      	b.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd6:	e021      	b.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	0a5b      	lsrs	r3, r3, #9
 8003d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d42:	ee17 2a90 	vmov	r2, s15
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d70:	ee17 2a90 	vmov	r2, s15
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	0e1b      	lsrs	r3, r3, #24
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 2a90 	vmov	r2, s15
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003da6:	e008      	b.n	8003dba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	3724      	adds	r7, #36	; 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	03d09000 	.word	0x03d09000
 8003dd0:	46000000 	.word	0x46000000
 8003dd4:	4c742400 	.word	0x4c742400
 8003dd8:	4a742400 	.word	0x4a742400
 8003ddc:	4af42400 	.word	0x4af42400

08003de0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dee:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d101      	bne.n	8003dfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e099      	b.n	8003f32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dfe:	4b4f      	ldr	r3, [pc, #316]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4e      	ldr	r2, [pc, #312]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fd f8b5 	bl	8000f78 <HAL_GetTick>
 8003e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e10:	e008      	b.n	8003e24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e12:	f7fd f8b1 	bl	8000f78 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e086      	b.n	8003f32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e30:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	493f      	ldr	r1, [pc, #252]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	628b      	str	r3, [r1, #40]	; 0x28
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	025b      	lsls	r3, r3, #9
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e74:	4931      	ldr	r1, [pc, #196]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e7a:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	492d      	ldr	r1, [pc, #180]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f023 0220 	bic.w	r2, r3, #32
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	4928      	ldr	r1, [pc, #160]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e9e:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eae:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <RCCEx_PLL2_Config+0x160>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	69d2      	ldr	r2, [r2, #28]
 8003eb6:	00d2      	lsls	r2, r2, #3
 8003eb8:	4920      	ldr	r1, [pc, #128]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ebe:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ec4:	f043 0310 	orr.w	r3, r3, #16
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003edc:	e00f      	b.n	8003efe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ef0:	e005      	b.n	8003efe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003efc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0a:	f7fd f835 	bl	8000f78 <HAL_GetTick>
 8003f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f10:	e008      	b.n	8003f24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f12:	f7fd f831 	bl	8000f78 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e006      	b.n	8003f32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <RCCEx_PLL2_Config+0x15c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	ffff0007 	.word	0xffff0007

08003f44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f52:	4b53      	ldr	r3, [pc, #332]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d101      	bne.n	8003f62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e099      	b.n	8004096 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f62:	4b4f      	ldr	r3, [pc, #316]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4e      	ldr	r2, [pc, #312]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fd f803 	bl	8000f78 <HAL_GetTick>
 8003f72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f74:	e008      	b.n	8003f88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f76:	f7fc ffff 	bl	8000f78 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e086      	b.n	8004096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f88:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f94:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	051b      	lsls	r3, r3, #20
 8003fa2:	493f      	ldr	r1, [pc, #252]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	025b      	lsls	r3, r3, #9
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fd8:	4931      	ldr	r1, [pc, #196]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	492d      	ldr	r1, [pc, #180]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ff0:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	4928      	ldr	r1, [pc, #160]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004002:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <RCCEx_PLL3_Config+0x160>)
 8004014:	4013      	ands	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	69d2      	ldr	r2, [r2, #28]
 800401a:	00d2      	lsls	r2, r2, #3
 800401c:	4920      	ldr	r1, [pc, #128]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004022:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 800403a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004040:	e00f      	b.n	8004062 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 800404e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004054:	e005      	b.n	8004062 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	4a11      	ldr	r2, [pc, #68]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 800405c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fc ff83 	bl	8000f78 <HAL_GetTick>
 8004072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004074:	e008      	b.n	8004088 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004076:	f7fc ff7f 	bl	8000f78 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e006      	b.n	8004096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <RCCEx_PLL3_Config+0x15c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	58024400 	.word	0x58024400
 80040a4:	ffff0007 	.word	0xffff0007

080040a8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e04a      	b.n	8004150 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fc fdd5 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2224      	movs	r2, #36	; 0x24
 80040d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8c2 	bl	8004274 <UART_SetConfig>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e02a      	b.n	8004150 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 ff22 	bl	8004f4c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004126:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 ffa1 	bl	8005090 <UART_CheckIdleState>
 800414e:	4603      	mov	r3, r0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	2b20      	cmp	r3, #32
 8004170:	d17b      	bne.n	800426a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_UART_Transmit+0x26>
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e074      	b.n	800426c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2221      	movs	r2, #33	; 0x21
 800418e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004192:	f7fc fef1 	bl	8000f78 <HAL_GetTick>
 8004196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d108      	bne.n	80041c4 <HAL_UART_Transmit+0x6c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e003      	b.n	80041cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041cc:	e030      	b.n	8004230 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f001 f803 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e03d      	b.n	800426c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004204:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	3302      	adds	r3, #2
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e007      	b.n	800421e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3301      	adds	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1c8      	bne.n	80041ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2200      	movs	r2, #0
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 ffcc 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e006      	b.n	800426c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b092      	sub	sp, #72	; 0x48
 800427a:	af00      	add	r7, sp, #0
 800427c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	431a      	orrs	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	431a      	orrs	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4313      	orrs	r3, r2
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4bbe      	ldr	r3, [pc, #760]	; (800459c <UART_SetConfig+0x328>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4ab3      	ldr	r2, [pc, #716]	; (80045a0 <UART_SetConfig+0x32c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042dc:	4313      	orrs	r3, r2
 80042de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	4baf      	ldr	r3, [pc, #700]	; (80045a4 <UART_SetConfig+0x330>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f023 010f 	bic.w	r1, r3, #15
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4aa6      	ldr	r2, [pc, #664]	; (80045a8 <UART_SetConfig+0x334>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d177      	bne.n	8004404 <UART_SetConfig+0x190>
 8004314:	4ba5      	ldr	r3, [pc, #660]	; (80045ac <UART_SetConfig+0x338>)
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800431c:	2b28      	cmp	r3, #40	; 0x28
 800431e:	d86d      	bhi.n	80043fc <UART_SetConfig+0x188>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0xb4>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	080043cd 	.word	0x080043cd
 800432c:	080043fd 	.word	0x080043fd
 8004330:	080043fd 	.word	0x080043fd
 8004334:	080043fd 	.word	0x080043fd
 8004338:	080043fd 	.word	0x080043fd
 800433c:	080043fd 	.word	0x080043fd
 8004340:	080043fd 	.word	0x080043fd
 8004344:	080043fd 	.word	0x080043fd
 8004348:	080043d5 	.word	0x080043d5
 800434c:	080043fd 	.word	0x080043fd
 8004350:	080043fd 	.word	0x080043fd
 8004354:	080043fd 	.word	0x080043fd
 8004358:	080043fd 	.word	0x080043fd
 800435c:	080043fd 	.word	0x080043fd
 8004360:	080043fd 	.word	0x080043fd
 8004364:	080043fd 	.word	0x080043fd
 8004368:	080043dd 	.word	0x080043dd
 800436c:	080043fd 	.word	0x080043fd
 8004370:	080043fd 	.word	0x080043fd
 8004374:	080043fd 	.word	0x080043fd
 8004378:	080043fd 	.word	0x080043fd
 800437c:	080043fd 	.word	0x080043fd
 8004380:	080043fd 	.word	0x080043fd
 8004384:	080043fd 	.word	0x080043fd
 8004388:	080043e5 	.word	0x080043e5
 800438c:	080043fd 	.word	0x080043fd
 8004390:	080043fd 	.word	0x080043fd
 8004394:	080043fd 	.word	0x080043fd
 8004398:	080043fd 	.word	0x080043fd
 800439c:	080043fd 	.word	0x080043fd
 80043a0:	080043fd 	.word	0x080043fd
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	080043ed 	.word	0x080043ed
 80043ac:	080043fd 	.word	0x080043fd
 80043b0:	080043fd 	.word	0x080043fd
 80043b4:	080043fd 	.word	0x080043fd
 80043b8:	080043fd 	.word	0x080043fd
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	080043fd 	.word	0x080043fd
 80043c4:	080043fd 	.word	0x080043fd
 80043c8:	080043f5 	.word	0x080043f5
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e326      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80043d4:	2304      	movs	r3, #4
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e322      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80043dc:	2308      	movs	r3, #8
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e31e      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80043e4:	2310      	movs	r3, #16
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e31a      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80043ec:	2320      	movs	r3, #32
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f2:	e316      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80043f4:	2340      	movs	r3, #64	; 0x40
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fa:	e312      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004402:	e30e      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a69      	ldr	r2, [pc, #420]	; (80045b0 <UART_SetConfig+0x33c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d130      	bne.n	8004470 <UART_SetConfig+0x1fc>
 800440e:	4b67      	ldr	r3, [pc, #412]	; (80045ac <UART_SetConfig+0x338>)
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	2b05      	cmp	r3, #5
 8004418:	d826      	bhi.n	8004468 <UART_SetConfig+0x1f4>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x1ac>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004439 	.word	0x08004439
 8004424:	08004441 	.word	0x08004441
 8004428:	08004449 	.word	0x08004449
 800442c:	08004451 	.word	0x08004451
 8004430:	08004459 	.word	0x08004459
 8004434:	08004461 	.word	0x08004461
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e2f0      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004440:	2304      	movs	r3, #4
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004446:	e2ec      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004448:	2308      	movs	r3, #8
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444e:	e2e8      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004450:	2310      	movs	r3, #16
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004456:	e2e4      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004458:	2320      	movs	r3, #32
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445e:	e2e0      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004460:	2340      	movs	r3, #64	; 0x40
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004466:	e2dc      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446e:	e2d8      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a4f      	ldr	r2, [pc, #316]	; (80045b4 <UART_SetConfig+0x340>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d130      	bne.n	80044dc <UART_SetConfig+0x268>
 800447a:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <UART_SetConfig+0x338>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	2b05      	cmp	r3, #5
 8004484:	d826      	bhi.n	80044d4 <UART_SetConfig+0x260>
 8004486:	a201      	add	r2, pc, #4	; (adr r2, 800448c <UART_SetConfig+0x218>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	080044a5 	.word	0x080044a5
 8004490:	080044ad 	.word	0x080044ad
 8004494:	080044b5 	.word	0x080044b5
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044cd 	.word	0x080044cd
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044aa:	e2ba      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80044ac:	2304      	movs	r3, #4
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b2:	e2b6      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80044b4:	2308      	movs	r3, #8
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ba:	e2b2      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80044bc:	2310      	movs	r3, #16
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c2:	e2ae      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80044c4:	2320      	movs	r3, #32
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ca:	e2aa      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80044cc:	2340      	movs	r3, #64	; 0x40
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d2:	e2a6      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044da:	e2a2      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a35      	ldr	r2, [pc, #212]	; (80045b8 <UART_SetConfig+0x344>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d130      	bne.n	8004548 <UART_SetConfig+0x2d4>
 80044e6:	4b31      	ldr	r3, [pc, #196]	; (80045ac <UART_SetConfig+0x338>)
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d826      	bhi.n	8004540 <UART_SetConfig+0x2cc>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0x284>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	08004511 	.word	0x08004511
 80044fc:	08004519 	.word	0x08004519
 8004500:	08004521 	.word	0x08004521
 8004504:	08004529 	.word	0x08004529
 8004508:	08004531 	.word	0x08004531
 800450c:	08004539 	.word	0x08004539
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004516:	e284      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004518:	2304      	movs	r3, #4
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451e:	e280      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004520:	2308      	movs	r3, #8
 8004522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004526:	e27c      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004528:	2310      	movs	r3, #16
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452e:	e278      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004530:	2320      	movs	r3, #32
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004536:	e274      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453e:	e270      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004546:	e26c      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <UART_SetConfig+0x348>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d142      	bne.n	80045d8 <UART_SetConfig+0x364>
 8004552:	4b16      	ldr	r3, [pc, #88]	; (80045ac <UART_SetConfig+0x338>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	2b05      	cmp	r3, #5
 800455c:	d838      	bhi.n	80045d0 <UART_SetConfig+0x35c>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x2f0>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	0800457d 	.word	0x0800457d
 8004568:	08004585 	.word	0x08004585
 800456c:	0800458d 	.word	0x0800458d
 8004570:	08004595 	.word	0x08004595
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c9 	.word	0x080045c9
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004582:	e24e      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004584:	2304      	movs	r3, #4
 8004586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458a:	e24a      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800458c:	2308      	movs	r3, #8
 800458e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004592:	e246      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004594:	2310      	movs	r3, #16
 8004596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459a:	e242      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800459c:	cfff69f3 	.word	0xcfff69f3
 80045a0:	58000c00 	.word	0x58000c00
 80045a4:	11fff4ff 	.word	0x11fff4ff
 80045a8:	40011000 	.word	0x40011000
 80045ac:	58024400 	.word	0x58024400
 80045b0:	40004400 	.word	0x40004400
 80045b4:	40004800 	.word	0x40004800
 80045b8:	40004c00 	.word	0x40004c00
 80045bc:	40005000 	.word	0x40005000
 80045c0:	2320      	movs	r3, #32
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c6:	e22c      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80045c8:	2340      	movs	r3, #64	; 0x40
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ce:	e228      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d6:	e224      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4ab1      	ldr	r2, [pc, #708]	; (80048a4 <UART_SetConfig+0x630>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d176      	bne.n	80046d0 <UART_SetConfig+0x45c>
 80045e2:	4bb1      	ldr	r3, [pc, #708]	; (80048a8 <UART_SetConfig+0x634>)
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ea:	2b28      	cmp	r3, #40	; 0x28
 80045ec:	d86c      	bhi.n	80046c8 <UART_SetConfig+0x454>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0x380>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004699 	.word	0x08004699
 80045f8:	080046c9 	.word	0x080046c9
 80045fc:	080046c9 	.word	0x080046c9
 8004600:	080046c9 	.word	0x080046c9
 8004604:	080046c9 	.word	0x080046c9
 8004608:	080046c9 	.word	0x080046c9
 800460c:	080046c9 	.word	0x080046c9
 8004610:	080046c9 	.word	0x080046c9
 8004614:	080046a1 	.word	0x080046a1
 8004618:	080046c9 	.word	0x080046c9
 800461c:	080046c9 	.word	0x080046c9
 8004620:	080046c9 	.word	0x080046c9
 8004624:	080046c9 	.word	0x080046c9
 8004628:	080046c9 	.word	0x080046c9
 800462c:	080046c9 	.word	0x080046c9
 8004630:	080046c9 	.word	0x080046c9
 8004634:	080046a9 	.word	0x080046a9
 8004638:	080046c9 	.word	0x080046c9
 800463c:	080046c9 	.word	0x080046c9
 8004640:	080046c9 	.word	0x080046c9
 8004644:	080046c9 	.word	0x080046c9
 8004648:	080046c9 	.word	0x080046c9
 800464c:	080046c9 	.word	0x080046c9
 8004650:	080046c9 	.word	0x080046c9
 8004654:	080046b1 	.word	0x080046b1
 8004658:	080046c9 	.word	0x080046c9
 800465c:	080046c9 	.word	0x080046c9
 8004660:	080046c9 	.word	0x080046c9
 8004664:	080046c9 	.word	0x080046c9
 8004668:	080046c9 	.word	0x080046c9
 800466c:	080046c9 	.word	0x080046c9
 8004670:	080046c9 	.word	0x080046c9
 8004674:	080046b9 	.word	0x080046b9
 8004678:	080046c9 	.word	0x080046c9
 800467c:	080046c9 	.word	0x080046c9
 8004680:	080046c9 	.word	0x080046c9
 8004684:	080046c9 	.word	0x080046c9
 8004688:	080046c9 	.word	0x080046c9
 800468c:	080046c9 	.word	0x080046c9
 8004690:	080046c9 	.word	0x080046c9
 8004694:	080046c1 	.word	0x080046c1
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469e:	e1c0      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80046a0:	2304      	movs	r3, #4
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a6:	e1bc      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80046a8:	2308      	movs	r3, #8
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ae:	e1b8      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b6:	e1b4      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80046b8:	2320      	movs	r3, #32
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046be:	e1b0      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c6:	e1ac      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ce:	e1a8      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a75      	ldr	r2, [pc, #468]	; (80048ac <UART_SetConfig+0x638>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d130      	bne.n	800473c <UART_SetConfig+0x4c8>
 80046da:	4b73      	ldr	r3, [pc, #460]	; (80048a8 <UART_SetConfig+0x634>)
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d826      	bhi.n	8004734 <UART_SetConfig+0x4c0>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0x478>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004705 	.word	0x08004705
 80046f0:	0800470d 	.word	0x0800470d
 80046f4:	08004715 	.word	0x08004715
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004725 	.word	0x08004725
 8004700:	0800472d 	.word	0x0800472d
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470a:	e18a      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800470c:	2304      	movs	r3, #4
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004712:	e186      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004714:	2308      	movs	r3, #8
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471a:	e182      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800471c:	2310      	movs	r3, #16
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004722:	e17e      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004724:	2320      	movs	r3, #32
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472a:	e17a      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800472c:	2340      	movs	r3, #64	; 0x40
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004732:	e176      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473a:	e172      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a5b      	ldr	r2, [pc, #364]	; (80048b0 <UART_SetConfig+0x63c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d130      	bne.n	80047a8 <UART_SetConfig+0x534>
 8004746:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <UART_SetConfig+0x634>)
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	2b05      	cmp	r3, #5
 8004750:	d826      	bhi.n	80047a0 <UART_SetConfig+0x52c>
 8004752:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x4e4>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	08004771 	.word	0x08004771
 800475c:	08004779 	.word	0x08004779
 8004760:	08004781 	.word	0x08004781
 8004764:	08004789 	.word	0x08004789
 8004768:	08004791 	.word	0x08004791
 800476c:	08004799 	.word	0x08004799
 8004770:	2300      	movs	r3, #0
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004776:	e154      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004778:	2304      	movs	r3, #4
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477e:	e150      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004780:	2308      	movs	r3, #8
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004786:	e14c      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004788:	2310      	movs	r3, #16
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478e:	e148      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004790:	2320      	movs	r3, #32
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004796:	e144      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004798:	2340      	movs	r3, #64	; 0x40
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479e:	e140      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a6:	e13c      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a41      	ldr	r2, [pc, #260]	; (80048b4 <UART_SetConfig+0x640>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	f040 8082 	bne.w	80048b8 <UART_SetConfig+0x644>
 80047b4:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <UART_SetConfig+0x634>)
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047bc:	2b28      	cmp	r3, #40	; 0x28
 80047be:	d86d      	bhi.n	800489c <UART_SetConfig+0x628>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0x554>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	0800486d 	.word	0x0800486d
 80047cc:	0800489d 	.word	0x0800489d
 80047d0:	0800489d 	.word	0x0800489d
 80047d4:	0800489d 	.word	0x0800489d
 80047d8:	0800489d 	.word	0x0800489d
 80047dc:	0800489d 	.word	0x0800489d
 80047e0:	0800489d 	.word	0x0800489d
 80047e4:	0800489d 	.word	0x0800489d
 80047e8:	08004875 	.word	0x08004875
 80047ec:	0800489d 	.word	0x0800489d
 80047f0:	0800489d 	.word	0x0800489d
 80047f4:	0800489d 	.word	0x0800489d
 80047f8:	0800489d 	.word	0x0800489d
 80047fc:	0800489d 	.word	0x0800489d
 8004800:	0800489d 	.word	0x0800489d
 8004804:	0800489d 	.word	0x0800489d
 8004808:	0800487d 	.word	0x0800487d
 800480c:	0800489d 	.word	0x0800489d
 8004810:	0800489d 	.word	0x0800489d
 8004814:	0800489d 	.word	0x0800489d
 8004818:	0800489d 	.word	0x0800489d
 800481c:	0800489d 	.word	0x0800489d
 8004820:	0800489d 	.word	0x0800489d
 8004824:	0800489d 	.word	0x0800489d
 8004828:	08004885 	.word	0x08004885
 800482c:	0800489d 	.word	0x0800489d
 8004830:	0800489d 	.word	0x0800489d
 8004834:	0800489d 	.word	0x0800489d
 8004838:	0800489d 	.word	0x0800489d
 800483c:	0800489d 	.word	0x0800489d
 8004840:	0800489d 	.word	0x0800489d
 8004844:	0800489d 	.word	0x0800489d
 8004848:	0800488d 	.word	0x0800488d
 800484c:	0800489d 	.word	0x0800489d
 8004850:	0800489d 	.word	0x0800489d
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800489d 	.word	0x0800489d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	0800489d 	.word	0x0800489d
 8004864:	0800489d 	.word	0x0800489d
 8004868:	08004895 	.word	0x08004895
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004872:	e0d6      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800487a:	e0d2      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004882:	e0ce      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488a:	e0ca      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800488c:	2320      	movs	r3, #32
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004892:	e0c6      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004894:	2340      	movs	r3, #64	; 0x40
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489a:	e0c2      	b.n	8004a22 <UART_SetConfig+0x7ae>
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a2:	e0be      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80048a4:	40011400 	.word	0x40011400
 80048a8:	58024400 	.word	0x58024400
 80048ac:	40007800 	.word	0x40007800
 80048b0:	40007c00 	.word	0x40007c00
 80048b4:	40011800 	.word	0x40011800
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aad      	ldr	r2, [pc, #692]	; (8004b74 <UART_SetConfig+0x900>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d176      	bne.n	80049b0 <UART_SetConfig+0x73c>
 80048c2:	4bad      	ldr	r3, [pc, #692]	; (8004b78 <UART_SetConfig+0x904>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ca:	2b28      	cmp	r3, #40	; 0x28
 80048cc:	d86c      	bhi.n	80049a8 <UART_SetConfig+0x734>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x660>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	08004979 	.word	0x08004979
 80048d8:	080049a9 	.word	0x080049a9
 80048dc:	080049a9 	.word	0x080049a9
 80048e0:	080049a9 	.word	0x080049a9
 80048e4:	080049a9 	.word	0x080049a9
 80048e8:	080049a9 	.word	0x080049a9
 80048ec:	080049a9 	.word	0x080049a9
 80048f0:	080049a9 	.word	0x080049a9
 80048f4:	08004981 	.word	0x08004981
 80048f8:	080049a9 	.word	0x080049a9
 80048fc:	080049a9 	.word	0x080049a9
 8004900:	080049a9 	.word	0x080049a9
 8004904:	080049a9 	.word	0x080049a9
 8004908:	080049a9 	.word	0x080049a9
 800490c:	080049a9 	.word	0x080049a9
 8004910:	080049a9 	.word	0x080049a9
 8004914:	08004989 	.word	0x08004989
 8004918:	080049a9 	.word	0x080049a9
 800491c:	080049a9 	.word	0x080049a9
 8004920:	080049a9 	.word	0x080049a9
 8004924:	080049a9 	.word	0x080049a9
 8004928:	080049a9 	.word	0x080049a9
 800492c:	080049a9 	.word	0x080049a9
 8004930:	080049a9 	.word	0x080049a9
 8004934:	08004991 	.word	0x08004991
 8004938:	080049a9 	.word	0x080049a9
 800493c:	080049a9 	.word	0x080049a9
 8004940:	080049a9 	.word	0x080049a9
 8004944:	080049a9 	.word	0x080049a9
 8004948:	080049a9 	.word	0x080049a9
 800494c:	080049a9 	.word	0x080049a9
 8004950:	080049a9 	.word	0x080049a9
 8004954:	08004999 	.word	0x08004999
 8004958:	080049a9 	.word	0x080049a9
 800495c:	080049a9 	.word	0x080049a9
 8004960:	080049a9 	.word	0x080049a9
 8004964:	080049a9 	.word	0x080049a9
 8004968:	080049a9 	.word	0x080049a9
 800496c:	080049a9 	.word	0x080049a9
 8004970:	080049a9 	.word	0x080049a9
 8004974:	080049a1 	.word	0x080049a1
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497e:	e050      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004986:	e04c      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498e:	e048      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004996:	e044      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004998:	2320      	movs	r3, #32
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499e:	e040      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80049a0:	2340      	movs	r3, #64	; 0x40
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a6:	e03c      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ae:	e038      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a71      	ldr	r2, [pc, #452]	; (8004b7c <UART_SetConfig+0x908>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d130      	bne.n	8004a1c <UART_SetConfig+0x7a8>
 80049ba:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <UART_SetConfig+0x904>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d826      	bhi.n	8004a14 <UART_SetConfig+0x7a0>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x758>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049e5 	.word	0x080049e5
 80049d0:	080049ed 	.word	0x080049ed
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ea:	e01a      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f2:	e016      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fa:	e012      	b.n	8004a22 <UART_SetConfig+0x7ae>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a02:	e00e      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004a04:	2320      	movs	r3, #32
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0a:	e00a      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004a0c:	2340      	movs	r3, #64	; 0x40
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a12:	e006      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1a:	e002      	b.n	8004a22 <UART_SetConfig+0x7ae>
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a55      	ldr	r2, [pc, #340]	; (8004b7c <UART_SetConfig+0x908>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f040 80f8 	bne.w	8004c1e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	dc46      	bgt.n	8004ac4 <UART_SetConfig+0x850>
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	db75      	blt.n	8004b26 <UART_SetConfig+0x8b2>
 8004a3a:	3b02      	subs	r3, #2
 8004a3c:	2b1e      	cmp	r3, #30
 8004a3e:	d872      	bhi.n	8004b26 <UART_SetConfig+0x8b2>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x7d4>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004acb 	.word	0x08004acb
 8004a4c:	08004b27 	.word	0x08004b27
 8004a50:	08004ad3 	.word	0x08004ad3
 8004a54:	08004b27 	.word	0x08004b27
 8004a58:	08004b27 	.word	0x08004b27
 8004a5c:	08004b27 	.word	0x08004b27
 8004a60:	08004ae3 	.word	0x08004ae3
 8004a64:	08004b27 	.word	0x08004b27
 8004a68:	08004b27 	.word	0x08004b27
 8004a6c:	08004b27 	.word	0x08004b27
 8004a70:	08004b27 	.word	0x08004b27
 8004a74:	08004b27 	.word	0x08004b27
 8004a78:	08004b27 	.word	0x08004b27
 8004a7c:	08004b27 	.word	0x08004b27
 8004a80:	08004af3 	.word	0x08004af3
 8004a84:	08004b27 	.word	0x08004b27
 8004a88:	08004b27 	.word	0x08004b27
 8004a8c:	08004b27 	.word	0x08004b27
 8004a90:	08004b27 	.word	0x08004b27
 8004a94:	08004b27 	.word	0x08004b27
 8004a98:	08004b27 	.word	0x08004b27
 8004a9c:	08004b27 	.word	0x08004b27
 8004aa0:	08004b27 	.word	0x08004b27
 8004aa4:	08004b27 	.word	0x08004b27
 8004aa8:	08004b27 	.word	0x08004b27
 8004aac:	08004b27 	.word	0x08004b27
 8004ab0:	08004b27 	.word	0x08004b27
 8004ab4:	08004b27 	.word	0x08004b27
 8004ab8:	08004b27 	.word	0x08004b27
 8004abc:	08004b27 	.word	0x08004b27
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d02a      	beq.n	8004b1e <UART_SetConfig+0x8aa>
 8004ac8:	e02d      	b.n	8004b26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004aca:	f7fe fecb 	bl	8003864 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ace:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ad0:	e02f      	b.n	8004b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe feda 	bl	8003890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ae0:	e027      	b.n	8004b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ae2:	f107 0318 	add.w	r3, r7, #24
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff f826 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004af0:	e01f      	b.n	8004b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <UART_SetConfig+0x904>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004afe:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <UART_SetConfig+0x904>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <UART_SetConfig+0x90c>)
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b10:	e00f      	b.n	8004b32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <UART_SetConfig+0x90c>)
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b16:	e00c      	b.n	8004b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b18:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <UART_SetConfig+0x910>)
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b1c:	e009      	b.n	8004b32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b24:	e005      	b.n	8004b32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 81ee 	beq.w	8004f16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <UART_SetConfig+0x914>)
 8004b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b4c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d305      	bcc.n	8004b6a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d910      	bls.n	8004b8c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b70:	e1d1      	b.n	8004f16 <UART_SetConfig+0xca2>
 8004b72:	bf00      	nop
 8004b74:	40011c00 	.word	0x40011c00
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	58000c00 	.word	0x58000c00
 8004b80:	03d09000 	.word	0x03d09000
 8004b84:	003d0900 	.word	0x003d0900
 8004b88:	08005ae0 	.word	0x08005ae0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	60fa      	str	r2, [r7, #12]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	4ac0      	ldr	r2, [pc, #768]	; (8004e9c <UART_SetConfig+0xc28>)
 8004b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bae:	f7fb fb9d 	bl	80002ec <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	020b      	lsls	r3, r1, #8
 8004bc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bc8:	0202      	lsls	r2, r0, #8
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	6849      	ldr	r1, [r1, #4]
 8004bce:	0849      	lsrs	r1, r1, #1
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	eb12 0804 	adds.w	r8, r2, r4
 8004bda:	eb43 0905 	adc.w	r9, r3, r5
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	469a      	mov	sl, r3
 8004be6:	4693      	mov	fp, r2
 8004be8:	4652      	mov	r2, sl
 8004bea:	465b      	mov	r3, fp
 8004bec:	4640      	mov	r0, r8
 8004bee:	4649      	mov	r1, r9
 8004bf0:	f7fb fb7c 	bl	80002ec <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d308      	bcc.n	8004c16 <UART_SetConfig+0x9a2>
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0a:	d204      	bcs.n	8004c16 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	e17f      	b.n	8004f16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c1c:	e17b      	b.n	8004f16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c26:	f040 80bd 	bne.w	8004da4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004c2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	dc48      	bgt.n	8004cc4 <UART_SetConfig+0xa50>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db7b      	blt.n	8004d2e <UART_SetConfig+0xaba>
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d879      	bhi.n	8004d2e <UART_SetConfig+0xaba>
 8004c3a:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <UART_SetConfig+0x9cc>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004ccb 	.word	0x08004ccb
 8004c44:	08004cd3 	.word	0x08004cd3
 8004c48:	08004d2f 	.word	0x08004d2f
 8004c4c:	08004d2f 	.word	0x08004d2f
 8004c50:	08004cdb 	.word	0x08004cdb
 8004c54:	08004d2f 	.word	0x08004d2f
 8004c58:	08004d2f 	.word	0x08004d2f
 8004c5c:	08004d2f 	.word	0x08004d2f
 8004c60:	08004ceb 	.word	0x08004ceb
 8004c64:	08004d2f 	.word	0x08004d2f
 8004c68:	08004d2f 	.word	0x08004d2f
 8004c6c:	08004d2f 	.word	0x08004d2f
 8004c70:	08004d2f 	.word	0x08004d2f
 8004c74:	08004d2f 	.word	0x08004d2f
 8004c78:	08004d2f 	.word	0x08004d2f
 8004c7c:	08004d2f 	.word	0x08004d2f
 8004c80:	08004cfb 	.word	0x08004cfb
 8004c84:	08004d2f 	.word	0x08004d2f
 8004c88:	08004d2f 	.word	0x08004d2f
 8004c8c:	08004d2f 	.word	0x08004d2f
 8004c90:	08004d2f 	.word	0x08004d2f
 8004c94:	08004d2f 	.word	0x08004d2f
 8004c98:	08004d2f 	.word	0x08004d2f
 8004c9c:	08004d2f 	.word	0x08004d2f
 8004ca0:	08004d2f 	.word	0x08004d2f
 8004ca4:	08004d2f 	.word	0x08004d2f
 8004ca8:	08004d2f 	.word	0x08004d2f
 8004cac:	08004d2f 	.word	0x08004d2f
 8004cb0:	08004d2f 	.word	0x08004d2f
 8004cb4:	08004d2f 	.word	0x08004d2f
 8004cb8:	08004d2f 	.word	0x08004d2f
 8004cbc:	08004d2f 	.word	0x08004d2f
 8004cc0:	08004d21 	.word	0x08004d21
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d02e      	beq.n	8004d26 <UART_SetConfig+0xab2>
 8004cc8:	e031      	b.n	8004d2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cca:	f7fd fbe1 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8004cce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004cd0:	e033      	b.n	8004d3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd2:	f7fd fbf3 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8004cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004cd8:	e02f      	b.n	8004d3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fdd6 	bl	8003890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ce8:	e027      	b.n	8004d3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cea:	f107 0318 	add.w	r3, r7, #24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe ff22 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cf8:	e01f      	b.n	8004d3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cfa:	4b69      	ldr	r3, [pc, #420]	; (8004ea0 <UART_SetConfig+0xc2c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d06:	4b66      	ldr	r3, [pc, #408]	; (8004ea0 <UART_SetConfig+0xc2c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	4a64      	ldr	r2, [pc, #400]	; (8004ea4 <UART_SetConfig+0xc30>)
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d18:	e00f      	b.n	8004d3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004d1a:	4b62      	ldr	r3, [pc, #392]	; (8004ea4 <UART_SetConfig+0xc30>)
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d1e:	e00c      	b.n	8004d3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d20:	4b61      	ldr	r3, [pc, #388]	; (8004ea8 <UART_SetConfig+0xc34>)
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d24:	e009      	b.n	8004d3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d2c:	e005      	b.n	8004d3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80ea 	beq.w	8004f16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	4a55      	ldr	r2, [pc, #340]	; (8004e9c <UART_SetConfig+0xc28>)
 8004d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d54:	005a      	lsls	r2, r3, #1
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	441a      	add	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	d916      	bls.n	8004d9c <UART_SetConfig+0xb28>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d212      	bcs.n	8004d9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f023 030f 	bic.w	r3, r3, #15
 8004d7e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	e0bc      	b.n	8004f16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004da2:	e0b8      	b.n	8004f16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	dc4b      	bgt.n	8004e44 <UART_SetConfig+0xbd0>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f2c0 8087 	blt.w	8004ec0 <UART_SetConfig+0xc4c>
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	f200 8084 	bhi.w	8004ec0 <UART_SetConfig+0xc4c>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0xb4c>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004e4b 	.word	0x08004e4b
 8004dc4:	08004e53 	.word	0x08004e53
 8004dc8:	08004ec1 	.word	0x08004ec1
 8004dcc:	08004ec1 	.word	0x08004ec1
 8004dd0:	08004e5b 	.word	0x08004e5b
 8004dd4:	08004ec1 	.word	0x08004ec1
 8004dd8:	08004ec1 	.word	0x08004ec1
 8004ddc:	08004ec1 	.word	0x08004ec1
 8004de0:	08004e6b 	.word	0x08004e6b
 8004de4:	08004ec1 	.word	0x08004ec1
 8004de8:	08004ec1 	.word	0x08004ec1
 8004dec:	08004ec1 	.word	0x08004ec1
 8004df0:	08004ec1 	.word	0x08004ec1
 8004df4:	08004ec1 	.word	0x08004ec1
 8004df8:	08004ec1 	.word	0x08004ec1
 8004dfc:	08004ec1 	.word	0x08004ec1
 8004e00:	08004e7b 	.word	0x08004e7b
 8004e04:	08004ec1 	.word	0x08004ec1
 8004e08:	08004ec1 	.word	0x08004ec1
 8004e0c:	08004ec1 	.word	0x08004ec1
 8004e10:	08004ec1 	.word	0x08004ec1
 8004e14:	08004ec1 	.word	0x08004ec1
 8004e18:	08004ec1 	.word	0x08004ec1
 8004e1c:	08004ec1 	.word	0x08004ec1
 8004e20:	08004ec1 	.word	0x08004ec1
 8004e24:	08004ec1 	.word	0x08004ec1
 8004e28:	08004ec1 	.word	0x08004ec1
 8004e2c:	08004ec1 	.word	0x08004ec1
 8004e30:	08004ec1 	.word	0x08004ec1
 8004e34:	08004ec1 	.word	0x08004ec1
 8004e38:	08004ec1 	.word	0x08004ec1
 8004e3c:	08004ec1 	.word	0x08004ec1
 8004e40:	08004eb3 	.word	0x08004eb3
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d037      	beq.n	8004eb8 <UART_SetConfig+0xc44>
 8004e48:	e03a      	b.n	8004ec0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4a:	f7fd fb21 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8004e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e50:	e03c      	b.n	8004ecc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e52:	f7fd fb33 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8004e56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e58:	e038      	b.n	8004ecc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fd16 	bl	8003890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e68:	e030      	b.n	8004ecc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e6a:	f107 0318 	add.w	r3, r7, #24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fe62 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e78:	e028      	b.n	8004ecc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <UART_SetConfig+0xc2c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d012      	beq.n	8004eac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <UART_SetConfig+0xc2c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	08db      	lsrs	r3, r3, #3
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <UART_SetConfig+0xc30>)
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e98:	e018      	b.n	8004ecc <UART_SetConfig+0xc58>
 8004e9a:	bf00      	nop
 8004e9c:	08005ae0 	.word	0x08005ae0
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	03d09000 	.word	0x03d09000
 8004ea8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <UART_SetConfig+0xccc>)
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eb0:	e00c      	b.n	8004ecc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <UART_SetConfig+0xcd0>)
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eb6:	e009      	b.n	8004ecc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ebe:	e005      	b.n	8004ecc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004eca:	bf00      	nop
    }

    if (pclk != 0U)
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d021      	beq.n	8004f16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <UART_SetConfig+0xcd4>)
 8004ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	441a      	add	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d909      	bls.n	8004f10 <UART_SetConfig+0xc9c>
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f02:	d205      	bcs.n	8004f10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e002      	b.n	8004f16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004f32:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3748      	adds	r7, #72	; 0x48
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f40:	03d09000 	.word	0x03d09000
 8004f44:	003d0900 	.word	0x003d0900
 8004f48:	08005ae0 	.word	0x08005ae0

08004f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01a      	beq.n	8005062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504a:	d10a      	bne.n	8005062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b098      	sub	sp, #96	; 0x60
 8005094:	af02      	add	r7, sp, #8
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050a0:	f7fb ff6a 	bl	8000f78 <HAL_GetTick>
 80050a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d12f      	bne.n	8005114 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050bc:	2200      	movs	r2, #0
 80050be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f88e 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d022      	beq.n	8005114 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e2:	653b      	str	r3, [r7, #80]	; 0x50
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	647b      	str	r3, [r7, #68]	; 0x44
 80050ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e6      	bne.n	80050ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e063      	b.n	80051dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b04      	cmp	r3, #4
 8005120:	d149      	bne.n	80051b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005122:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800512a:	2200      	movs	r2, #0
 800512c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f857 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d03c      	beq.n	80051b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	623b      	str	r3, [r7, #32]
   return(result);
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515a:	633b      	str	r3, [r7, #48]	; 0x30
 800515c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e6      	bne.n	800513c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	60fb      	str	r3, [r7, #12]
   return(result);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800518e:	61fa      	str	r2, [r7, #28]
 8005190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	69b9      	ldr	r1, [r7, #24]
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	617b      	str	r3, [r7, #20]
   return(result);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e012      	b.n	80051dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3758      	adds	r7, #88	; 0x58
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	e049      	b.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d045      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fb febb 	bl	8000f78 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <UART_WaitOnFlagUntilTimeout+0x30>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e048      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d031      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b08      	cmp	r3, #8
 8005232:	d110      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2208      	movs	r2, #8
 800523a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f839 	bl	80052b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2208      	movs	r2, #8
 8005246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e029      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005264:	d111      	bne.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f81f 	bl	80052b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d0a6      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b095      	sub	sp, #84	; 0x54
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052da:	643b      	str	r3, [r7, #64]	; 0x40
 80052dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e6      	bne.n	80052bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3308      	adds	r3, #8
 80052f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <UART_EndRxTransfer+0xc8>)
 8005302:	4013      	ands	r3, r2
 8005304:	64bb      	str	r3, [r7, #72]	; 0x48
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d118      	bne.n	800535c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	60bb      	str	r3, [r7, #8]
   return(result);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f023 0310 	bic.w	r3, r3, #16
 800533e:	647b      	str	r3, [r7, #68]	; 0x44
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6979      	ldr	r1, [r7, #20]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	613b      	str	r3, [r7, #16]
   return(result);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e6      	bne.n	800532a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005370:	bf00      	nop
 8005372:	3754      	adds	r7, #84	; 0x54
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	effffffe 	.word	0xeffffffe

08005380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_UARTEx_DisableFifoMode+0x16>
 8005392:	2302      	movs	r3, #2
 8005394:	e027      	b.n	80053e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2224      	movs	r2, #36	; 0x24
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005406:	2302      	movs	r3, #2
 8005408:	e02d      	b.n	8005466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2224      	movs	r2, #36	; 0x24
 8005416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f850 	bl	80054ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005482:	2302      	movs	r3, #2
 8005484:	e02d      	b.n	80054e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2224      	movs	r2, #36	; 0x24
 8005492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f812 	bl	80054ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800550c:	e031      	b.n	8005572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800550e:	2310      	movs	r3, #16
 8005510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005512:	2310      	movs	r3, #16
 8005514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	0e5b      	lsrs	r3, r3, #25
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	0f5b      	lsrs	r3, r3, #29
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	7b3a      	ldrb	r2, [r7, #12]
 800553a:	4911      	ldr	r1, [pc, #68]	; (8005580 <UARTEx_SetNbDataToProcess+0x94>)
 800553c:	5c8a      	ldrb	r2, [r1, r2]
 800553e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005542:	7b3a      	ldrb	r2, [r7, #12]
 8005544:	490f      	ldr	r1, [pc, #60]	; (8005584 <UARTEx_SetNbDataToProcess+0x98>)
 8005546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005548:	fb93 f3f2 	sdiv	r3, r3, r2
 800554c:	b29a      	uxth	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	7b7a      	ldrb	r2, [r7, #13]
 8005558:	4909      	ldr	r1, [pc, #36]	; (8005580 <UARTEx_SetNbDataToProcess+0x94>)
 800555a:	5c8a      	ldrb	r2, [r1, r2]
 800555c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005560:	7b7a      	ldrb	r2, [r7, #13]
 8005562:	4908      	ldr	r1, [pc, #32]	; (8005584 <UARTEx_SetNbDataToProcess+0x98>)
 8005564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005566:	fb93 f3f2 	sdiv	r3, r3, r2
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	08005af8 	.word	0x08005af8
 8005584:	08005b00 	.word	0x08005b00

08005588 <malloc>:
 8005588:	4b02      	ldr	r3, [pc, #8]	; (8005594 <malloc+0xc>)
 800558a:	4601      	mov	r1, r0
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	f000 b82b 	b.w	80055e8 <_malloc_r>
 8005592:	bf00      	nop
 8005594:	2400005c 	.word	0x2400005c

08005598 <free>:
 8005598:	4b02      	ldr	r3, [pc, #8]	; (80055a4 <free+0xc>)
 800559a:	4601      	mov	r1, r0
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	f000 b901 	b.w	80057a4 <_free_r>
 80055a2:	bf00      	nop
 80055a4:	2400005c 	.word	0x2400005c

080055a8 <sbrk_aligned>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0e      	ldr	r6, [pc, #56]	; (80055e4 <sbrk_aligned+0x3c>)
 80055ac:	460c      	mov	r4, r1
 80055ae:	6831      	ldr	r1, [r6, #0]
 80055b0:	4605      	mov	r5, r0
 80055b2:	b911      	cbnz	r1, 80055ba <sbrk_aligned+0x12>
 80055b4:	f000 f8ac 	bl	8005710 <_sbrk_r>
 80055b8:	6030      	str	r0, [r6, #0]
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 f8a7 	bl	8005710 <_sbrk_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d00a      	beq.n	80055dc <sbrk_aligned+0x34>
 80055c6:	1cc4      	adds	r4, r0, #3
 80055c8:	f024 0403 	bic.w	r4, r4, #3
 80055cc:	42a0      	cmp	r0, r4
 80055ce:	d007      	beq.n	80055e0 <sbrk_aligned+0x38>
 80055d0:	1a21      	subs	r1, r4, r0
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f89c 	bl	8005710 <_sbrk_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	d101      	bne.n	80055e0 <sbrk_aligned+0x38>
 80055dc:	f04f 34ff 	mov.w	r4, #4294967295
 80055e0:	4620      	mov	r0, r4
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	240001b0 	.word	0x240001b0

080055e8 <_malloc_r>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	1ccd      	adds	r5, r1, #3
 80055ee:	f025 0503 	bic.w	r5, r5, #3
 80055f2:	3508      	adds	r5, #8
 80055f4:	2d0c      	cmp	r5, #12
 80055f6:	bf38      	it	cc
 80055f8:	250c      	movcc	r5, #12
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	4607      	mov	r7, r0
 80055fe:	db01      	blt.n	8005604 <_malloc_r+0x1c>
 8005600:	42a9      	cmp	r1, r5
 8005602:	d905      	bls.n	8005610 <_malloc_r+0x28>
 8005604:	230c      	movs	r3, #12
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	2600      	movs	r6, #0
 800560a:	4630      	mov	r0, r6
 800560c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005610:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056e4 <_malloc_r+0xfc>
 8005614:	f000 f868 	bl	80056e8 <__malloc_lock>
 8005618:	f8d8 3000 	ldr.w	r3, [r8]
 800561c:	461c      	mov	r4, r3
 800561e:	bb5c      	cbnz	r4, 8005678 <_malloc_r+0x90>
 8005620:	4629      	mov	r1, r5
 8005622:	4638      	mov	r0, r7
 8005624:	f7ff ffc0 	bl	80055a8 <sbrk_aligned>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	4604      	mov	r4, r0
 800562c:	d155      	bne.n	80056da <_malloc_r+0xf2>
 800562e:	f8d8 4000 	ldr.w	r4, [r8]
 8005632:	4626      	mov	r6, r4
 8005634:	2e00      	cmp	r6, #0
 8005636:	d145      	bne.n	80056c4 <_malloc_r+0xdc>
 8005638:	2c00      	cmp	r4, #0
 800563a:	d048      	beq.n	80056ce <_malloc_r+0xe6>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	4631      	mov	r1, r6
 8005640:	4638      	mov	r0, r7
 8005642:	eb04 0903 	add.w	r9, r4, r3
 8005646:	f000 f863 	bl	8005710 <_sbrk_r>
 800564a:	4581      	cmp	r9, r0
 800564c:	d13f      	bne.n	80056ce <_malloc_r+0xe6>
 800564e:	6821      	ldr	r1, [r4, #0]
 8005650:	1a6d      	subs	r5, r5, r1
 8005652:	4629      	mov	r1, r5
 8005654:	4638      	mov	r0, r7
 8005656:	f7ff ffa7 	bl	80055a8 <sbrk_aligned>
 800565a:	3001      	adds	r0, #1
 800565c:	d037      	beq.n	80056ce <_malloc_r+0xe6>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	442b      	add	r3, r5
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	f8d8 3000 	ldr.w	r3, [r8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d038      	beq.n	80056de <_malloc_r+0xf6>
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	42a2      	cmp	r2, r4
 8005670:	d12b      	bne.n	80056ca <_malloc_r+0xe2>
 8005672:	2200      	movs	r2, #0
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	e00f      	b.n	8005698 <_malloc_r+0xb0>
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	1b52      	subs	r2, r2, r5
 800567c:	d41f      	bmi.n	80056be <_malloc_r+0xd6>
 800567e:	2a0b      	cmp	r2, #11
 8005680:	d917      	bls.n	80056b2 <_malloc_r+0xca>
 8005682:	1961      	adds	r1, r4, r5
 8005684:	42a3      	cmp	r3, r4
 8005686:	6025      	str	r5, [r4, #0]
 8005688:	bf18      	it	ne
 800568a:	6059      	strne	r1, [r3, #4]
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	bf08      	it	eq
 8005690:	f8c8 1000 	streq.w	r1, [r8]
 8005694:	5162      	str	r2, [r4, r5]
 8005696:	604b      	str	r3, [r1, #4]
 8005698:	4638      	mov	r0, r7
 800569a:	f104 060b 	add.w	r6, r4, #11
 800569e:	f000 f829 	bl	80056f4 <__malloc_unlock>
 80056a2:	f026 0607 	bic.w	r6, r6, #7
 80056a6:	1d23      	adds	r3, r4, #4
 80056a8:	1af2      	subs	r2, r6, r3
 80056aa:	d0ae      	beq.n	800560a <_malloc_r+0x22>
 80056ac:	1b9b      	subs	r3, r3, r6
 80056ae:	50a3      	str	r3, [r4, r2]
 80056b0:	e7ab      	b.n	800560a <_malloc_r+0x22>
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	6862      	ldr	r2, [r4, #4]
 80056b6:	d1dd      	bne.n	8005674 <_malloc_r+0x8c>
 80056b8:	f8c8 2000 	str.w	r2, [r8]
 80056bc:	e7ec      	b.n	8005698 <_malloc_r+0xb0>
 80056be:	4623      	mov	r3, r4
 80056c0:	6864      	ldr	r4, [r4, #4]
 80056c2:	e7ac      	b.n	800561e <_malloc_r+0x36>
 80056c4:	4634      	mov	r4, r6
 80056c6:	6876      	ldr	r6, [r6, #4]
 80056c8:	e7b4      	b.n	8005634 <_malloc_r+0x4c>
 80056ca:	4613      	mov	r3, r2
 80056cc:	e7cc      	b.n	8005668 <_malloc_r+0x80>
 80056ce:	230c      	movs	r3, #12
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	4638      	mov	r0, r7
 80056d4:	f000 f80e 	bl	80056f4 <__malloc_unlock>
 80056d8:	e797      	b.n	800560a <_malloc_r+0x22>
 80056da:	6025      	str	r5, [r4, #0]
 80056dc:	e7dc      	b.n	8005698 <_malloc_r+0xb0>
 80056de:	605b      	str	r3, [r3, #4]
 80056e0:	deff      	udf	#255	; 0xff
 80056e2:	bf00      	nop
 80056e4:	240001ac 	.word	0x240001ac

080056e8 <__malloc_lock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__malloc_lock+0x8>)
 80056ea:	f000 b84b 	b.w	8005784 <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	240002f0 	.word	0x240002f0

080056f4 <__malloc_unlock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <__malloc_unlock+0x8>)
 80056f6:	f000 b846 	b.w	8005786 <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	240002f0 	.word	0x240002f0

08005700 <memset>:
 8005700:	4402      	add	r2, r0
 8005702:	4603      	mov	r3, r0
 8005704:	4293      	cmp	r3, r2
 8005706:	d100      	bne.n	800570a <memset+0xa>
 8005708:	4770      	bx	lr
 800570a:	f803 1b01 	strb.w	r1, [r3], #1
 800570e:	e7f9      	b.n	8005704 <memset+0x4>

08005710 <_sbrk_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d06      	ldr	r5, [pc, #24]	; (800572c <_sbrk_r+0x1c>)
 8005714:	2300      	movs	r3, #0
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	602b      	str	r3, [r5, #0]
 800571c:	f7fb f968 	bl	80009f0 <_sbrk>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_sbrk_r+0x1a>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	b103      	cbz	r3, 800572a <_sbrk_r+0x1a>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	240002ec 	.word	0x240002ec

08005730 <__errno>:
 8005730:	4b01      	ldr	r3, [pc, #4]	; (8005738 <__errno+0x8>)
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	2400005c 	.word	0x2400005c

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4d0d      	ldr	r5, [pc, #52]	; (8005774 <__libc_init_array+0x38>)
 8005740:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <__libc_init_array+0x3c>)
 8005742:	1b64      	subs	r4, r4, r5
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	2600      	movs	r6, #0
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	4d0b      	ldr	r5, [pc, #44]	; (800577c <__libc_init_array+0x40>)
 800574e:	4c0c      	ldr	r4, [pc, #48]	; (8005780 <__libc_init_array+0x44>)
 8005750:	f000 f874 	bl	800583c <_init>
 8005754:	1b64      	subs	r4, r4, r5
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	2600      	movs	r6, #0
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	08005b10 	.word	0x08005b10
 8005778:	08005b10 	.word	0x08005b10
 800577c:	08005b10 	.word	0x08005b10
 8005780:	08005b14 	.word	0x08005b14

08005784 <__retarget_lock_acquire_recursive>:
 8005784:	4770      	bx	lr

08005786 <__retarget_lock_release_recursive>:
 8005786:	4770      	bx	lr

08005788 <memcpy>:
 8005788:	440a      	add	r2, r1
 800578a:	4291      	cmp	r1, r2
 800578c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	4770      	bx	lr
 8005794:	b510      	push	{r4, lr}
 8005796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800579a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579e:	4291      	cmp	r1, r2
 80057a0:	d1f9      	bne.n	8005796 <memcpy+0xe>
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <_free_r>:
 80057a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d044      	beq.n	8005834 <_free_r+0x90>
 80057aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ae:	9001      	str	r0, [sp, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f1a1 0404 	sub.w	r4, r1, #4
 80057b6:	bfb8      	it	lt
 80057b8:	18e4      	addlt	r4, r4, r3
 80057ba:	f7ff ff95 	bl	80056e8 <__malloc_lock>
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <_free_r+0x94>)
 80057c0:	9801      	ldr	r0, [sp, #4]
 80057c2:	6813      	ldr	r3, [r2, #0]
 80057c4:	b933      	cbnz	r3, 80057d4 <_free_r+0x30>
 80057c6:	6063      	str	r3, [r4, #4]
 80057c8:	6014      	str	r4, [r2, #0]
 80057ca:	b003      	add	sp, #12
 80057cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d0:	f7ff bf90 	b.w	80056f4 <__malloc_unlock>
 80057d4:	42a3      	cmp	r3, r4
 80057d6:	d908      	bls.n	80057ea <_free_r+0x46>
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	1961      	adds	r1, r4, r5
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf01      	itttt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	1949      	addeq	r1, r1, r5
 80057e6:	6021      	streq	r1, [r4, #0]
 80057e8:	e7ed      	b.n	80057c6 <_free_r+0x22>
 80057ea:	461a      	mov	r2, r3
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b10b      	cbz	r3, 80057f4 <_free_r+0x50>
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	d9fa      	bls.n	80057ea <_free_r+0x46>
 80057f4:	6811      	ldr	r1, [r2, #0]
 80057f6:	1855      	adds	r5, r2, r1
 80057f8:	42a5      	cmp	r5, r4
 80057fa:	d10b      	bne.n	8005814 <_free_r+0x70>
 80057fc:	6824      	ldr	r4, [r4, #0]
 80057fe:	4421      	add	r1, r4
 8005800:	1854      	adds	r4, r2, r1
 8005802:	42a3      	cmp	r3, r4
 8005804:	6011      	str	r1, [r2, #0]
 8005806:	d1e0      	bne.n	80057ca <_free_r+0x26>
 8005808:	681c      	ldr	r4, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	6053      	str	r3, [r2, #4]
 800580e:	440c      	add	r4, r1
 8005810:	6014      	str	r4, [r2, #0]
 8005812:	e7da      	b.n	80057ca <_free_r+0x26>
 8005814:	d902      	bls.n	800581c <_free_r+0x78>
 8005816:	230c      	movs	r3, #12
 8005818:	6003      	str	r3, [r0, #0]
 800581a:	e7d6      	b.n	80057ca <_free_r+0x26>
 800581c:	6825      	ldr	r5, [r4, #0]
 800581e:	1961      	adds	r1, r4, r5
 8005820:	428b      	cmp	r3, r1
 8005822:	bf04      	itt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	6063      	str	r3, [r4, #4]
 800582a:	bf04      	itt	eq
 800582c:	1949      	addeq	r1, r1, r5
 800582e:	6021      	streq	r1, [r4, #0]
 8005830:	6054      	str	r4, [r2, #4]
 8005832:	e7ca      	b.n	80057ca <_free_r+0x26>
 8005834:	b003      	add	sp, #12
 8005836:	bd30      	pop	{r4, r5, pc}
 8005838:	240001ac 	.word	0x240001ac

0800583c <_init>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr

08005848 <_fini>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	bf00      	nop
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr
