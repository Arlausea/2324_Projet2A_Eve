
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005374  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080058b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  24000010  080058c8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  080058c8  00020158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f3d6  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001e60  00000000  00000000  0002f457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000a88  00000000  00000000  000312b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000817  00000000  00000000  00031d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002efb7  00000000  00000000  00032557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ea3b  00000000  00000000  0006150e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001328eb  00000000  00000000  0006ff49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002b10  00000000  00000000  001a2834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001a5344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005608 	.word	0x08005608

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005608 	.word	0x08005608

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fc20 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f814 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f91e 	bl	8000834 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f8d0 	bl	800079c <MX_USART3_UART_Init>
  MX_UART4_Init();
 80005fc:	f000 f882 	bl	8000704 <MX_UART4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  //HAL_UART_Transmit(&huart4, "hello", 5, 10);
	  ToggleLed(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fa37 	bl	8000a74 <ToggleLed>

	  HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 fca4 	bl	8000f54 <HAL_Delay>

	  ToggleLed(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fa31 	bl	8000a74 <ToggleLed>
	  HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fc9e 	bl	8000f54 <HAL_Delay>
	  ToggleLed(1);
 8000618:	e7f2      	b.n	8000600 <main+0x18>
	...

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09c      	sub	sp, #112	; 0x70
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000626:	224c      	movs	r2, #76	; 0x4c
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 ffb2 	bl	8005594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2220      	movs	r2, #32
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 ffac 	bl	8005594 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800063c:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <SystemClock_Config+0xe0>)
 800063e:	f04f 32ff 	mov.w	r2, #4294967295
 8000642:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000646:	2004      	movs	r0, #4
 8000648:	f000 ff3c 	bl	80014c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemClock_Config+0xe4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <SystemClock_Config+0xe4>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xe4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000668:	bf00      	nop
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xe4>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000676:	d1f8      	bne.n	800066a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	2302      	movs	r3, #2
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800068e:	2318      	movs	r3, #24
 8000690:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000696:	2304      	movs	r3, #4
 8000698:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800069e:	230c      	movs	r3, #12
 80006a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ff62 	bl	8001578 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ba:	f000 f90d 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	233f      	movs	r3, #63	; 0x3f
 80006c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fb7a 	bl	8001ddc <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006ee:	f000 f8f3 	bl	80008d8 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3770      	adds	r7, #112	; 0x70
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58024400 	.word	0x58024400
 8000700:	58024800 	.word	0x58024800

08000704 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_UART4_Init+0x90>)
 800070a:	4a23      	ldr	r2, [pc, #140]	; (8000798 <MX_UART4_Init+0x94>)
 800070c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_UART4_Init+0x90>)
 8000710:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000714:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_UART4_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_UART4_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_UART4_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_UART4_Init+0x90>)
 800072a:	2208      	movs	r2, #8
 800072c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_UART4_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_UART4_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_UART4_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_UART4_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_UART4_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <MX_UART4_Init+0x90>)
 800074e:	f003 fcb1 	bl	80040b4 <HAL_HalfDuplex_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000758:	f000 f8be 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_UART4_Init+0x90>)
 8000760:	f004 fe4d 	bl	80053fe <HAL_UARTEx_SetTxFifoThreshold>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 f8b5 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <MX_UART4_Init+0x90>)
 8000772:	f004 fe82 	bl	800547a <HAL_UARTEx_SetRxFifoThreshold>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 f8ac 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_UART4_Init+0x90>)
 8000782:	f004 fe03 	bl	800538c <HAL_UARTEx_DisableFifoMode>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 f8a4 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2400002c 	.word	0x2400002c
 8000798:	40004c00 	.word	0x40004c00

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_USART3_UART_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c2:	2208      	movs	r2, #8
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e6:	f003 fc65 	bl	80040b4 <HAL_HalfDuplex_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f872 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007f8:	f004 fe01 	bl	80053fe <HAL_UARTEx_SetTxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f869 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x90>)
 800080a:	f004 fe36 	bl	800547a <HAL_UARTEx_SetRxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f860 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USART3_UART_Init+0x90>)
 800081a:	f004 fdb7 	bl	800538c <HAL_UARTEx_DisableFifoMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f858 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	240000c0 	.word	0x240000c0
 8000830:	40004800 	.word	0x40004800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800083c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000840:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800084c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800085a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008b6:	2307      	movs	r3, #7
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0xa0>)
 80008c2:	f000 fc4f 	bl	8001164 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58024400 	.word	0x58024400
 80008d4:	58020c00 	.word	0x58020c00

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <update_crc>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;


unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008f0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80008f4:	6019      	str	r1, [r3, #0]
 80008f6:	4611      	mov	r1, r2
 80008f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008fc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000900:	4602      	mov	r2, r0
 8000902:	801a      	strh	r2, [r3, #0]
 8000904:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000908:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800090c:	460a      	mov	r2, r1
 800090e:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 8000910:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000918:	4a28      	ldr	r2, [pc, #160]	; (80009bc <update_crc+0xd8>)
 800091a:	4618      	mov	r0, r3
 800091c:	4611      	mov	r1, r2
 800091e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000922:	461a      	mov	r2, r3
 8000924:	f004 fe62 	bl	80055ec <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8000928:	2300      	movs	r3, #0
 800092a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800092e:	e031      	b.n	8000994 <update_crc+0xb0>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000930:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000934:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	0a1b      	lsrs	r3, r3, #8
 800093c:	b29a      	uxth	r2, r3
 800093e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000942:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8000946:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800094a:	6809      	ldr	r1, [r1, #0]
 800094c:	440b      	add	r3, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b29b      	uxth	r3, r3
 8000952:	4053      	eors	r3, r2
 8000954:	b29b      	uxth	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 800095c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000960:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b21a      	sxth	r2, r3
 800096a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 800096e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000972:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000976:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800097a:	b21b      	sxth	r3, r3
 800097c:	4053      	eors	r3, r2
 800097e:	b21a      	sxth	r2, r3
 8000980:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000984:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000988:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 800098a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800098e:	3301      	adds	r3, #1
 8000990:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000994:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000998:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800099c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d3c4      	bcc.n	8000930 <update_crc+0x4c>
    }

    return crc_accum;
 80009a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009aa:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80009ae:	881b      	ldrh	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08005620 	.word	0x08005620

080009c0 <send_dynamixel>:
void send_dynamixel(uint8_t instruction[], size_t array_size){
 80009c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
 80009cc:	466b      	mov	r3, sp
 80009ce:	469a      	mov	sl, r3
	  uint8_t instruction_sent[array_size];
 80009d0:	683e      	ldr	r6, [r7, #0]
 80009d2:	4633      	mov	r3, r6
 80009d4:	3b01      	subs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	2300      	movs	r3, #0
 80009da:	46b0      	mov	r8, r6
 80009dc:	4699      	mov	r9, r3
 80009de:	f04f 0200 	mov.w	r2, #0
 80009e2:	f04f 0300 	mov.w	r3, #0
 80009e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009f2:	2300      	movs	r3, #0
 80009f4:	4634      	mov	r4, r6
 80009f6:	461d      	mov	r5, r3
 80009f8:	f04f 0200 	mov.w	r2, #0
 80009fc:	f04f 0300 	mov.w	r3, #0
 8000a00:	00eb      	lsls	r3, r5, #3
 8000a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a06:	00e2      	lsls	r2, r4, #3
 8000a08:	1df3      	adds	r3, r6, #7
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	ebad 0d03 	sub.w	sp, sp, r3
 8000a12:	466b      	mov	r3, sp
 8000a14:	3300      	adds	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
	  memcpy(instruction_sent, instruction, array_size);
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	6938      	ldr	r0, [r7, #16]
 8000a1e:	f004 fde5 	bl	80055ec <memcpy>
	  unsigned short crc = update_crc(0, instruction_sent, array_size-2);//initializing the message with 4 crc bytes at 0 so we take array_size-2 to not count them in the CRC calculation
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	3b02      	subs	r3, #2
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	6939      	ldr	r1, [r7, #16]
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ff58 	bl	80008e4 <update_crc>
 8000a34:	4603      	mov	r3, r0
 8000a36:	81fb      	strh	r3, [r7, #14]
	  unsigned char crc_l = (unsigned char)(crc & 0x00FF);
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	737b      	strb	r3, [r7, #13]
	  unsigned char crc_h = (unsigned char)((crc >> 8) & 0x00FF);
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	733b      	strb	r3, [r7, #12]
	  instruction_sent[array_size -2]=crc_l;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	3b02      	subs	r3, #2
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	7b79      	ldrb	r1, [r7, #13]
 8000a4c:	54d1      	strb	r1, [r2, r3]
	  instruction_sent[array_size - 1]=crc_h;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	7b39      	ldrb	r1, [r7, #12]
 8000a56:	54d1      	strb	r1, [r2, r3]
	  //while(!__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE));
	  HAL_UART_Transmit(&huart4,instruction_sent,sizeof(instruction_sent),10);
 8000a58:	b2b2      	uxth	r2, r6
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	6939      	ldr	r1, [r7, #16]
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <send_dynamixel+0xb0>)
 8000a60:	f003 fb80 	bl	8004164 <HAL_UART_Transmit>
 8000a64:	46d5      	mov	sp, sl
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a70:	2400002c 	.word	0x2400002c

08000a74 <ToggleLed>:

// Status 1 : Led ON, status 0 : Led OFF
void ToggleLed(int status){
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b08b      	sub	sp, #44	; 0x2c
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	  uint8_t Dynamixel_LED_ON_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <ToggleLed+0x4c>)
 8000a7e:	f107 0418 	add.w	r4, r7, #24
 8000a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a84:	c407      	stmia	r4!, {r0, r1, r2}
 8000a86:	7023      	strb	r3, [r4, #0]
			  /*débutparam, address 65:*/ ,0x41,0x00
			  /*value in the address*/,0x01
	  	  	  /*on calcul le CRC après */,0x00,0x00};

	  uint8_t Dynamixel_LED_OFF_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <ToggleLed+0x50>)
 8000a8a:	f107 0408 	add.w	r4, r7, #8
 8000a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a90:	c407      	stmia	r4!, {r0, r1, r2}
 8000a92:	7023      	strb	r3, [r4, #0]
			  /*débutparam, address 65:*/ ,0x41,0x00
			  /*value in the address*/,0x00
	  	  	  /*on calcul le CRC après */,0x00,0x00};
	  if(status == 1){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d105      	bne.n	8000aa6 <ToggleLed+0x32>
		  send_dynamixel(Dynamixel_LED_ON_XL430, sizeof(Dynamixel_LED_ON_XL430));
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	210d      	movs	r1, #13
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff8d 	bl	80009c0 <send_dynamixel>
	  }
	  if(status == 0){
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <ToggleLed+0x44>
	  		  send_dynamixel(Dynamixel_LED_OFF_XL430, sizeof(Dynamixel_LED_OFF_XL430));
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	210d      	movs	r1, #13
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff84 	bl	80009c0 <send_dynamixel>
	  	  }
}
 8000ab8:	bf00      	nop
 8000aba:	372c      	adds	r7, #44	; 0x2c
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	08005820 	.word	0x08005820
 8000ac4:	08005830 	.word	0x08005830

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x30>)
 8000ad0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x30>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x30>)
 8000ae0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	58024400 	.word	0x58024400

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0bc      	sub	sp, #240	; 0xf0
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0318 	add.w	r3, r7, #24
 8000b18:	22c0      	movs	r2, #192	; 0xc0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fd39 	bl	8005594 <memset>
  if(huart->Instance==UART4)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a58      	ldr	r2, [pc, #352]	; (8000c88 <HAL_UART_MspInit+0x18c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d146      	bne.n	8000bba <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b2c:	f04f 0202 	mov.w	r2, #2
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fcd6 	bl	80024f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b4e:	f7ff fec3 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b52:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000b54:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b58:	4a4c      	ldr	r2, [pc, #304]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000b5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b5e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b62:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000b64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b80:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4837      	ldr	r0, [pc, #220]	; (8000c90 <HAL_UART_MspInit+0x194>)
 8000bb4:	f000 fad6 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bb8:	e061      	b.n	8000c7e <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_UART_MspInit+0x198>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d15c      	bne.n	8000c7e <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bc4:	f04f 0202 	mov.w	r2, #2
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fc8a 	bl	80024f4 <HAL_RCCEx_PeriphCLKConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000be6:	f7ff fe77 	bl	80008d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000bec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bf0:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000bfc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000c0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_UART_MspInit+0x190>)
 8000c1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c40:	2307      	movs	r3, #7
 8000c42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4810      	ldr	r0, [pc, #64]	; (8000c90 <HAL_UART_MspInit+0x194>)
 8000c4e:	f000 fa89 	bl	8001164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0x194>)
 8000c7a:	f000 fa73 	bl	8001164 <HAL_GPIO_Init>
}
 8000c7e:	bf00      	nop
 8000c80:	37f0      	adds	r7, #240	; 0xf0
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004c00 	.word	0x40004c00
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020c00 	.word	0x58020c00
 8000c94:	40004800 	.word	0x40004800

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler+0x4>

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f916 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <SystemInit+0xd0>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a31      	ldr	r2, [pc, #196]	; (8000dbc <SystemInit+0xd0>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <SystemInit+0xd4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d807      	bhi.n	8000d1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <SystemInit+0xd4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 030f 	bic.w	r3, r3, #15
 8000d14:	4a2a      	ldr	r2, [pc, #168]	; (8000dc0 <SystemInit+0xd4>)
 8000d16:	f043 0303 	orr.w	r3, r3, #3
 8000d1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <SystemInit+0xd8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <SystemInit+0xd8>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <SystemInit+0xd8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <SystemInit+0xd8>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4924      	ldr	r1, [pc, #144]	; (8000dc4 <SystemInit+0xd8>)
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <SystemInit+0xdc>)
 8000d36:	4013      	ands	r3, r2
 8000d38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <SystemInit+0xd4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d007      	beq.n	8000d56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <SystemInit+0xd4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 030f 	bic.w	r3, r3, #15
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <SystemInit+0xd4>)
 8000d50:	f043 0303 	orr.w	r3, r3, #3
 8000d54:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <SystemInit+0xd8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <SystemInit+0xd8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <SystemInit+0xd8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <SystemInit+0xd8>)
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <SystemInit+0xe0>)
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <SystemInit+0xd8>)
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <SystemInit+0xe4>)
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <SystemInit+0xd8>)
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <SystemInit+0xe8>)
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <SystemInit+0xd8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <SystemInit+0xd8>)
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <SystemInit+0xe8>)
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <SystemInit+0xd8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <SystemInit+0xd8>)
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <SystemInit+0xe8>)
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <SystemInit+0xd8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <SystemInit+0xd8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <SystemInit+0xd8>)
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <SystemInit+0xd8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <SystemInit+0xec>)
 8000dac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000db0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	52002000 	.word	0x52002000
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dcc:	02020200 	.word	0x02020200
 8000dd0:	01ff0000 	.word	0x01ff0000
 8000dd4:	01010280 	.word	0x01010280
 8000dd8:	52004000 	.word	0x52004000

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de0:	f7ff ff84 	bl	8000cec <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f004 fbcb 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbeb 	bl	80005e8 <main>
  bx  lr
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e1c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e20:	080058b8 	.word	0x080058b8
  ldr r2, =_sbss
 8000e24:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e28:	24000158 	.word	0x24000158

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f962 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e3c:	f001 f984 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_Init+0x68>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	4913      	ldr	r1, [pc, #76]	; (8000e9c <HAL_Init+0x6c>)
 8000e4e:	5ccb      	ldrb	r3, [r1, r3]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	fa22 f303 	lsr.w	r3, r2, r3
 8000e58:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_Init+0x68>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_Init+0x6c>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_Init+0x70>)
 8000e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_Init+0x74>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f814 	bl	8000ea8 <HAL_InitTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e002      	b.n	8000e90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fe1d 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	08005870 	.word	0x08005870
 8000ea0:	24000004 	.word	0x24000004
 8000ea4:	24000000 	.word	0x24000000

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_InitTick+0x60>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e021      	b.n	8000f00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_InitTick+0x64>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_InitTick+0x60>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f939 	bl	800114a <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f911 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x68>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2400000c 	.word	0x2400000c
 8000f0c:	24000000 	.word	0x24000000
 8000f10:	24000008 	.word	0x24000008

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2400000c 	.word	0x2400000c
 8000f38:	24000154 	.word	0x24000154

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	24000154 	.word	0x24000154

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2400000c 	.word	0x2400000c

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <__NVIC_SetPriorityGrouping+0x40>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x40>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00
 8000fe0:	05fa0000 	.word	0x05fa0000

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff47 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb2 	bl	80010bc <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <HAL_GPIO_Init+0x234>)
 8001174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001176:	e194      	b.n	80014a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8186 	beq.w	800149c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d005      	beq.n	80011a8 <HAL_GPIO_Init+0x44>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d130      	bne.n	800120a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011de:	2201      	movs	r2, #1
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f003 0201 	and.w	r2, r3, #1
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b03      	cmp	r3, #3
 8001214:	d017      	beq.n	8001246 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d123      	bne.n	800129a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	69b9      	ldr	r1, [r7, #24]
 8001296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0203 	and.w	r2, r3, #3
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80e0 	beq.w	800149c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_GPIO_Init+0x238>)
 80012de:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012e2:	4a2e      	ldr	r2, [pc, #184]	; (800139c <HAL_GPIO_Init+0x238>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_GPIO_Init+0x238>)
 80012ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <HAL_GPIO_Init+0x23c>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_GPIO_Init+0x240>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d052      	beq.n	80013cc <HAL_GPIO_Init+0x268>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_GPIO_Init+0x244>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d031      	beq.n	8001392 <HAL_GPIO_Init+0x22e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_GPIO_Init+0x248>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02b      	beq.n	800138e <HAL_GPIO_Init+0x22a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_GPIO_Init+0x24c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x226>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_GPIO_Init+0x250>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x222>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HAL_GPIO_Init+0x254>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x21e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_GPIO_Init+0x258>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x21a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_GPIO_Init+0x25c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x216>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_GPIO_Init+0x260>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x212>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_GPIO_Init+0x264>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x20e>
 800136e:	2309      	movs	r3, #9
 8001370:	e02d      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 8001372:	230a      	movs	r3, #10
 8001374:	e02b      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 8001376:	2308      	movs	r3, #8
 8001378:	e029      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 800137a:	2307      	movs	r3, #7
 800137c:	e027      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 800137e:	2306      	movs	r3, #6
 8001380:	e025      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 8001382:	2305      	movs	r3, #5
 8001384:	e023      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 8001386:	2304      	movs	r3, #4
 8001388:	e021      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 800138a:	2303      	movs	r3, #3
 800138c:	e01f      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 800138e:	2302      	movs	r3, #2
 8001390:	e01d      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 8001392:	2301      	movs	r3, #1
 8001394:	e01b      	b.n	80013ce <HAL_GPIO_Init+0x26a>
 8001396:	bf00      	nop
 8001398:	58000080 	.word	0x58000080
 800139c:	58024400 	.word	0x58024400
 80013a0:	58000400 	.word	0x58000400
 80013a4:	58020000 	.word	0x58020000
 80013a8:	58020400 	.word	0x58020400
 80013ac:	58020800 	.word	0x58020800
 80013b0:	58020c00 	.word	0x58020c00
 80013b4:	58021000 	.word	0x58021000
 80013b8:	58021400 	.word	0x58021400
 80013bc:	58021800 	.word	0x58021800
 80013c0:	58021c00 	.word	0x58021c00
 80013c4:	58022000 	.word	0x58022000
 80013c8:	58022400 	.word	0x58022400
 80013cc:	2300      	movs	r3, #0
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	f002 0203 	and.w	r2, r2, #3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4093      	lsls	r3, r2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013de:	4938      	ldr	r1, [pc, #224]	; (80014c0 <HAL_GPIO_Init+0x35c>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800141a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	3301      	adds	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f ae63 	bne.w	8001178 <HAL_GPIO_Init+0x14>
  }
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3724      	adds	r7, #36	; 0x24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	58000400 	.word	0x58000400

080014c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	2b06      	cmp	r3, #6
 80014d6:	d00a      	beq.n	80014ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <HAL_PWREx_ConfigSupply+0xb0>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e040      	b.n	800156c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e03e      	b.n	800156c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_PWREx_ConfigSupply+0xb0>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014f6:	491f      	ldr	r1, [pc, #124]	; (8001574 <HAL_PWREx_ConfigSupply+0xb0>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014fe:	f7ff fd1d 	bl	8000f3c <HAL_GetTick>
 8001502:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001504:	e009      	b.n	800151a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001506:	f7ff fd19 	bl	8000f3c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001514:	d901      	bls.n	800151a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e028      	b.n	800156c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_PWREx_ConfigSupply+0xb0>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001526:	d1ee      	bne.n	8001506 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b1e      	cmp	r3, #30
 800152c:	d008      	beq.n	8001540 <HAL_PWREx_ConfigSupply+0x7c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b2e      	cmp	r3, #46	; 0x2e
 8001532:	d005      	beq.n	8001540 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b1d      	cmp	r3, #29
 8001538:	d002      	beq.n	8001540 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b2d      	cmp	r3, #45	; 0x2d
 800153e:	d114      	bne.n	800156a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001540:	f7ff fcfc 	bl	8000f3c <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001546:	e009      	b.n	800155c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001548:	f7ff fcf8 	bl	8000f3c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001556:	d901      	bls.n	800155c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e007      	b.n	800156c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_PWREx_ConfigSupply+0xb0>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d1ee      	bne.n	8001548 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024800 	.word	0x58024800

08001578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	f000 bc1f 	b.w	8001dca <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80b3 	beq.w	8001700 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159a:	4b95      	ldr	r3, [pc, #596]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015a4:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d007      	beq.n	80015c0 <HAL_RCC_OscConfig+0x48>
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	2b18      	cmp	r3, #24
 80015b4:	d112      	bne.n	80015dc <HAL_RCC_OscConfig+0x64>
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d10d      	bne.n	80015dc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8098 	beq.w	80016fe <HAL_RCC_OscConfig+0x186>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 8093 	bne.w	80016fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e3f6      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x7c>
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a81      	ldr	r2, [pc, #516]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e058      	b.n	80016a6 <HAL_RCC_OscConfig+0x12e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d112      	bne.n	8001622 <HAL_RCC_OscConfig+0xaa>
 80015fc:	4b7c      	ldr	r3, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a7b      	ldr	r2, [pc, #492]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b79      	ldr	r3, [pc, #484]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a78      	ldr	r2, [pc, #480]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800160e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e041      	b.n	80016a6 <HAL_RCC_OscConfig+0x12e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162a:	d112      	bne.n	8001652 <HAL_RCC_OscConfig+0xda>
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800163e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a69      	ldr	r2, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800164a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e029      	b.n	80016a6 <HAL_RCC_OscConfig+0x12e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800165a:	d112      	bne.n	8001682 <HAL_RCC_OscConfig+0x10a>
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b61      	ldr	r3, [pc, #388]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a60      	ldr	r2, [pc, #384]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800166e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a5d      	ldr	r2, [pc, #372]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e011      	b.n	80016a6 <HAL_RCC_OscConfig+0x12e>
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a5a      	ldr	r2, [pc, #360]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80016a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d013      	beq.n	80016d6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fc45 	bl	8000f3c <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b6:	f7ff fc41 	bl	8000f3c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	; 0x64
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e380      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c8:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x13e>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fc31 	bl	8000f3c <HAL_GetTick>
 80016da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016de:	f7ff fc2d 	bl	8000f3c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e36c      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x166>
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 808c 	beq.w	8001826 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001716:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <HAL_RCC_OscConfig+0x1bc>
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b18      	cmp	r3, #24
 8001728:	d137      	bne.n	800179a <HAL_RCC_OscConfig+0x222>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d132      	bne.n	800179a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x1d4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e33e      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 0219 	bic.w	r2, r3, #25
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff fbed 	bl	8000f3c <HAL_GetTick>
 8001762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff fbe9 	bl	8000f3c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e328      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	061b      	lsls	r3, r3, #24
 8001792:	4917      	ldr	r1, [pc, #92]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001798:	e045      	b.n	8001826 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d028      	beq.n	80017f4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0219 	bic.w	r2, r3, #25
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	4910      	ldr	r1, [pc, #64]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fbc2 	bl	8000f3c <HAL_GetTick>
 80017b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017bc:	f7ff fbbe 	bl	8000f3c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e2fd      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	061b      	lsls	r3, r3, #24
 80017e8:	4901      	ldr	r1, [pc, #4]	; (80017f0 <HAL_RCC_OscConfig+0x278>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
 80017ee:	e01a      	b.n	8001826 <HAL_RCC_OscConfig+0x2ae>
 80017f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f4:	4b97      	ldr	r3, [pc, #604]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a96      	ldr	r2, [pc, #600]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb9c 	bl	8000f3c <HAL_GetTick>
 8001804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fb98 	bl	8000f3c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e2d7      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800181a:	4b8e      	ldr	r3, [pc, #568]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	d06a      	beq.n	8001908 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800183a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800183c:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d007      	beq.n	8001858 <HAL_RCC_OscConfig+0x2e0>
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b18      	cmp	r3, #24
 800184c:	d11b      	bne.n	8001886 <HAL_RCC_OscConfig+0x30e>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d116      	bne.n	8001886 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001858:	4b7e      	ldr	r3, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x2f8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b80      	cmp	r3, #128	; 0x80
 800186a:	d001      	beq.n	8001870 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e2ac      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001870:	4b78      	ldr	r3, [pc, #480]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	4975      	ldr	r1, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001884:	e040      	b.n	8001908 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d023      	beq.n	80018d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800188e:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a70      	ldr	r2, [pc, #448]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fb4f 	bl	8000f3c <HAL_GetTick>
 800189e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018a2:	f7ff fb4b 	bl	8000f3c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e28a      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018b4:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018c0:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	4961      	ldr	r1, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
 80018d4:	e018      	b.n	8001908 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018d6:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a5e      	ldr	r2, [pc, #376]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80018dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb2b 	bl	8000f3c <HAL_GetTick>
 80018e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018ea:	f7ff fb27 	bl	8000f3c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e266      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018fc:	4b55      	ldr	r3, [pc, #340]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d036      	beq.n	8001982 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d019      	beq.n	8001950 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191c:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 800191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001920:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff fb08 	bl	8000f3c <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fb04 	bl	8000f3c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e243      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x3b8>
 800194e:	e018      	b.n	8001982 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	4a3f      	ldr	r2, [pc, #252]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff faee 	bl	8000f3c <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff faea 	bl	8000f3c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e229      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b00      	cmp	r3, #0
 800198c:	d036      	beq.n	80019fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d019      	beq.n	80019ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2e      	ldr	r2, [pc, #184]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019a2:	f7ff facb 	bl	8000f3c <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019aa:	f7ff fac7 	bl	8000f3c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e206      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x432>
 80019c8:	e018      	b.n	80019fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80019d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fab1 	bl	8000f3c <HAL_GetTick>
 80019da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019de:	f7ff faad 	bl	8000f3c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1ec      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80af 	beq.w	8001b68 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_RCC_OscConfig+0x4e0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_RCC_OscConfig+0x4e0>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a16:	f7ff fa91 	bl	8000f3c <HAL_GetTick>
 8001a1a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fa8d 	bl	8000f3c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b64      	cmp	r3, #100	; 0x64
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1cc      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x4e0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4e4>
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a02      	ldr	r2, [pc, #8]	; (8001a54 <HAL_RCC_OscConfig+0x4dc>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	e05b      	b.n	8001b0a <HAL_RCC_OscConfig+0x592>
 8001a52:	bf00      	nop
 8001a54:	58024400 	.word	0x58024400
 8001a58:	58024800 	.word	0x58024800
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0x512>
 8001a64:	4b9d      	ldr	r3, [pc, #628]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a9c      	ldr	r2, [pc, #624]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	4b9a      	ldr	r3, [pc, #616]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a99      	ldr	r2, [pc, #612]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	4b97      	ldr	r3, [pc, #604]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a96      	ldr	r2, [pc, #600]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a82:	f023 0304 	bic.w	r3, r3, #4
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	e03f      	b.n	8001b0a <HAL_RCC_OscConfig+0x592>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x540>
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a91      	ldr	r2, [pc, #580]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	4a8e      	ldr	r2, [pc, #568]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aaa:	4b8c      	ldr	r3, [pc, #560]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a8b      	ldr	r2, [pc, #556]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	e028      	b.n	8001b0a <HAL_RCC_OscConfig+0x592>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b85      	cmp	r3, #133	; 0x85
 8001abe:	d112      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x56e>
 8001ac0:	4b86      	ldr	r3, [pc, #536]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a85      	ldr	r2, [pc, #532]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a82      	ldr	r2, [pc, #520]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	4b80      	ldr	r3, [pc, #512]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	4a7f      	ldr	r2, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae4:	e011      	b.n	8001b0a <HAL_RCC_OscConfig+0x592>
 8001ae6:	4b7d      	ldr	r3, [pc, #500]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a7c      	ldr	r2, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a79      	ldr	r2, [pc, #484]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a76      	ldr	r2, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d015      	beq.n	8001b3e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa13 	bl	8000f3c <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fa0f 	bl	8000f3c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e14c      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ee      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5a2>
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff f9fd 	bl	8000f3c <HAL_GetTick>
 8001b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff f9f9 	bl	8000f3c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e136      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b5c:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ee      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 812b 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b72:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7a:	2b18      	cmp	r3, #24
 8001b7c:	f000 80bb 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f040 8095 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff f9d1 	bl	8000f3c <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff f9cd 	bl	8000f3c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e10c      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc0:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x768>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	4942      	ldr	r1, [pc, #264]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	628b      	str	r3, [r1, #40]	; 0x28
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	3b01      	subs	r3, #1
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c06:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c0c:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <HAL_RCC_OscConfig+0x76c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c24:	00d2      	lsls	r2, r2, #3
 8001c26:	492d      	ldr	r1, [pc, #180]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f023 020c 	bic.w	r2, r3, #12
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4928      	ldr	r1, [pc, #160]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f023 0202 	bic.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4924      	ldr	r1, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f956 	bl	8000f3c <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f952 	bl	8000f3c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e091      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x71c>
 8001cb2:	e089      	b.n	8001dc8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_RCC_OscConfig+0x764>)
 8001cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f93c 	bl	8000f3c <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f938 	bl	8000f3c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d908      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e077      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
 8001cda:	bf00      	nop
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	fffffc0c 	.word	0xfffffc0c
 8001ce4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e9      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x750>
 8001cf4:	e068      	b.n	8001dc8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d031      	beq.n	8001d6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d12a      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d122      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d11a      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d111      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d108      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	0e1b      	lsrs	r3, r3, #24
 8001d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e02b      	b.n	8001dca <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	08db      	lsrs	r3, r3, #3
 8001d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d7c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d01f      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d94:	f7ff f8d2 	bl	8000f3c <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff f8ce 	bl	8000f3c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d0f9      	beq.n	8001d9c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_OscConfig+0x860>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001db4:	00d2      	lsls	r2, r2, #3
 8001db6:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_RCC_OscConfig+0x85c>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3730      	adds	r7, #48	; 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	58024400 	.word	0x58024400
 8001dd8:	ffff0007 	.word	0xffff0007

08001ddc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e19c      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b8a      	ldr	r3, [pc, #552]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b87      	ldr	r3, [pc, #540]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 020f 	bic.w	r2, r3, #15
 8001e06:	4985      	ldr	r1, [pc, #532]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b83      	ldr	r3, [pc, #524]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e184      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d908      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e3c:	4b78      	ldr	r3, [pc, #480]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	4975      	ldr	r1, [pc, #468]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	4b70      	ldr	r3, [pc, #448]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e6a:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	496a      	ldr	r1, [pc, #424]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	4b64      	ldr	r3, [pc, #400]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d908      	bls.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e98:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	495e      	ldr	r1, [pc, #376]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d908      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4953      	ldr	r1, [pc, #332]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d908      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f023 020f 	bic.w	r2, r3, #15
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4947      	ldr	r1, [pc, #284]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d055      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f12:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4940      	ldr	r1, [pc, #256]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d121      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0f6      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d115      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0ea      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0de      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d6      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f023 0207 	bic.w	r2, r3, #7
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4925      	ldr	r1, [pc, #148]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8e:	f7fe ffd5 	bl	8000f3c <HAL_GetTick>
 8001f92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe ffd1 	bl	8000f3c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0be      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d1eb      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d010      	beq.n	8001fec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d208      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f023 020f 	bic.w	r2, r3, #15
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	490e      	ldr	r1, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d214      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	4906      	ldr	r1, [pc, #24]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_RCC_ClockConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e086      	b.n	800212a <HAL_RCC_ClockConfig+0x34e>
 800201c:	52002000 	.word	0x52002000
 8002020:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800203c:	429a      	cmp	r2, r3
 800203e:	d208      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4939      	ldr	r1, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 800204e:	4313      	orrs	r3, r2
 8002050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800206a:	429a      	cmp	r2, r3
 800206c:	d208      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	492e      	ldr	r1, [pc, #184]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 800207c:	4313      	orrs	r3, r2
 800207e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002098:	429a      	cmp	r2, r3
 800209a:	d208      	bcs.n	80020ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4922      	ldr	r1, [pc, #136]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d208      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4917      	ldr	r1, [pc, #92]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80020dc:	f000 f834 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	4912      	ldr	r1, [pc, #72]	; (8002138 <HAL_RCC_ClockConfig+0x35c>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x358>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_RCC_ClockConfig+0x35c>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x360>)
 8002112:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x364>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x368>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fec2 	bl	8000ea8 <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
 8002126:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	58024400 	.word	0x58024400
 8002138:	08005870 	.word	0x08005870
 800213c:	24000004 	.word	0x24000004
 8002140:	24000000 	.word	0x24000000
 8002144:	24000008 	.word	0x24000008

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214e:	4bb3      	ldr	r3, [pc, #716]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002156:	2b18      	cmp	r3, #24
 8002158:	f200 8155 	bhi.w	8002406 <HAL_RCC_GetSysClockFreq+0x2be>
 800215c:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <HAL_RCC_GetSysClockFreq+0x1c>)
 800215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002162:	bf00      	nop
 8002164:	080021c9 	.word	0x080021c9
 8002168:	08002407 	.word	0x08002407
 800216c:	08002407 	.word	0x08002407
 8002170:	08002407 	.word	0x08002407
 8002174:	08002407 	.word	0x08002407
 8002178:	08002407 	.word	0x08002407
 800217c:	08002407 	.word	0x08002407
 8002180:	08002407 	.word	0x08002407
 8002184:	080021ef 	.word	0x080021ef
 8002188:	08002407 	.word	0x08002407
 800218c:	08002407 	.word	0x08002407
 8002190:	08002407 	.word	0x08002407
 8002194:	08002407 	.word	0x08002407
 8002198:	08002407 	.word	0x08002407
 800219c:	08002407 	.word	0x08002407
 80021a0:	08002407 	.word	0x08002407
 80021a4:	080021f5 	.word	0x080021f5
 80021a8:	08002407 	.word	0x08002407
 80021ac:	08002407 	.word	0x08002407
 80021b0:	08002407 	.word	0x08002407
 80021b4:	08002407 	.word	0x08002407
 80021b8:	08002407 	.word	0x08002407
 80021bc:	08002407 	.word	0x08002407
 80021c0:	08002407 	.word	0x08002407
 80021c4:	080021fb 	.word	0x080021fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021c8:	4b94      	ldr	r3, [pc, #592]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021d4:	4b91      	ldr	r3, [pc, #580]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	4a90      	ldr	r2, [pc, #576]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021e6:	e111      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021e8:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021ea:	61bb      	str	r3, [r7, #24]
      break;
 80021ec:	e10e      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021ee:	4b8d      	ldr	r3, [pc, #564]	; (8002424 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021f0:	61bb      	str	r3, [r7, #24]
      break;
 80021f2:	e10b      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021f6:	61bb      	str	r3, [r7, #24]
      break;
 80021f8:	e108      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002204:	4b85      	ldr	r3, [pc, #532]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800220e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002210:	4b82      	ldr	r3, [pc, #520]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800221a:	4b80      	ldr	r3, [pc, #512]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221e:	08db      	lsrs	r3, r3, #3
 8002220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80e1 	beq.w	8002400 <HAL_RCC_GetSysClockFreq+0x2b8>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	f000 8083 	beq.w	800234c <HAL_RCC_GetSysClockFreq+0x204>
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b02      	cmp	r3, #2
 800224a:	f200 80a1 	bhi.w	8002390 <HAL_RCC_GetSysClockFreq+0x248>
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x114>
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d056      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x1c0>
 800225a:	e099      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800225c:	4b6f      	ldr	r3, [pc, #444]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02d      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002268:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800242c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022c2:	e087      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002430 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800242c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002306:	e065      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002434 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b40      	ldr	r3, [pc, #256]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800242c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800234a:	e043      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002438 <HAL_RCC_GetSysClockFreq+0x2f0>
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800242c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800238e:	e021      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002434 <HAL_RCC_GetSysClockFreq+0x2ec>
 800239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800242c <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	0a5b      	lsrs	r3, r3, #9
 80023da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023de:	3301      	adds	r3, #1
 80023e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80023f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f8:	ee17 3a90 	vmov	r3, s15
 80023fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023fe:	e005      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
      break;
 8002404:	e002      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002408:	61bb      	str	r3, [r7, #24]
      break;
 800240a:	bf00      	nop
  }

  return sysclockfreq;
 800240c:	69bb      	ldr	r3, [r7, #24]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	58024400 	.word	0x58024400
 8002420:	03d09000 	.word	0x03d09000
 8002424:	003d0900 	.word	0x003d0900
 8002428:	007a1200 	.word	0x007a1200
 800242c:	46000000 	.word	0x46000000
 8002430:	4c742400 	.word	0x4c742400
 8002434:	4a742400 	.word	0x4a742400
 8002438:	4af42400 	.word	0x4af42400

0800243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002442:	f7ff fe81 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_GetHCLKFreq+0x50>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490f      	ldr	r1, [pc, #60]	; (8002490 <HAL_RCC_GetHCLKFreq+0x54>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_GetHCLKFreq+0x50>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_GetHCLKFreq+0x54>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_RCC_GetHCLKFreq+0x58>)
 8002478:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_RCC_GetHCLKFreq+0x5c>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_RCC_GetHCLKFreq+0x58>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	58024400 	.word	0x58024400
 8002490:	08005870 	.word	0x08005870
 8002494:	24000004 	.word	0x24000004
 8002498:	24000000 	.word	0x24000000

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80024a0:	f7ff ffcc 	bl	800243c <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4904      	ldr	r1, [pc, #16]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	58024400 	.word	0x58024400
 80024c4:	08005870 	.word	0x08005870

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80024cc:	f7ff ffb6 	bl	800243c <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	58024400 	.word	0x58024400
 80024f0:	08005870 	.word	0x08005870

080024f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f8:	b0c8      	sub	sp, #288	; 0x120
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002500:	2300      	movs	r3, #0
 8002502:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002506:	2300      	movs	r3, #0
 8002508:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800250c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002518:	2500      	movs	r5, #0
 800251a:	ea54 0305 	orrs.w	r3, r4, r5
 800251e:	d049      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002526:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800252a:	d02f      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800252c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002530:	d828      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002536:	d01a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800253c:	d822      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002546:	d007      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002548:	e01c      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254a:	4ba7      	ldr	r3, [pc, #668]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	4aa6      	ldr	r2, [pc, #664]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002556:	e01a      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800255c:	3308      	adds	r3, #8
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f001 fc43 	bl	8003dec <RCCEx_PLL2_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800256c:	e00f      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800256e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002572:	3328      	adds	r3, #40	; 0x28
 8002574:	2102      	movs	r1, #2
 8002576:	4618      	mov	r0, r3
 8002578:	f001 fcea 	bl	8003f50 <RCCEx_PLL3_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002582:	e004      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800258a:	e000      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800258c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800258e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002596:	4b94      	ldr	r3, [pc, #592]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800259e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a4:	4a90      	ldr	r2, [pc, #576]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6513      	str	r3, [r2, #80]	; 0x50
 80025aa:	e003      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80025c0:	f04f 0900 	mov.w	r9, #0
 80025c4:	ea58 0309 	orrs.w	r3, r8, r9
 80025c8:	d047      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80025ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d82a      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80025d4:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	080025f1 	.word	0x080025f1
 80025e0:	080025ff 	.word	0x080025ff
 80025e4:	08002615 	.word	0x08002615
 80025e8:	08002633 	.word	0x08002633
 80025ec:	08002633 	.word	0x08002633
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f0:	4b7d      	ldr	r3, [pc, #500]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025fc:	e01a      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002602:	3308      	adds	r3, #8
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f001 fbf0 	bl	8003dec <RCCEx_PLL2_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002612:	e00f      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002618:	3328      	adds	r3, #40	; 0x28
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fc97 	bl	8003f50 <RCCEx_PLL3_Config>
 8002622:	4603      	mov	r3, r0
 8002624:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002628:	e004      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002630:	e000      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002634:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800263e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002640:	f023 0107 	bic.w	r1, r3, #7
 8002644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a67      	ldr	r2, [pc, #412]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264c:	430b      	orrs	r3, r1
 800264e:	6513      	str	r3, [r2, #80]	; 0x50
 8002650:	e003      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002652:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002656:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800265a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002666:	f04f 0b00 	mov.w	fp, #0
 800266a:	ea5a 030b 	orrs.w	r3, sl, fp
 800266e:	d054      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800267a:	d036      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800267c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002680:	d82f      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002686:	d032      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268c:	d829      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800268e:	2bc0      	cmp	r3, #192	; 0xc0
 8002690:	d02f      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002692:	2bc0      	cmp	r3, #192	; 0xc0
 8002694:	d825      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d018      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800269a:	2b80      	cmp	r3, #128	; 0x80
 800269c:	d821      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d007      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80026a6:	e01c      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4a4e      	ldr	r2, [pc, #312]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80026b4:	e01e      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ba:	3308      	adds	r3, #8
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 fb94 	bl	8003dec <RCCEx_PLL2_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80026ca:	e013      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026d0:	3328      	adds	r3, #40	; 0x28
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fc3b 	bl	8003f50 <RCCEx_PLL3_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80026e0:	e008      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026e8:	e004      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80026ea:	bf00      	nop
 80026ec:	e002      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80026ee:	bf00      	nop
 80026f0:	e000      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80026f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	4a37      	ldr	r2, [pc, #220]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800270c:	430b      	orrs	r3, r1
 800270e:	6513      	str	r3, [r2, #80]	; 0x50
 8002710:	e003      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002712:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002716:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800271a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002726:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002730:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002734:	460b      	mov	r3, r1
 8002736:	4313      	orrs	r3, r2
 8002738:	d05c      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800273a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002744:	d03b      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002746:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800274a:	d834      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800274c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002750:	d037      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002756:	d82e      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002758:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800275c:	d033      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800275e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002762:	d828      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d01a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d822      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002778:	d007      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800277a:	e01c      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002788:	e01e      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278e:	3308      	adds	r3, #8
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fb2a 	bl	8003dec <RCCEx_PLL2_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800279e:	e013      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a4:	3328      	adds	r3, #40	; 0x28
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fbd1 	bl	8003f50 <RCCEx_PLL3_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80027b4:	e008      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027bc:	e004      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80027be:	bf00      	nop
 80027c0:	e002      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80027c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80027d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027de:	4a02      	ldr	r2, [pc, #8]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6513      	str	r3, [r2, #80]	; 0x50
 80027e4:	e006      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80027e6:	bf00      	nop
 80027e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800280a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800280e:	460b      	mov	r3, r1
 8002810:	4313      	orrs	r3, r2
 8002812:	d03a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	2b30      	cmp	r3, #48	; 0x30
 800281c:	d01f      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800281e:	2b30      	cmp	r3, #48	; 0x30
 8002820:	d819      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002822:	2b20      	cmp	r3, #32
 8002824:	d00c      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002826:	2b20      	cmp	r3, #32
 8002828:	d815      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800282e:	2b10      	cmp	r3, #16
 8002830:	d111      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002832:	4bae      	ldr	r3, [pc, #696]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	4aad      	ldr	r2, [pc, #692]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800283e:	e011      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002844:	3308      	adds	r3, #8
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f001 facf 	bl	8003dec <RCCEx_PLL2_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002854:	e006      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800285c:	e002      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002864:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800286c:	4b9f      	ldr	r3, [pc, #636]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	4a9c      	ldr	r2, [pc, #624]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800287c:	430b      	orrs	r3, r1
 800287e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002880:	e003      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002882:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002886:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800288a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002896:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80028a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4313      	orrs	r3, r2
 80028a8:	d051      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80028aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b4:	d035      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ba:	d82e      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80028bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028c0:	d031      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80028c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028c6:	d828      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80028c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028cc:	d01a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80028ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d2:	d822      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028dc:	d007      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80028de:	e01c      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e0:	4b82      	ldr	r3, [pc, #520]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	4a81      	ldr	r2, [pc, #516]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028ec:	e01c      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028f2:	3308      	adds	r3, #8
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 fa78 	bl	8003dec <RCCEx_PLL2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002902:	e011      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002908:	3328      	adds	r3, #40	; 0x28
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f001 fb1f 	bl	8003f50 <RCCEx_PLL3_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002918:	e006      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002920:	e002      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002928:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002930:	4b6e      	ldr	r3, [pc, #440]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800293c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800293e:	4a6b      	ldr	r2, [pc, #428]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002940:	430b      	orrs	r3, r1
 8002942:	6513      	str	r3, [r2, #80]	; 0x50
 8002944:	e003      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002946:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800294a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800294e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800295a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800295e:	2300      	movs	r3, #0
 8002960:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002964:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002968:	460b      	mov	r3, r1
 800296a:	4313      	orrs	r3, r2
 800296c:	d053      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800296e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d033      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800297a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297e:	d82c      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002984:	d02f      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800298a:	d826      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800298c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002990:	d02b      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002996:	d820      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800299c:	d012      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800299e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a2:	d81a      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d115      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b2:	3308      	adds	r3, #8
 80029b4:	2101      	movs	r1, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fa18 	bl	8003dec <RCCEx_PLL2_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029c2:	e015      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c8:	3328      	adds	r3, #40	; 0x28
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fabf 	bl	8003f50 <RCCEx_PLL3_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029d8:	e00a      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029e0:	e006      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029e2:	bf00      	nop
 80029e4:	e004      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80029ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029f8:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a06:	4a39      	ldr	r2, [pc, #228]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6513      	str	r3, [r2, #80]	; 0x50
 8002a0c:	e003      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a2c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4313      	orrs	r3, r2
 8002a34:	d060      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a3e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002a42:	d039      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002a44:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002a48:	d832      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a4e:	d035      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a54:	d82c      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5a:	d031      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d826      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a66:	d02d      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002a68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a6c:	d820      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a72:	d012      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a78:	d81a      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d024      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a82:	d115      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a88:	3308      	adds	r3, #8
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 f9ad 	bl	8003dec <RCCEx_PLL2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a98:	e017      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a9e:	3328      	adds	r3, #40	; 0x28
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 fa54 	bl	8003f50 <RCCEx_PLL3_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002aae:	e00c      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ab6:	e008      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ab8:	bf00      	nop
 8002aba:	e006      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002abc:	bf00      	nop
 8002abe:	e004      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ac0:	bf00      	nop
 8002ac2:	e002      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ac4:	bf00      	nop
 8002ac6:	e000      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10e      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ade:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ae2:	4a02      	ldr	r2, [pc, #8]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002aea:	bf00      	nop
 8002aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002af4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b12:	460b      	mov	r3, r1
 8002b14:	4313      	orrs	r3, r2
 8002b16:	d037      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b22:	d00e      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b28:	d816      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b32:	d111      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b34:	4bc4      	ldr	r3, [pc, #784]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	4ac3      	ldr	r2, [pc, #780]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b40:	e00f      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b46:	3308      	adds	r3, #8
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 f94e 	bl	8003dec <RCCEx_PLL2_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b56:	e004      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b5e:	e000      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b6a:	4bb7      	ldr	r3, [pc, #732]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b78:	4ab3      	ldr	r2, [pc, #716]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6513      	str	r3, [r2, #80]	; 0x50
 8002b7e:	e003      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	d039      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d81c      	bhi.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002bf5 	.word	0x08002bf5
 8002bbc:	08002bc9 	.word	0x08002bc9
 8002bc0:	08002bd7 	.word	0x08002bd7
 8002bc4:	08002bf5 	.word	0x08002bf5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc8:	4b9f      	ldr	r3, [pc, #636]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	4a9e      	ldr	r2, [pc, #632]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bd4:	e00f      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bda:	3308      	adds	r3, #8
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 f904 	bl	8003dec <RCCEx_PLL2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bea:	e004      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bfe:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f023 0103 	bic.w	r1, r3, #3
 8002c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	4a8e      	ldr	r2, [pc, #568]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c12:	e003      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c36:	460b      	mov	r3, r1
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f000 8099 	beq.w	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c3e:	4b83      	ldr	r3, [pc, #524]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a82      	ldr	r2, [pc, #520]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe f977 	bl	8000f3c <HAL_GetTick>
 8002c4e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c52:	e00b      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe f972 	bl	8000f3c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	; 0x64
 8002c62:	d903      	bls.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c6a:	e005      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c6c:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ed      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002c78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d173      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c80:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c8c:	4053      	eors	r3, r2
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d015      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c96:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca2:	4b69      	ldr	r3, [pc, #420]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a68      	ldr	r2, [pc, #416]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cae:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a65      	ldr	r2, [pc, #404]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cba:	4a63      	ldr	r2, [pc, #396]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	d118      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f934 	bl	8000f3c <HAL_GetTick>
 8002cd4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd8:	e00d      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe f92f 	bl	8000f3c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002ce4:	1ad2      	subs	r2, r2, r3
 8002ce6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d903      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002cf4:	e005      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0eb      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002d02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d129      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d1a:	d10e      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d2c:	091a      	lsrs	r2, r3, #4
 8002d2e:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	4a45      	ldr	r2, [pc, #276]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6113      	str	r3, [r2, #16]
 8002d38:	e005      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002d3a:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	4a42      	ldr	r2, [pc, #264]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d44:	6113      	str	r3, [r2, #16]
 8002d46:	4b40      	ldr	r3, [pc, #256]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	4a3c      	ldr	r2, [pc, #240]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	e008      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002d66:	e003      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f002 0301 	and.w	r3, r2, #1
 8002d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f000 8090 	beq.w	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9a:	2b28      	cmp	r3, #40	; 0x28
 8002d9c:	d870      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002e89 	.word	0x08002e89
 8002da8:	08002e81 	.word	0x08002e81
 8002dac:	08002e81 	.word	0x08002e81
 8002db0:	08002e81 	.word	0x08002e81
 8002db4:	08002e81 	.word	0x08002e81
 8002db8:	08002e81 	.word	0x08002e81
 8002dbc:	08002e81 	.word	0x08002e81
 8002dc0:	08002e81 	.word	0x08002e81
 8002dc4:	08002e55 	.word	0x08002e55
 8002dc8:	08002e81 	.word	0x08002e81
 8002dcc:	08002e81 	.word	0x08002e81
 8002dd0:	08002e81 	.word	0x08002e81
 8002dd4:	08002e81 	.word	0x08002e81
 8002dd8:	08002e81 	.word	0x08002e81
 8002ddc:	08002e81 	.word	0x08002e81
 8002de0:	08002e81 	.word	0x08002e81
 8002de4:	08002e6b 	.word	0x08002e6b
 8002de8:	08002e81 	.word	0x08002e81
 8002dec:	08002e81 	.word	0x08002e81
 8002df0:	08002e81 	.word	0x08002e81
 8002df4:	08002e81 	.word	0x08002e81
 8002df8:	08002e81 	.word	0x08002e81
 8002dfc:	08002e81 	.word	0x08002e81
 8002e00:	08002e81 	.word	0x08002e81
 8002e04:	08002e89 	.word	0x08002e89
 8002e08:	08002e81 	.word	0x08002e81
 8002e0c:	08002e81 	.word	0x08002e81
 8002e10:	08002e81 	.word	0x08002e81
 8002e14:	08002e81 	.word	0x08002e81
 8002e18:	08002e81 	.word	0x08002e81
 8002e1c:	08002e81 	.word	0x08002e81
 8002e20:	08002e81 	.word	0x08002e81
 8002e24:	08002e89 	.word	0x08002e89
 8002e28:	08002e81 	.word	0x08002e81
 8002e2c:	08002e81 	.word	0x08002e81
 8002e30:	08002e81 	.word	0x08002e81
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e81 	.word	0x08002e81
 8002e3c:	08002e81 	.word	0x08002e81
 8002e40:	08002e81 	.word	0x08002e81
 8002e44:	08002e89 	.word	0x08002e89
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58024800 	.word	0x58024800
 8002e50:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e58:	3308      	adds	r3, #8
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 ffc5 	bl	8003dec <RCCEx_PLL2_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e68:	e00f      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6e:	3328      	adds	r3, #40	; 0x28
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 f86c 	bl	8003f50 <RCCEx_PLL3_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e7e:	e004      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e92:	4bc0      	ldr	r3, [pc, #768]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	4abc      	ldr	r2, [pc, #752]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6553      	str	r3, [r2, #84]	; 0x54
 8002ea8:	e003      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f002 0302 	and.w	r3, r2, #2
 8002ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ec8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	d043      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d824      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f31 	.word	0x08002f31
 8002ee8:	08002efd 	.word	0x08002efd
 8002eec:	08002f13 	.word	0x08002f13
 8002ef0:	08002f31 	.word	0x08002f31
 8002ef4:	08002f31 	.word	0x08002f31
 8002ef8:	08002f31 	.word	0x08002f31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f00:	3308      	adds	r3, #8
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 ff71 	bl	8003dec <RCCEx_PLL2_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f10:	e00f      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f16:	3328      	adds	r3, #40	; 0x28
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f818 	bl	8003f50 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f26:	e004      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f2e:	e000      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10b      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f3a:	4b96      	ldr	r3, [pc, #600]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f023 0107 	bic.w	r1, r3, #7
 8002f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4a:	4a92      	ldr	r2, [pc, #584]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6553      	str	r3, [r2, #84]	; 0x54
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f002 0304 	and.w	r3, r2, #4
 8002f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	d043      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d824      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fd9 	.word	0x08002fd9
 8002f90:	08002fa5 	.word	0x08002fa5
 8002f94:	08002fbb 	.word	0x08002fbb
 8002f98:	08002fd9 	.word	0x08002fd9
 8002f9c:	08002fd9 	.word	0x08002fd9
 8002fa0:	08002fd9 	.word	0x08002fd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa8:	3308      	adds	r3, #8
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 ff1d 	bl	8003dec <RCCEx_PLL2_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fb8:	e00f      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fbe:	3328      	adds	r3, #40	; 0x28
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 ffc4 	bl	8003f50 <RCCEx_PLL3_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fce:	e004      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fd6:	e000      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe2:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	f023 0107 	bic.w	r1, r3, #7
 8002fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ff2:	4a68      	ldr	r2, [pc, #416]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff8:	e003      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ffe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	f002 0320 	and.w	r3, r2, #32
 800300e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003012:	2300      	movs	r3, #0
 8003014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800301c:	460b      	mov	r3, r1
 800301e:	4313      	orrs	r3, r2
 8003020:	d055      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302e:	d033      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003034:	d82c      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d02f      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d826      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003042:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003046:	d02b      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003048:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800304c:	d820      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800304e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003052:	d012      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003058:	d81a      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d022      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800305e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003062:	d115      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003068:	3308      	adds	r3, #8
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f000 febd 	bl	8003dec <RCCEx_PLL2_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003078:	e015      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800307a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800307e:	3328      	adds	r3, #40	; 0x28
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f000 ff64 	bl	8003f50 <RCCEx_PLL3_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800308e:	e00a      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003096:	e006      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003098:	bf00      	nop
 800309a:	e004      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800309c:	bf00      	nop
 800309e:	e002      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80030a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80030b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030be:	4a35      	ldr	r2, [pc, #212]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6553      	str	r3, [r2, #84]	; 0x54
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80030da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4313      	orrs	r3, r2
 80030ec:	d058      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80030ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030fa:	d033      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80030fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003100:	d82c      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003106:	d02f      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310c:	d826      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800310e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003112:	d02b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003118:	d820      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800311a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311e:	d012      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003124:	d81a      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d022      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d115      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003134:	3308      	adds	r3, #8
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fe57 	bl	8003dec <RCCEx_PLL2_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003144:	e015      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314a:	3328      	adds	r3, #40	; 0x28
 800314c:	2102      	movs	r1, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fefe 	bl	8003f50 <RCCEx_PLL3_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800315a:	e00a      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003162:	e006      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003164:	bf00      	nop
 8003166:	e004      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003168:	bf00      	nop
 800316a:	e002      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10e      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003186:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800318a:	4a02      	ldr	r2, [pc, #8]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800318c:	430b      	orrs	r3, r1
 800318e:	6593      	str	r3, [r2, #88]	; 0x58
 8003190:	e006      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003192:	bf00      	nop
 8003194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800319c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80031ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80031ba:	460b      	mov	r3, r1
 80031bc:	4313      	orrs	r3, r2
 80031be:	d055      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031cc:	d033      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80031ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031d2:	d82c      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d8:	d02f      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031de:	d826      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031e4:	d02b      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80031e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031ea:	d820      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f0:	d012      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80031f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f6:	d81a      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80031fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003200:	d115      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003206:	3308      	adds	r3, #8
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fdee 	bl	8003dec <RCCEx_PLL2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003216:	e015      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321c:	3328      	adds	r3, #40	; 0x28
 800321e:	2102      	movs	r1, #2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fe95 	bl	8003f50 <RCCEx_PLL3_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800322c:	e00a      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003234:	e006      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003236:	bf00      	nop
 8003238:	e004      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003244:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800324c:	4ba1      	ldr	r3, [pc, #644]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003258:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800325c:	4a9d      	ldr	r2, [pc, #628]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800325e:	430b      	orrs	r3, r1
 8003260:	6593      	str	r3, [r2, #88]	; 0x58
 8003262:	e003      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003268:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800326c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f002 0308 	and.w	r3, r2, #8
 8003278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003282:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003286:	460b      	mov	r3, r1
 8003288:	4313      	orrs	r3, r2
 800328a:	d01e      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800328c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800329a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329e:	3328      	adds	r3, #40	; 0x28
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fe54 	bl	8003f50 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032b4:	4b87      	ldr	r3, [pc, #540]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c4:	4a83      	ldr	r2, [pc, #524]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f002 0310 	and.w	r3, r2, #16
 80032d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d01e      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80032ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f6:	d10c      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fc:	3328      	adds	r3, #40	; 0x28
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fe25 	bl	8003f50 <RCCEx_PLL3_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003312:	4b70      	ldr	r3, [pc, #448]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800331a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003322:	4a6c      	ldr	r2, [pc, #432]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003324:	430b      	orrs	r3, r1
 8003326:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800333e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003342:	460b      	mov	r3, r1
 8003344:	4313      	orrs	r3, r2
 8003346:	d03e      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003354:	d022      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335a:	d81b      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d00b      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003366:	e015      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336c:	3308      	adds	r3, #8
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fd3b 	bl	8003dec <RCCEx_PLL2_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800337e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003382:	3328      	adds	r3, #40	; 0x28
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fde2 	bl	8003f50 <RCCEx_PLL3_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003392:	e004      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a6:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80033ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033b6:	4a47      	ldr	r2, [pc, #284]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6593      	str	r3, [r2, #88]	; 0x58
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80033d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80033d4:	2300      	movs	r3, #0
 80033d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d03b      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80033e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ee:	d01f      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80033f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033f4:	d818      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fa:	d003      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80033fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003400:	d007      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003402:	e011      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4a32      	ldr	r2, [pc, #200]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003410:	e00f      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003416:	3328      	adds	r3, #40	; 0x28
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fd98 	bl	8003f50 <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003426:	e004      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800344c:	430b      	orrs	r3, r1
 800344e:	6553      	str	r3, [r2, #84]	; 0x54
 8003450:	e003      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003452:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003456:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003466:	673b      	str	r3, [r7, #112]	; 0x70
 8003468:	2300      	movs	r3, #0
 800346a:	677b      	str	r3, [r7, #116]	; 0x74
 800346c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d034      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003484:	d007      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003486:	e011      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800348e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003492:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003494:	e00e      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349a:	3308      	adds	r3, #8
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fca4 	bl	8003dec <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034aa:	e003      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ca:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80034d2:	bf00      	nop
 80034d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80034ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ee:	2300      	movs	r3, #0
 80034f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80034f6:	460b      	mov	r3, r1
 80034f8:	4313      	orrs	r3, r2
 80034fa:	d00c      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003500:	3328      	adds	r3, #40	; 0x28
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fd23 	bl	8003f50 <RCCEx_PLL3_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003522:	663b      	str	r3, [r7, #96]	; 0x60
 8003524:	2300      	movs	r3, #0
 8003526:	667b      	str	r3, [r7, #100]	; 0x64
 8003528:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800352c:	460b      	mov	r3, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	d038      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800353e:	d018      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003544:	d811      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354a:	d014      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d80b      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d106      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4bc3      	ldr	r3, [pc, #780]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4ac2      	ldr	r2, [pc, #776]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003568:	e008      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003570:	e004      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800357a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003584:	4bb9      	ldr	r3, [pc, #740]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	4ab5      	ldr	r2, [pc, #724]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003596:	430b      	orrs	r3, r1
 8003598:	6553      	str	r3, [r2, #84]	; 0x54
 800359a:	e003      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80035b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035b2:	2300      	movs	r3, #0
 80035b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80035ba:	460b      	mov	r3, r1
 80035bc:	4313      	orrs	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035c0:	4baa      	ldr	r3, [pc, #680]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ce:	4aa7      	ldr	r2, [pc, #668]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80035e0:	653b      	str	r3, [r7, #80]	; 0x50
 80035e2:	2300      	movs	r3, #0
 80035e4:	657b      	str	r3, [r7, #84]	; 0x54
 80035e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035f0:	4b9e      	ldr	r3, [pc, #632]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a9b      	ldr	r2, [pc, #620]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003600:	430b      	orrs	r3, r1
 8003602:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003610:	64bb      	str	r3, [r7, #72]	; 0x48
 8003612:	2300      	movs	r3, #0
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003616:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800361a:	460b      	mov	r3, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003620:	4b92      	ldr	r3, [pc, #584]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	4a8f      	ldr	r2, [pc, #572]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003630:	430b      	orrs	r3, r1
 8003632:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003640:	643b      	str	r3, [r7, #64]	; 0x40
 8003642:	2300      	movs	r3, #0
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
 8003646:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800364a:	460b      	mov	r3, r1
 800364c:	4313      	orrs	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003650:	4b86      	ldr	r3, [pc, #536]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a85      	ldr	r2, [pc, #532]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003656:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800365a:	6113      	str	r3, [r2, #16]
 800365c:	4b83      	ldr	r3, [pc, #524]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800365e:	6919      	ldr	r1, [r3, #16]
 8003660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003664:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003668:	4a80      	ldr	r2, [pc, #512]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800366a:	430b      	orrs	r3, r1
 800366c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800366e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800367a:	63bb      	str	r3, [r7, #56]	; 0x38
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003684:	460b      	mov	r3, r1
 8003686:	4313      	orrs	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800368a:	4b78      	ldr	r3, [pc, #480]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	4a74      	ldr	r2, [pc, #464]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800369a:	430b      	orrs	r3, r1
 800369c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800369e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
 80036ac:	2300      	movs	r3, #0
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
 80036b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80036b4:	460b      	mov	r3, r1
 80036b6:	4313      	orrs	r3, r2
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036ba:	4b6c      	ldr	r3, [pc, #432]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80036c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ca:	4a68      	ldr	r2, [pc, #416]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	2100      	movs	r1, #0
 80036da:	62b9      	str	r1, [r7, #40]	; 0x28
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80036e6:	460b      	mov	r3, r1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	d011      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f0:	3308      	adds	r3, #8
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fb79 	bl	8003dec <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	2100      	movs	r1, #0
 800371a:	6239      	str	r1, [r7, #32]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003726:	460b      	mov	r3, r1
 8003728:	4313      	orrs	r3, r2
 800372a:	d011      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003730:	3308      	adds	r3, #8
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fb59 	bl	8003dec <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003740:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800374c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	2100      	movs	r1, #0
 800375a:	61b9      	str	r1, [r7, #24]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d011      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800376c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003770:	3308      	adds	r3, #8
 8003772:	2102      	movs	r1, #2
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fb39 	bl	8003dec <RCCEx_PLL2_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003780:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800378c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	2100      	movs	r1, #0
 800379a:	6139      	str	r1, [r7, #16]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	d011      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b0:	3328      	adds	r3, #40	; 0x28
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fbcb 	bl	8003f50 <RCCEx_PLL3_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80037c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	2100      	movs	r1, #0
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037e6:	460b      	mov	r3, r1
 80037e8:	4313      	orrs	r3, r2
 80037ea:	d011      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f0:	3328      	adds	r3, #40	; 0x28
 80037f2:	2101      	movs	r1, #1
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fbab 	bl	8003f50 <RCCEx_PLL3_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003800:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800380c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	2100      	movs	r1, #0
 800381a:	6039      	str	r1, [r7, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d011      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800382c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003830:	3328      	adds	r3, #40	; 0x28
 8003832:	2102      	movs	r1, #2
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fb8b 	bl	8003f50 <RCCEx_PLL3_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003840:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800384c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003850:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	e000      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400

08003870 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003874:	f7fe fde2 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4904      	ldr	r1, [pc, #16]	; (8003898 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	58024400 	.word	0x58024400
 8003898:	08005870 	.word	0x08005870

0800389c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038a4:	4ba1      	ldr	r3, [pc, #644]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038ae:	4b9f      	ldr	r3, [pc, #636]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	0b1b      	lsrs	r3, r3, #12
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038ba:	4b9c      	ldr	r3, [pc, #624]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038c6:	4b99      	ldr	r3, [pc, #612]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	08db      	lsrs	r3, r3, #3
 80038cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8111 	beq.w	8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	f000 8083 	beq.w	80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	f200 80a1 	bhi.w	8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d056      	beq.n	80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003906:	e099      	b.n	8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003908:	4b88      	ldr	r3, [pc, #544]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02d      	beq.n	8003970 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003914:	4b85      	ldr	r3, [pc, #532]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	4a84      	ldr	r2, [pc, #528]	; (8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393e:	4b7b      	ldr	r3, [pc, #492]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003952:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800396e:	e087      	b.n	8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800397e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003992:	ed97 6a03 	vldr	s12, [r7, #12]
 8003996:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800399a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800399e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039b2:	e065      	b.n	8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c6:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039f6:	e043      	b.n	8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0a:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a3a:	e021      	b.n	8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	0a5b      	lsrs	r3, r3, #9
 8003a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa6:	ee17 2a90 	vmov	r2, s15
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad4:	ee17 2a90 	vmov	r2, s15
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	0e1b      	lsrs	r3, r3, #24
 8003ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b02:	ee17 2a90 	vmov	r2, s15
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
}
 8003b1e:	bf00      	nop
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	03d09000 	.word	0x03d09000
 8003b34:	46000000 	.word	0x46000000
 8003b38:	4c742400 	.word	0x4c742400
 8003b3c:	4a742400 	.word	0x4a742400
 8003b40:	4af42400 	.word	0x4af42400

08003b44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b4c:	4ba1      	ldr	r3, [pc, #644]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b56:	4b9f      	ldr	r3, [pc, #636]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	0d1b      	lsrs	r3, r3, #20
 8003b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b62:	4b9c      	ldr	r3, [pc, #624]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b6e:	4b99      	ldr	r3, [pc, #612]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	08db      	lsrs	r3, r3, #3
 8003b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8111 	beq.w	8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	f000 8083 	beq.w	8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	f200 80a1 	bhi.w	8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d056      	beq.n	8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003bae:	e099      	b.n	8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bb0:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d02d      	beq.n	8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bbc:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	4a84      	ldr	r2, [pc, #528]	; (8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be6:	4b7b      	ldr	r3, [pc, #492]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c16:	e087      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003de0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c5a:	e065      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6e:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c9e:	e043      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003caa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb2:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ce2:	e021      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf6:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	0a5b      	lsrs	r3, r3, #9
 8003d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d4e:	ee17 2a90 	vmov	r2, s15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	0c1b      	lsrs	r3, r3, #16
 8003d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7c:	ee17 2a90 	vmov	r2, s15
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003daa:	ee17 2a90 	vmov	r2, s15
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003db2:	e008      	b.n	8003dc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
}
 8003dc6:	bf00      	nop
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	03d09000 	.word	0x03d09000
 8003ddc:	46000000 	.word	0x46000000
 8003de0:	4c742400 	.word	0x4c742400
 8003de4:	4a742400 	.word	0x4a742400
 8003de8:	4af42400 	.word	0x4af42400

08003dec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dfa:	4b53      	ldr	r3, [pc, #332]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d101      	bne.n	8003e0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e099      	b.n	8003f3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a4e      	ldr	r2, [pc, #312]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e16:	f7fd f891 	bl	8000f3c <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e1e:	f7fd f88d 	bl	8000f3c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e086      	b.n	8003f3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e30:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f0      	bne.n	8003e1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	031b      	lsls	r3, r3, #12
 8003e4a:	493f      	ldr	r1, [pc, #252]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	025b      	lsls	r3, r3, #9
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e80:	4931      	ldr	r1, [pc, #196]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	492d      	ldr	r1, [pc, #180]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f023 0220 	bic.w	r2, r3, #32
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4928      	ldr	r1, [pc, #160]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003eb0:	f023 0310 	bic.w	r3, r3, #16
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <RCCEx_PLL2_Config+0x160>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	69d2      	ldr	r2, [r2, #28]
 8003ec2:	00d2      	lsls	r2, r2, #3
 8003ec4:	4920      	ldr	r1, [pc, #128]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ed0:	f043 0310 	orr.w	r3, r3, #16
 8003ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ee8:	e00f      	b.n	8003f0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003efc:	e005      	b.n	8003f0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f16:	f7fd f811 	bl	8000f3c <HAL_GetTick>
 8003f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f1e:	f7fd f80d 	bl	8000f3c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e006      	b.n	8003f3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <RCCEx_PLL2_Config+0x15c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	ffff0007 	.word	0xffff0007

08003f50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f5e:	4b53      	ldr	r3, [pc, #332]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d101      	bne.n	8003f6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e099      	b.n	80040a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4e      	ldr	r2, [pc, #312]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7a:	f7fc ffdf 	bl	8000f3c <HAL_GetTick>
 8003f7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f82:	f7fc ffdb 	bl	8000f3c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e086      	b.n	80040a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f94:	4b45      	ldr	r3, [pc, #276]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fa0:	4b42      	ldr	r3, [pc, #264]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	051b      	lsls	r3, r3, #20
 8003fae:	493f      	ldr	r1, [pc, #252]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fe4:	4931      	ldr	r1, [pc, #196]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	492d      	ldr	r1, [pc, #180]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4928      	ldr	r1, [pc, #160]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800400e:	4b27      	ldr	r3, [pc, #156]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	4a26      	ldr	r2, [pc, #152]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 800401c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <RCCEx_PLL3_Config+0x160>)
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	69d2      	ldr	r2, [r2, #28]
 8004026:	00d2      	lsls	r2, r2, #3
 8004028:	4920      	ldr	r1, [pc, #128]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800402e:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800404c:	e00f      	b.n	800406e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d106      	bne.n	8004062 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 800405a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004060:	e005      	b.n	800406e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4a11      	ldr	r2, [pc, #68]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407a:	f7fc ff5f 	bl	8000f3c <HAL_GetTick>
 800407e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004080:	e008      	b.n	8004094 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004082:	f7fc ff5b 	bl	8000f3c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e006      	b.n	80040a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <RCCEx_PLL3_Config+0x15c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	58024400 	.word	0x58024400
 80040b0:	ffff0007 	.word	0xffff0007

080040b4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e04a      	b.n	800415c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fc fd0f 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2224      	movs	r2, #36	; 0x24
 80040e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8c2 	bl	8004280 <UART_SetConfig>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e02a      	b.n	800415c <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 ff22 	bl	8004f58 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004132:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0208 	orr.w	r2, r2, #8
 8004142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 ffa1 	bl	800509c <UART_CheckIdleState>
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	2b20      	cmp	r3, #32
 800417c:	d17b      	bne.n	8004276 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_UART_Transmit+0x26>
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e074      	b.n	8004278 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2221      	movs	r2, #33	; 0x21
 800419a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800419e:	f7fc fecd 	bl	8000f3c <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d108      	bne.n	80041d0 <HAL_UART_Transmit+0x6c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e003      	b.n	80041d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041d8:	e030      	b.n	800423c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f001 f803 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e03d      	b.n	8004278 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	3302      	adds	r3, #2
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	e007      	b.n	800422a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3301      	adds	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1c8      	bne.n	80041da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 ffcc 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e006      	b.n	8004278 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b092      	sub	sp, #72	; 0x48
 8004286:	af00      	add	r7, sp, #0
 8004288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	431a      	orrs	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4bbe      	ldr	r3, [pc, #760]	; (80045a8 <UART_SetConfig+0x328>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4ab3      	ldr	r2, [pc, #716]	; (80045ac <UART_SetConfig+0x32c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e8:	4313      	orrs	r3, r2
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	4baf      	ldr	r3, [pc, #700]	; (80045b0 <UART_SetConfig+0x330>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f023 010f 	bic.w	r1, r3, #15
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4aa6      	ldr	r2, [pc, #664]	; (80045b4 <UART_SetConfig+0x334>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d177      	bne.n	8004410 <UART_SetConfig+0x190>
 8004320:	4ba5      	ldr	r3, [pc, #660]	; (80045b8 <UART_SetConfig+0x338>)
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004328:	2b28      	cmp	r3, #40	; 0x28
 800432a:	d86d      	bhi.n	8004408 <UART_SetConfig+0x188>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0xb4>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	080043d9 	.word	0x080043d9
 8004338:	08004409 	.word	0x08004409
 800433c:	08004409 	.word	0x08004409
 8004340:	08004409 	.word	0x08004409
 8004344:	08004409 	.word	0x08004409
 8004348:	08004409 	.word	0x08004409
 800434c:	08004409 	.word	0x08004409
 8004350:	08004409 	.word	0x08004409
 8004354:	080043e1 	.word	0x080043e1
 8004358:	08004409 	.word	0x08004409
 800435c:	08004409 	.word	0x08004409
 8004360:	08004409 	.word	0x08004409
 8004364:	08004409 	.word	0x08004409
 8004368:	08004409 	.word	0x08004409
 800436c:	08004409 	.word	0x08004409
 8004370:	08004409 	.word	0x08004409
 8004374:	080043e9 	.word	0x080043e9
 8004378:	08004409 	.word	0x08004409
 800437c:	08004409 	.word	0x08004409
 8004380:	08004409 	.word	0x08004409
 8004384:	08004409 	.word	0x08004409
 8004388:	08004409 	.word	0x08004409
 800438c:	08004409 	.word	0x08004409
 8004390:	08004409 	.word	0x08004409
 8004394:	080043f1 	.word	0x080043f1
 8004398:	08004409 	.word	0x08004409
 800439c:	08004409 	.word	0x08004409
 80043a0:	08004409 	.word	0x08004409
 80043a4:	08004409 	.word	0x08004409
 80043a8:	08004409 	.word	0x08004409
 80043ac:	08004409 	.word	0x08004409
 80043b0:	08004409 	.word	0x08004409
 80043b4:	080043f9 	.word	0x080043f9
 80043b8:	08004409 	.word	0x08004409
 80043bc:	08004409 	.word	0x08004409
 80043c0:	08004409 	.word	0x08004409
 80043c4:	08004409 	.word	0x08004409
 80043c8:	08004409 	.word	0x08004409
 80043cc:	08004409 	.word	0x08004409
 80043d0:	08004409 	.word	0x08004409
 80043d4:	08004401 	.word	0x08004401
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043de:	e326      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e6:	e322      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ee:	e31e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f6:	e31a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043f8:	2320      	movs	r3, #32
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fe:	e316      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004406:	e312      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440e:	e30e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a69      	ldr	r2, [pc, #420]	; (80045bc <UART_SetConfig+0x33c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d130      	bne.n	800447c <UART_SetConfig+0x1fc>
 800441a:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <UART_SetConfig+0x338>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	2b05      	cmp	r3, #5
 8004424:	d826      	bhi.n	8004474 <UART_SetConfig+0x1f4>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x1ac>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004445 	.word	0x08004445
 8004430:	0800444d 	.word	0x0800444d
 8004434:	08004455 	.word	0x08004455
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004465 	.word	0x08004465
 8004440:	0800446d 	.word	0x0800446d
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e2f0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800444c:	2304      	movs	r3, #4
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004452:	e2ec      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004454:	2308      	movs	r3, #8
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445a:	e2e8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800445c:	2310      	movs	r3, #16
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004462:	e2e4      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004464:	2320      	movs	r3, #32
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446a:	e2e0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800446c:	2340      	movs	r3, #64	; 0x40
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004472:	e2dc      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447a:	e2d8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4f      	ldr	r2, [pc, #316]	; (80045c0 <UART_SetConfig+0x340>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d130      	bne.n	80044e8 <UART_SetConfig+0x268>
 8004486:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <UART_SetConfig+0x338>)
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	2b05      	cmp	r3, #5
 8004490:	d826      	bhi.n	80044e0 <UART_SetConfig+0x260>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x218>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044b1 	.word	0x080044b1
 800449c:	080044b9 	.word	0x080044b9
 80044a0:	080044c1 	.word	0x080044c1
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044d1 	.word	0x080044d1
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b6:	e2ba      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044b8:	2304      	movs	r3, #4
 80044ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044be:	e2b6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c6:	e2b2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ce:	e2ae      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044d0:	2320      	movs	r3, #32
 80044d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d6:	e2aa      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044d8:	2340      	movs	r3, #64	; 0x40
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044de:	e2a6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e6:	e2a2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a35      	ldr	r2, [pc, #212]	; (80045c4 <UART_SetConfig+0x344>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d130      	bne.n	8004554 <UART_SetConfig+0x2d4>
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <UART_SetConfig+0x338>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d826      	bhi.n	800454c <UART_SetConfig+0x2cc>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0x284>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	0800451d 	.word	0x0800451d
 8004508:	08004525 	.word	0x08004525
 800450c:	0800452d 	.word	0x0800452d
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	2300      	movs	r3, #0
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004522:	e284      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004524:	2304      	movs	r3, #4
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452a:	e280      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800452c:	2308      	movs	r3, #8
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004532:	e27c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004534:	2310      	movs	r3, #16
 8004536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453a:	e278      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800453c:	2320      	movs	r3, #32
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004542:	e274      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e270      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e26c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <UART_SetConfig+0x348>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d142      	bne.n	80045e4 <UART_SetConfig+0x364>
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <UART_SetConfig+0x338>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b05      	cmp	r3, #5
 8004568:	d838      	bhi.n	80045dc <UART_SetConfig+0x35c>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x2f0>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004589 	.word	0x08004589
 8004574:	08004591 	.word	0x08004591
 8004578:	08004599 	.word	0x08004599
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045cd 	.word	0x080045cd
 8004584:	080045d5 	.word	0x080045d5
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458e:	e24e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004596:	e24a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459e:	e246      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045a6:	e242      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045a8:	cfff69f3 	.word	0xcfff69f3
 80045ac:	58000c00 	.word	0x58000c00
 80045b0:	11fff4ff 	.word	0x11fff4ff
 80045b4:	40011000 	.word	0x40011000
 80045b8:	58024400 	.word	0x58024400
 80045bc:	40004400 	.word	0x40004400
 80045c0:	40004800 	.word	0x40004800
 80045c4:	40004c00 	.word	0x40004c00
 80045c8:	40005000 	.word	0x40005000
 80045cc:	2320      	movs	r3, #32
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e22c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e228      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e2:	e224      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4ab1      	ldr	r2, [pc, #708]	; (80048b0 <UART_SetConfig+0x630>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d176      	bne.n	80046dc <UART_SetConfig+0x45c>
 80045ee:	4bb1      	ldr	r3, [pc, #708]	; (80048b4 <UART_SetConfig+0x634>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f6:	2b28      	cmp	r3, #40	; 0x28
 80045f8:	d86c      	bhi.n	80046d4 <UART_SetConfig+0x454>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0x380>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	080046a5 	.word	0x080046a5
 8004604:	080046d5 	.word	0x080046d5
 8004608:	080046d5 	.word	0x080046d5
 800460c:	080046d5 	.word	0x080046d5
 8004610:	080046d5 	.word	0x080046d5
 8004614:	080046d5 	.word	0x080046d5
 8004618:	080046d5 	.word	0x080046d5
 800461c:	080046d5 	.word	0x080046d5
 8004620:	080046ad 	.word	0x080046ad
 8004624:	080046d5 	.word	0x080046d5
 8004628:	080046d5 	.word	0x080046d5
 800462c:	080046d5 	.word	0x080046d5
 8004630:	080046d5 	.word	0x080046d5
 8004634:	080046d5 	.word	0x080046d5
 8004638:	080046d5 	.word	0x080046d5
 800463c:	080046d5 	.word	0x080046d5
 8004640:	080046b5 	.word	0x080046b5
 8004644:	080046d5 	.word	0x080046d5
 8004648:	080046d5 	.word	0x080046d5
 800464c:	080046d5 	.word	0x080046d5
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046d5 	.word	0x080046d5
 8004658:	080046d5 	.word	0x080046d5
 800465c:	080046d5 	.word	0x080046d5
 8004660:	080046bd 	.word	0x080046bd
 8004664:	080046d5 	.word	0x080046d5
 8004668:	080046d5 	.word	0x080046d5
 800466c:	080046d5 	.word	0x080046d5
 8004670:	080046d5 	.word	0x080046d5
 8004674:	080046d5 	.word	0x080046d5
 8004678:	080046d5 	.word	0x080046d5
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046c5 	.word	0x080046c5
 8004684:	080046d5 	.word	0x080046d5
 8004688:	080046d5 	.word	0x080046d5
 800468c:	080046d5 	.word	0x080046d5
 8004690:	080046d5 	.word	0x080046d5
 8004694:	080046d5 	.word	0x080046d5
 8004698:	080046d5 	.word	0x080046d5
 800469c:	080046d5 	.word	0x080046d5
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e1c0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046ac:	2304      	movs	r3, #4
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e1bc      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046b4:	2308      	movs	r3, #8
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ba:	e1b8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046bc:	2310      	movs	r3, #16
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c2:	e1b4      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046c4:	2320      	movs	r3, #32
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ca:	e1b0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046cc:	2340      	movs	r3, #64	; 0x40
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d2:	e1ac      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046da:	e1a8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <UART_SetConfig+0x638>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d130      	bne.n	8004748 <UART_SetConfig+0x4c8>
 80046e6:	4b73      	ldr	r3, [pc, #460]	; (80048b4 <UART_SetConfig+0x634>)
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d826      	bhi.n	8004740 <UART_SetConfig+0x4c0>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x478>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004711 	.word	0x08004711
 80046fc:	08004719 	.word	0x08004719
 8004700:	08004721 	.word	0x08004721
 8004704:	08004729 	.word	0x08004729
 8004708:	08004731 	.word	0x08004731
 800470c:	08004739 	.word	0x08004739
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e18a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004718:	2304      	movs	r3, #4
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e186      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004720:	2308      	movs	r3, #8
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e182      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004728:	2310      	movs	r3, #16
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e17e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004730:	2320      	movs	r3, #32
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e17a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004738:	2340      	movs	r3, #64	; 0x40
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473e:	e176      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004746:	e172      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5b      	ldr	r2, [pc, #364]	; (80048bc <UART_SetConfig+0x63c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d130      	bne.n	80047b4 <UART_SetConfig+0x534>
 8004752:	4b58      	ldr	r3, [pc, #352]	; (80048b4 <UART_SetConfig+0x634>)
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b05      	cmp	r3, #5
 800475c:	d826      	bhi.n	80047ac <UART_SetConfig+0x52c>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <UART_SetConfig+0x4e4>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	0800477d 	.word	0x0800477d
 8004768:	08004785 	.word	0x08004785
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004795 	.word	0x08004795
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004782:	e154      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004784:	2304      	movs	r3, #4
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478a:	e150      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800478c:	2308      	movs	r3, #8
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004792:	e14c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004794:	2310      	movs	r3, #16
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479a:	e148      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800479c:	2320      	movs	r3, #32
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a2:	e144      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80047a4:	2340      	movs	r3, #64	; 0x40
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047aa:	e140      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b2:	e13c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a41      	ldr	r2, [pc, #260]	; (80048c0 <UART_SetConfig+0x640>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f040 8082 	bne.w	80048c4 <UART_SetConfig+0x644>
 80047c0:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <UART_SetConfig+0x634>)
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047c8:	2b28      	cmp	r3, #40	; 0x28
 80047ca:	d86d      	bhi.n	80048a8 <UART_SetConfig+0x628>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x554>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	08004879 	.word	0x08004879
 80047d8:	080048a9 	.word	0x080048a9
 80047dc:	080048a9 	.word	0x080048a9
 80047e0:	080048a9 	.word	0x080048a9
 80047e4:	080048a9 	.word	0x080048a9
 80047e8:	080048a9 	.word	0x080048a9
 80047ec:	080048a9 	.word	0x080048a9
 80047f0:	080048a9 	.word	0x080048a9
 80047f4:	08004881 	.word	0x08004881
 80047f8:	080048a9 	.word	0x080048a9
 80047fc:	080048a9 	.word	0x080048a9
 8004800:	080048a9 	.word	0x080048a9
 8004804:	080048a9 	.word	0x080048a9
 8004808:	080048a9 	.word	0x080048a9
 800480c:	080048a9 	.word	0x080048a9
 8004810:	080048a9 	.word	0x080048a9
 8004814:	08004889 	.word	0x08004889
 8004818:	080048a9 	.word	0x080048a9
 800481c:	080048a9 	.word	0x080048a9
 8004820:	080048a9 	.word	0x080048a9
 8004824:	080048a9 	.word	0x080048a9
 8004828:	080048a9 	.word	0x080048a9
 800482c:	080048a9 	.word	0x080048a9
 8004830:	080048a9 	.word	0x080048a9
 8004834:	08004891 	.word	0x08004891
 8004838:	080048a9 	.word	0x080048a9
 800483c:	080048a9 	.word	0x080048a9
 8004840:	080048a9 	.word	0x080048a9
 8004844:	080048a9 	.word	0x080048a9
 8004848:	080048a9 	.word	0x080048a9
 800484c:	080048a9 	.word	0x080048a9
 8004850:	080048a9 	.word	0x080048a9
 8004854:	08004899 	.word	0x08004899
 8004858:	080048a9 	.word	0x080048a9
 800485c:	080048a9 	.word	0x080048a9
 8004860:	080048a9 	.word	0x080048a9
 8004864:	080048a9 	.word	0x080048a9
 8004868:	080048a9 	.word	0x080048a9
 800486c:	080048a9 	.word	0x080048a9
 8004870:	080048a9 	.word	0x080048a9
 8004874:	080048a1 	.word	0x080048a1
 8004878:	2301      	movs	r3, #1
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800487e:	e0d6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004880:	2304      	movs	r3, #4
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004886:	e0d2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004888:	2308      	movs	r3, #8
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488e:	e0ce      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004896:	e0ca      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004898:	2320      	movs	r3, #32
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489e:	e0c6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80048a0:	2340      	movs	r3, #64	; 0x40
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a6:	e0c2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ae:	e0be      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80048b0:	40011400 	.word	0x40011400
 80048b4:	58024400 	.word	0x58024400
 80048b8:	40007800 	.word	0x40007800
 80048bc:	40007c00 	.word	0x40007c00
 80048c0:	40011800 	.word	0x40011800
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4aad      	ldr	r2, [pc, #692]	; (8004b80 <UART_SetConfig+0x900>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d176      	bne.n	80049bc <UART_SetConfig+0x73c>
 80048ce:	4bad      	ldr	r3, [pc, #692]	; (8004b84 <UART_SetConfig+0x904>)
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d6:	2b28      	cmp	r3, #40	; 0x28
 80048d8:	d86c      	bhi.n	80049b4 <UART_SetConfig+0x734>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0x660>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004985 	.word	0x08004985
 80048e4:	080049b5 	.word	0x080049b5
 80048e8:	080049b5 	.word	0x080049b5
 80048ec:	080049b5 	.word	0x080049b5
 80048f0:	080049b5 	.word	0x080049b5
 80048f4:	080049b5 	.word	0x080049b5
 80048f8:	080049b5 	.word	0x080049b5
 80048fc:	080049b5 	.word	0x080049b5
 8004900:	0800498d 	.word	0x0800498d
 8004904:	080049b5 	.word	0x080049b5
 8004908:	080049b5 	.word	0x080049b5
 800490c:	080049b5 	.word	0x080049b5
 8004910:	080049b5 	.word	0x080049b5
 8004914:	080049b5 	.word	0x080049b5
 8004918:	080049b5 	.word	0x080049b5
 800491c:	080049b5 	.word	0x080049b5
 8004920:	08004995 	.word	0x08004995
 8004924:	080049b5 	.word	0x080049b5
 8004928:	080049b5 	.word	0x080049b5
 800492c:	080049b5 	.word	0x080049b5
 8004930:	080049b5 	.word	0x080049b5
 8004934:	080049b5 	.word	0x080049b5
 8004938:	080049b5 	.word	0x080049b5
 800493c:	080049b5 	.word	0x080049b5
 8004940:	0800499d 	.word	0x0800499d
 8004944:	080049b5 	.word	0x080049b5
 8004948:	080049b5 	.word	0x080049b5
 800494c:	080049b5 	.word	0x080049b5
 8004950:	080049b5 	.word	0x080049b5
 8004954:	080049b5 	.word	0x080049b5
 8004958:	080049b5 	.word	0x080049b5
 800495c:	080049b5 	.word	0x080049b5
 8004960:	080049a5 	.word	0x080049a5
 8004964:	080049b5 	.word	0x080049b5
 8004968:	080049b5 	.word	0x080049b5
 800496c:	080049b5 	.word	0x080049b5
 8004970:	080049b5 	.word	0x080049b5
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498a:	e050      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004992:	e04c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499a:	e048      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a2:	e044      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049a4:	2320      	movs	r3, #32
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049aa:	e040      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b2:	e03c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ba:	e038      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a71      	ldr	r2, [pc, #452]	; (8004b88 <UART_SetConfig+0x908>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d130      	bne.n	8004a28 <UART_SetConfig+0x7a8>
 80049c6:	4b6f      	ldr	r3, [pc, #444]	; (8004b84 <UART_SetConfig+0x904>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d826      	bhi.n	8004a20 <UART_SetConfig+0x7a0>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x758>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	08004a09 	.word	0x08004a09
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f6:	e01a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fe:	e016      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a06:	e012      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0e:	e00e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a10:	2320      	movs	r3, #32
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e00a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e006      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e002      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a55      	ldr	r2, [pc, #340]	; (8004b88 <UART_SetConfig+0x908>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f040 80f8 	bne.w	8004c2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	dc46      	bgt.n	8004ad0 <UART_SetConfig+0x850>
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	db75      	blt.n	8004b32 <UART_SetConfig+0x8b2>
 8004a46:	3b02      	subs	r3, #2
 8004a48:	2b1e      	cmp	r3, #30
 8004a4a:	d872      	bhi.n	8004b32 <UART_SetConfig+0x8b2>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x7d4>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004ad7 	.word	0x08004ad7
 8004a58:	08004b33 	.word	0x08004b33
 8004a5c:	08004adf 	.word	0x08004adf
 8004a60:	08004b33 	.word	0x08004b33
 8004a64:	08004b33 	.word	0x08004b33
 8004a68:	08004b33 	.word	0x08004b33
 8004a6c:	08004aef 	.word	0x08004aef
 8004a70:	08004b33 	.word	0x08004b33
 8004a74:	08004b33 	.word	0x08004b33
 8004a78:	08004b33 	.word	0x08004b33
 8004a7c:	08004b33 	.word	0x08004b33
 8004a80:	08004b33 	.word	0x08004b33
 8004a84:	08004b33 	.word	0x08004b33
 8004a88:	08004b33 	.word	0x08004b33
 8004a8c:	08004aff 	.word	0x08004aff
 8004a90:	08004b33 	.word	0x08004b33
 8004a94:	08004b33 	.word	0x08004b33
 8004a98:	08004b33 	.word	0x08004b33
 8004a9c:	08004b33 	.word	0x08004b33
 8004aa0:	08004b33 	.word	0x08004b33
 8004aa4:	08004b33 	.word	0x08004b33
 8004aa8:	08004b33 	.word	0x08004b33
 8004aac:	08004b33 	.word	0x08004b33
 8004ab0:	08004b33 	.word	0x08004b33
 8004ab4:	08004b33 	.word	0x08004b33
 8004ab8:	08004b33 	.word	0x08004b33
 8004abc:	08004b33 	.word	0x08004b33
 8004ac0:	08004b33 	.word	0x08004b33
 8004ac4:	08004b33 	.word	0x08004b33
 8004ac8:	08004b33 	.word	0x08004b33
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d02a      	beq.n	8004b2a <UART_SetConfig+0x8aa>
 8004ad4:	e02d      	b.n	8004b32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004ad6:	f7fe fecb 	bl	8003870 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ada:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004adc:	e02f      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe feda 	bl	800389c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aec:	e027      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aee:	f107 0318 	add.w	r3, r7, #24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff f826 	bl	8003b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004afc:	e01f      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004afe:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <UART_SetConfig+0x904>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <UART_SetConfig+0x904>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <UART_SetConfig+0x90c>)
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b1c:	e00f      	b.n	8004b3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <UART_SetConfig+0x90c>)
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b22:	e00c      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <UART_SetConfig+0x910>)
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b30:	e005      	b.n	8004b3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 81ee 	beq.w	8004f22 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <UART_SetConfig+0x914>)
 8004b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d305      	bcc.n	8004b76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d910      	bls.n	8004b98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b7c:	e1d1      	b.n	8004f22 <UART_SetConfig+0xca2>
 8004b7e:	bf00      	nop
 8004b80:	40011c00 	.word	0x40011c00
 8004b84:	58024400 	.word	0x58024400
 8004b88:	58000c00 	.word	0x58000c00
 8004b8c:	03d09000 	.word	0x03d09000
 8004b90:	003d0900 	.word	0x003d0900
 8004b94:	08005880 	.word	0x08005880
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	4ac0      	ldr	r2, [pc, #768]	; (8004ea8 <UART_SetConfig+0xc28>)
 8004ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bba:	f7fb fb97 	bl	80002ec <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	020b      	lsls	r3, r1, #8
 8004bd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bd4:	0202      	lsls	r2, r0, #8
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	6849      	ldr	r1, [r1, #4]
 8004bda:	0849      	lsrs	r1, r1, #1
 8004bdc:	2000      	movs	r0, #0
 8004bde:	460c      	mov	r4, r1
 8004be0:	4605      	mov	r5, r0
 8004be2:	eb12 0804 	adds.w	r8, r2, r4
 8004be6:	eb43 0905 	adc.w	r9, r3, r5
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	4693      	mov	fp, r2
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	465b      	mov	r3, fp
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	f7fb fb76 	bl	80002ec <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4613      	mov	r3, r2
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c0e:	d308      	bcc.n	8004c22 <UART_SetConfig+0x9a2>
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c16:	d204      	bcs.n	8004c22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1e:	60da      	str	r2, [r3, #12]
 8004c20:	e17f      	b.n	8004f22 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c28:	e17b      	b.n	8004f22 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c32:	f040 80bd 	bne.w	8004db0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004c36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	dc48      	bgt.n	8004cd0 <UART_SetConfig+0xa50>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	db7b      	blt.n	8004d3a <UART_SetConfig+0xaba>
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d879      	bhi.n	8004d3a <UART_SetConfig+0xaba>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x9cc>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004cd7 	.word	0x08004cd7
 8004c50:	08004cdf 	.word	0x08004cdf
 8004c54:	08004d3b 	.word	0x08004d3b
 8004c58:	08004d3b 	.word	0x08004d3b
 8004c5c:	08004ce7 	.word	0x08004ce7
 8004c60:	08004d3b 	.word	0x08004d3b
 8004c64:	08004d3b 	.word	0x08004d3b
 8004c68:	08004d3b 	.word	0x08004d3b
 8004c6c:	08004cf7 	.word	0x08004cf7
 8004c70:	08004d3b 	.word	0x08004d3b
 8004c74:	08004d3b 	.word	0x08004d3b
 8004c78:	08004d3b 	.word	0x08004d3b
 8004c7c:	08004d3b 	.word	0x08004d3b
 8004c80:	08004d3b 	.word	0x08004d3b
 8004c84:	08004d3b 	.word	0x08004d3b
 8004c88:	08004d3b 	.word	0x08004d3b
 8004c8c:	08004d07 	.word	0x08004d07
 8004c90:	08004d3b 	.word	0x08004d3b
 8004c94:	08004d3b 	.word	0x08004d3b
 8004c98:	08004d3b 	.word	0x08004d3b
 8004c9c:	08004d3b 	.word	0x08004d3b
 8004ca0:	08004d3b 	.word	0x08004d3b
 8004ca4:	08004d3b 	.word	0x08004d3b
 8004ca8:	08004d3b 	.word	0x08004d3b
 8004cac:	08004d3b 	.word	0x08004d3b
 8004cb0:	08004d3b 	.word	0x08004d3b
 8004cb4:	08004d3b 	.word	0x08004d3b
 8004cb8:	08004d3b 	.word	0x08004d3b
 8004cbc:	08004d3b 	.word	0x08004d3b
 8004cc0:	08004d3b 	.word	0x08004d3b
 8004cc4:	08004d3b 	.word	0x08004d3b
 8004cc8:	08004d3b 	.word	0x08004d3b
 8004ccc:	08004d2d 	.word	0x08004d2d
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d02e      	beq.n	8004d32 <UART_SetConfig+0xab2>
 8004cd4:	e031      	b.n	8004d3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd6:	f7fd fbe1 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8004cda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004cdc:	e033      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cde:	f7fd fbf3 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8004ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ce4:	e02f      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fdd6 	bl	800389c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cf4:	e027      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cf6:	f107 0318 	add.w	r3, r7, #24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe ff22 	bl	8003b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d04:	e01f      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d06:	4b69      	ldr	r3, [pc, #420]	; (8004eac <UART_SetConfig+0xc2c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d12:	4b66      	ldr	r3, [pc, #408]	; (8004eac <UART_SetConfig+0xc2c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	4a64      	ldr	r2, [pc, #400]	; (8004eb0 <UART_SetConfig+0xc30>)
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d24:	e00f      	b.n	8004d46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004d26:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <UART_SetConfig+0xc30>)
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d2a:	e00c      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d2c:	4b61      	ldr	r3, [pc, #388]	; (8004eb4 <UART_SetConfig+0xc34>)
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80ea 	beq.w	8004f22 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4a55      	ldr	r2, [pc, #340]	; (8004ea8 <UART_SetConfig+0xc28>)
 8004d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d60:	005a      	lsls	r2, r3, #1
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	441a      	add	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	d916      	bls.n	8004da8 <UART_SetConfig+0xb28>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d212      	bcs.n	8004da8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f023 030f 	bic.w	r3, r3, #15
 8004d8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	e0bc      	b.n	8004f22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004dae:	e0b8      	b.n	8004f22 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	dc4b      	bgt.n	8004e50 <UART_SetConfig+0xbd0>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f2c0 8087 	blt.w	8004ecc <UART_SetConfig+0xc4c>
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	f200 8084 	bhi.w	8004ecc <UART_SetConfig+0xc4c>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <UART_SetConfig+0xb4c>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e57 	.word	0x08004e57
 8004dd0:	08004e5f 	.word	0x08004e5f
 8004dd4:	08004ecd 	.word	0x08004ecd
 8004dd8:	08004ecd 	.word	0x08004ecd
 8004ddc:	08004e67 	.word	0x08004e67
 8004de0:	08004ecd 	.word	0x08004ecd
 8004de4:	08004ecd 	.word	0x08004ecd
 8004de8:	08004ecd 	.word	0x08004ecd
 8004dec:	08004e77 	.word	0x08004e77
 8004df0:	08004ecd 	.word	0x08004ecd
 8004df4:	08004ecd 	.word	0x08004ecd
 8004df8:	08004ecd 	.word	0x08004ecd
 8004dfc:	08004ecd 	.word	0x08004ecd
 8004e00:	08004ecd 	.word	0x08004ecd
 8004e04:	08004ecd 	.word	0x08004ecd
 8004e08:	08004ecd 	.word	0x08004ecd
 8004e0c:	08004e87 	.word	0x08004e87
 8004e10:	08004ecd 	.word	0x08004ecd
 8004e14:	08004ecd 	.word	0x08004ecd
 8004e18:	08004ecd 	.word	0x08004ecd
 8004e1c:	08004ecd 	.word	0x08004ecd
 8004e20:	08004ecd 	.word	0x08004ecd
 8004e24:	08004ecd 	.word	0x08004ecd
 8004e28:	08004ecd 	.word	0x08004ecd
 8004e2c:	08004ecd 	.word	0x08004ecd
 8004e30:	08004ecd 	.word	0x08004ecd
 8004e34:	08004ecd 	.word	0x08004ecd
 8004e38:	08004ecd 	.word	0x08004ecd
 8004e3c:	08004ecd 	.word	0x08004ecd
 8004e40:	08004ecd 	.word	0x08004ecd
 8004e44:	08004ecd 	.word	0x08004ecd
 8004e48:	08004ecd 	.word	0x08004ecd
 8004e4c:	08004ebf 	.word	0x08004ebf
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d037      	beq.n	8004ec4 <UART_SetConfig+0xc44>
 8004e54:	e03a      	b.n	8004ecc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7fd fb21 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8004e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e5c:	e03c      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e5e:	f7fd fb33 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8004e62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e64:	e038      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fd16 	bl	800389c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e74:	e030      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e76:	f107 0318 	add.w	r3, r7, #24
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fe62 	bl	8003b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e84:	e028      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <UART_SetConfig+0xc2c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d012      	beq.n	8004eb8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <UART_SetConfig+0xc2c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <UART_SetConfig+0xc30>)
 8004e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ea4:	e018      	b.n	8004ed8 <UART_SetConfig+0xc58>
 8004ea6:	bf00      	nop
 8004ea8:	08005880 	.word	0x08005880
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	03d09000 	.word	0x03d09000
 8004eb4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004eb8:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <UART_SetConfig+0xccc>)
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ebc:	e00c      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <UART_SetConfig+0xcd0>)
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ec2:	e009      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eca:	e005      	b.n	8004ed8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ed6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d021      	beq.n	8004f22 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <UART_SetConfig+0xcd4>)
 8004ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	441a      	add	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d909      	bls.n	8004f1c <UART_SetConfig+0xc9c>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0e:	d205      	bcs.n	8004f1c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e002      	b.n	8004f22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004f3e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3748      	adds	r7, #72	; 0x48
 8004f46:	46bd      	mov	sp, r7
 8004f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4c:	03d09000 	.word	0x03d09000
 8004f50:	003d0900 	.word	0x003d0900
 8004f54:	08005880 	.word	0x08005880

08004f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01a      	beq.n	800506e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005056:	d10a      	bne.n	800506e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b098      	sub	sp, #96	; 0x60
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ac:	f7fb ff46 	bl	8000f3c <HAL_GetTick>
 80050b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d12f      	bne.n	8005120 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c8:	2200      	movs	r2, #0
 80050ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f88e 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d022      	beq.n	8005120 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ee:	653b      	str	r3, [r7, #80]	; 0x50
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f8:	647b      	str	r3, [r7, #68]	; 0x44
 80050fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e063      	b.n	80051e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b04      	cmp	r3, #4
 800512c:	d149      	bne.n	80051c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005136:	2200      	movs	r2, #0
 8005138:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f857 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03c      	beq.n	80051c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	623b      	str	r3, [r7, #32]
   return(result);
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800515c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
 8005168:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	60fb      	str	r3, [r7, #12]
   return(result);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	64bb      	str	r3, [r7, #72]	; 0x48
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3308      	adds	r3, #8
 8005198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800519a:	61fa      	str	r2, [r7, #28]
 800519c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	617b      	str	r3, [r7, #20]
   return(result);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e012      	b.n	80051e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3758      	adds	r7, #88	; 0x58
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	e049      	b.n	8005296 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d045      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fb fe97 	bl	8000f3c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <UART_WaitOnFlagUntilTimeout+0x30>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e048      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d031      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d110      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2208      	movs	r2, #8
 8005246:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f839 	bl	80052c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2208      	movs	r2, #8
 8005252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e029      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005270:	d111      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800527a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f81f 	bl	80052c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e00f      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d0a6      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b095      	sub	sp, #84	; 0x54
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
 80052e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	61fb      	str	r3, [r7, #28]
   return(result);
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <UART_EndRxTransfer+0xc8>)
 800530e:	4013      	ands	r3, r2
 8005310:	64bb      	str	r3, [r7, #72]	; 0x48
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800531a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005332:	2b01      	cmp	r3, #1
 8005334:	d118      	bne.n	8005368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	60bb      	str	r3, [r7, #8]
   return(result);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f023 0310 	bic.w	r3, r3, #16
 800534a:	647b      	str	r3, [r7, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	613b      	str	r3, [r7, #16]
   return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800537c:	bf00      	nop
 800537e:	3754      	adds	r7, #84	; 0x54
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	effffffe 	.word	0xeffffffe

0800538c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800539e:	2302      	movs	r3, #2
 80053a0:	e027      	b.n	80053f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2224      	movs	r2, #36	; 0x24
 80053ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005412:	2302      	movs	r3, #2
 8005414:	e02d      	b.n	8005472 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2224      	movs	r2, #36	; 0x24
 8005422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0201 	bic.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f850 	bl	80054f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800548e:	2302      	movs	r3, #2
 8005490:	e02d      	b.n	80054ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2224      	movs	r2, #36	; 0x24
 800549e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f812 	bl	80054f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005518:	e031      	b.n	800557e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800551a:	2310      	movs	r3, #16
 800551c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800551e:	2310      	movs	r3, #16
 8005520:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	0e5b      	lsrs	r3, r3, #25
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	0f5b      	lsrs	r3, r3, #29
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	7b3a      	ldrb	r2, [r7, #12]
 8005546:	4911      	ldr	r1, [pc, #68]	; (800558c <UARTEx_SetNbDataToProcess+0x94>)
 8005548:	5c8a      	ldrb	r2, [r1, r2]
 800554a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800554e:	7b3a      	ldrb	r2, [r7, #12]
 8005550:	490f      	ldr	r1, [pc, #60]	; (8005590 <UARTEx_SetNbDataToProcess+0x98>)
 8005552:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005554:	fb93 f3f2 	sdiv	r3, r3, r2
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	7b7a      	ldrb	r2, [r7, #13]
 8005564:	4909      	ldr	r1, [pc, #36]	; (800558c <UARTEx_SetNbDataToProcess+0x94>)
 8005566:	5c8a      	ldrb	r2, [r1, r2]
 8005568:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800556c:	7b7a      	ldrb	r2, [r7, #13]
 800556e:	4908      	ldr	r1, [pc, #32]	; (8005590 <UARTEx_SetNbDataToProcess+0x98>)
 8005570:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005572:	fb93 f3f2 	sdiv	r3, r3, r2
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	08005898 	.word	0x08005898
 8005590:	080058a0 	.word	0x080058a0

08005594 <memset>:
 8005594:	4402      	add	r2, r0
 8005596:	4603      	mov	r3, r0
 8005598:	4293      	cmp	r3, r2
 800559a:	d100      	bne.n	800559e <memset+0xa>
 800559c:	4770      	bx	lr
 800559e:	f803 1b01 	strb.w	r1, [r3], #1
 80055a2:	e7f9      	b.n	8005598 <memset+0x4>

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4d0d      	ldr	r5, [pc, #52]	; (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	; (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2600      	movs	r6, #0
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4d0b      	ldr	r5, [pc, #44]	; (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	; (80055e8 <__libc_init_array+0x44>)
 80055b8:	f000 f826 	bl	8005608 <_init>
 80055bc:	1b64      	subs	r4, r4, r5
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2600      	movs	r6, #0
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	080058b0 	.word	0x080058b0
 80055e0:	080058b0 	.word	0x080058b0
 80055e4:	080058b0 	.word	0x080058b0
 80055e8:	080058b4 	.word	0x080058b4

080055ec <memcpy>:
 80055ec:	440a      	add	r2, r1
 80055ee:	4291      	cmp	r1, r2
 80055f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055f4:	d100      	bne.n	80055f8 <memcpy+0xc>
 80055f6:	4770      	bx	lr
 80055f8:	b510      	push	{r4, lr}
 80055fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005602:	4291      	cmp	r1, r2
 8005604:	d1f9      	bne.n	80055fa <memcpy+0xe>
 8005606:	bd10      	pop	{r4, pc}

08005608 <_init>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr

08005614 <_fini>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr
