
Projet_Eve_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a0  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005650  08005650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080058e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  080058f8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  080058f8  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f3aa  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001e79  00000000  00000000  0002f42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000a80  00000000  00000000  000312a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000810  00000000  00000000  00031d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002efb7  00000000  00000000  00032538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f558  00000000  00000000  000614ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001328d6  00000000  00000000  00070a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002b1c  00000000  00000000  001a3320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001a5e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005638 	.word	0x08005638

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08005638 	.word	0x08005638

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fbf2 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f81a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8d8 	bl	80007ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f88a 	bl	8000714 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  RotateToPosition(90);
 8000600:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000628 <main+0x3c>
 8000604:	f000 fa1c 	bl	8000a40 <RotateToPosition>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  ToggleLed(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 f9ef 	bl	80009ec <ToggleLed>
	  //HAL_UART_Transmit(&huart3, test_Dynamixel_ToogleLED_XL430, sizeof(test_Dynamixel_ToogleLED_XL430), 10);
	  HAL_Delay(1000);
 800060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000612:	f000 fc73 	bl	8000efc <HAL_Delay>
	  ToggleLed(0);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f9e8 	bl	80009ec <ToggleLed>
	  HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f000 fc6c 	bl	8000efc <HAL_Delay>
  while (1){
 8000624:	e7f0      	b.n	8000608 <main+0x1c>
 8000626:	bf00      	nop
 8000628:	42b40000 	.word	0x42b40000

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	; 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 ff7e 	bl	800553c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 ff78 	bl	800553c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <SystemClock_Config+0xe0>)
 800064e:	f04f 32ff 	mov.w	r2, #4294967295
 8000652:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000656:	2004      	movs	r0, #4
 8000658:	f000 ff08 	bl	800146c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <SystemClock_Config+0xe4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <SystemClock_Config+0xe4>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xe4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000678:	bf00      	nop
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xe4>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000686:	d1f8      	bne.n	800067a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800069e:	2318      	movs	r3, #24
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ae:	230c      	movs	r3, #12
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff2e 	bl	8001520 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ca:	f000 f8c1 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	233f      	movs	r3, #63	; 0x3f
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fb46 	bl	8001d84 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006fe:	f000 f8a7 	bl	8000850 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3770      	adds	r7, #112	; 0x70
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58024800 	.word	0x58024800

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_USART3_UART_Init+0x94>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800073a:	2208      	movs	r2, #8
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800075c:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800075e:	f003 fc7d 	bl	800405c <HAL_HalfDuplex_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000768:	f000 f872 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000770:	f004 fe19 	bl	80053a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800077a:	f000 f869 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000782:	f004 fe4e 	bl	8005422 <HAL_UARTEx_SetRxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800078c:	f000 f860 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000792:	f004 fdcf 	bl	8005334 <HAL_UARTEx_DisableFifoMode>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800079c:	f000 f858 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2400002c 	.word	0x2400002c
 80007a8:	40004800 	.word	0x40004800

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b8:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <MX_GPIO_Init+0x9c>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_GPIO_Init+0x9c>)
 8000800:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800081c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800082e:	2307      	movs	r3, #7
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_GPIO_Init+0xa0>)
 800083a:	f000 fc67 	bl	800110c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58024400 	.word	0x58024400
 800084c:	58020c00 	.word	0x58020c00

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <update_crc>:
#include "stm32h7xx.h"

extern UART_HandleTypeDef huart3;

unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000862:	af00      	add	r7, sp, #0
 8000864:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000868:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800086c:	6019      	str	r1, [r3, #0]
 800086e:	4611      	mov	r1, r2
 8000870:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000874:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000878:	4602      	mov	r2, r0
 800087a:	801a      	strh	r2, [r3, #0]
 800087c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000880:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000884:	460a      	mov	r2, r1
 8000886:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 8000888:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800088c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <update_crc+0xd8>)
 8000892:	4618      	mov	r0, r3
 8000894:	4611      	mov	r1, r2
 8000896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089a:	461a      	mov	r2, r3
 800089c:	f004 fe7a 	bl	8005594 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80008a6:	e031      	b.n	800090c <update_crc+0xb0>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80008a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008ac:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80008ba:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80008be:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 80008c2:	6809      	ldr	r1, [r1, #0]
 80008c4:	440b      	add	r3, r1
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4053      	eors	r3, r2
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 80008d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008d8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 80008e6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80008ee:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	4053      	eors	r3, r2
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008fc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000900:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 8000902:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000906:	3301      	adds	r3, #1
 8000908:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800090c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000910:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000914:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d3c4      	bcc.n	80008a8 <update_crc+0x4c>
    }

    return crc_accum;
 800091e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000922:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000926:	881b      	ldrh	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08005650 	.word	0x08005650

08000938 <send_dynamixel>:
void send_dynamixel(uint8_t instruction[], size_t array_size){
 8000938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
 8000944:	466b      	mov	r3, sp
 8000946:	469a      	mov	sl, r3
	  uint8_t instruction_sent[array_size];
 8000948:	683e      	ldr	r6, [r7, #0]
 800094a:	4633      	mov	r3, r6
 800094c:	3b01      	subs	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	2300      	movs	r3, #0
 8000952:	46b0      	mov	r8, r6
 8000954:	4699      	mov	r9, r3
 8000956:	f04f 0200 	mov.w	r2, #0
 800095a:	f04f 0300 	mov.w	r3, #0
 800095e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800096a:	2300      	movs	r3, #0
 800096c:	4634      	mov	r4, r6
 800096e:	461d      	mov	r5, r3
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	00eb      	lsls	r3, r5, #3
 800097a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800097e:	00e2      	lsls	r2, r4, #3
 8000980:	1df3      	adds	r3, r6, #7
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	ebad 0d03 	sub.w	sp, sp, r3
 800098a:	466b      	mov	r3, sp
 800098c:	3300      	adds	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
	  memcpy(instruction_sent, instruction, array_size);
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	6938      	ldr	r0, [r7, #16]
 8000996:	f004 fdfd 	bl	8005594 <memcpy>
	  unsigned short crc = update_crc(0, instruction_sent, array_size-2);//initializing the message with 4 crc bytes at 0 so we take array_size-2 to not count them in the CRC calculation
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	3b02      	subs	r3, #2
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	6939      	ldr	r1, [r7, #16]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff ff58 	bl	800085c <update_crc>
 80009ac:	4603      	mov	r3, r0
 80009ae:	81fb      	strh	r3, [r7, #14]
	  unsigned char crc_l = (unsigned char)(crc & 0x00FF);
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	737b      	strb	r3, [r7, #13]
	  unsigned char crc_h = (unsigned char)((crc >> 8) & 0x00FF);
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	733b      	strb	r3, [r7, #12]
	  instruction_sent[array_size -2]=crc_l;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3b02      	subs	r3, #2
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	7b79      	ldrb	r1, [r7, #13]
 80009c4:	54d1      	strb	r1, [r2, r3]
	  instruction_sent[array_size - 1]=crc_h;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	7b39      	ldrb	r1, [r7, #12]
 80009ce:	54d1      	strb	r1, [r2, r3]
	  //while(!__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE));
	  HAL_UART_Transmit(&huart3,instruction_sent,sizeof(instruction_sent),10);
 80009d0:	b2b2      	uxth	r2, r6
 80009d2:	230a      	movs	r3, #10
 80009d4:	6939      	ldr	r1, [r7, #16]
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <send_dynamixel+0xb0>)
 80009d8:	f003 fb98 	bl	800410c <HAL_UART_Transmit>
 80009dc:	46d5      	mov	sp, sl
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	2400002c 	.word	0x2400002c

080009ec <ToggleLed>:

// Status 1 : Led ON, status 0 : Led OFF
void ToggleLed(int status){
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	  uint8_t Dynamixel_LED_ON_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <ToggleLed+0x4c>)
 80009f6:	f107 0418 	add.w	r4, r7, #24
 80009fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009fc:	c407      	stmia	r4!, {r0, r1, r2}
 80009fe:	7023      	strb	r3, [r4, #0]
			  /*débutparam, address 65:*/ ,0x41,0x00
			  /*value in the address*/,0x01
	  	  	  /*on calcul le CRC après */,0x00,0x00};

	  uint8_t Dynamixel_LED_OFF_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x06, 0x00,/*type instruction, ici write*/0x03
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <ToggleLed+0x50>)
 8000a02:	f107 0408 	add.w	r4, r7, #8
 8000a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a08:	c407      	stmia	r4!, {r0, r1, r2}
 8000a0a:	7023      	strb	r3, [r4, #0]
			  /*débutparam, address 65:*/ ,0x41,0x00
			  /*value in the address*/,0x00
	  	  	  /*on calcul le CRC après */,0x00,0x00};
	  if(status == 1){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d105      	bne.n	8000a1e <ToggleLed+0x32>
		  send_dynamixel(Dynamixel_LED_ON_XL430, sizeof(Dynamixel_LED_ON_XL430));
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	210d      	movs	r1, #13
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff8d 	bl	8000938 <send_dynamixel>
	  }
	  if(status == 0){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d105      	bne.n	8000a30 <ToggleLed+0x44>
	  		  send_dynamixel(Dynamixel_LED_OFF_XL430, sizeof(Dynamixel_LED_OFF_XL430));
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	210d      	movs	r1, #13
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff84 	bl	8000938 <send_dynamixel>
	  	  }
}
 8000a30:	bf00      	nop
 8000a32:	372c      	adds	r7, #44	; 0x2c
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	08005850 	.word	0x08005850
 8000a3c:	08005860 	.word	0x08005860

08000a40 <RotateToPosition>:
	   	  	  /*CRC*/				,0xCA,0x89};
}

//0.088 [deg/pulse]	1[rev] : 0 ~ 4,09

void RotateToPosition(float angleInDeg) {
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	ed87 0a01 	vstr	s0, [r7, #4]
    // Value range: 0 to 4095
    const int maxValue = 4095;
 8000a4a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

    // Adding security
    if (angleInDeg < 0) {
 8000a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5c:	d503      	bpl.n	8000a66 <RotateToPosition+0x26>
        angleInDeg = 0;
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	e013      	b.n	8000a8e <RotateToPosition+0x4e>
    } else if (angleInDeg > 360) {
 8000a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a6a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000b00 <RotateToPosition+0xc0>
 8000a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a76:	dd01      	ble.n	8000a7c <RotateToPosition+0x3c>
        angleInDeg = 360;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <RotateToPosition+0xc4>)
 8000a7a:	607b      	str	r3, [r7, #4]
    }

    // Convert degrees to the range [0, 360)
    while (angleInDeg >= 360.0) {
 8000a7c:	e007      	b.n	8000a8e <RotateToPosition+0x4e>
        angleInDeg -= 360.0;
 8000a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000b00 <RotateToPosition+0xc0>
 8000a86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a8a:	edc7 7a01 	vstr	s15, [r7, #4]
    while (angleInDeg >= 360.0) {
 8000a8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a92:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000b00 <RotateToPosition+0xc0>
 8000a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9e:	daee      	bge.n	8000a7e <RotateToPosition+0x3e>
    }

    // Convert degrees to the range [0, maxValue]
    int angleInInt = (int)round((angleInDeg / 360.0) * maxValue);
 8000aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa8:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000af8 <RotateToPosition+0xb8>
 8000aac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000abe:	eeb0 0b47 	vmov.f64	d0, d7
 8000ac2:	f004 fd75 	bl	80055b0 <round>
 8000ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8000aca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ace:	ee17 3a90 	vmov	r3, s15
 8000ad2:	623b      	str	r3, [r7, #32]

    // Convert to uint8_t array
    uint8_t HexAngle[2];
    HexAngle[0] = (uint8_t)((angleInInt >> 0) & 0xFF);
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	773b      	strb	r3, [r7, #28]
    HexAngle[1] = (uint8_t)((angleInInt >> 8) & 0xFF);
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	121b      	asrs	r3, r3, #8
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	777b      	strb	r3, [r7, #29]


    // Now HexAngle contains the 12-bit representation of the angle //change position to 90,

    uint8_t Dynamixel_ChangePosition_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x09, 0x00,/*type instruction, ici write*/0x03
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <RotateToPosition+0xc8>)
 8000ae4:	f107 040c 	add.w	r4, r7, #12
 8000ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		  /*débutparam, address 116:*/ ,0x74,0x00
    		  /*value in the address :2048*/,0x00,0x08,0x00,0x00
    	  	  /*CRC*/				,0xCA,0x89};
}
 8000aee:	bf00      	nop
 8000af0:	372c      	adds	r7, #44	; 0x2c
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd90      	pop	{r4, r7, pc}
 8000af6:	bf00      	nop
 8000af8:	00000000 	.word	0x00000000
 8000afc:	40768000 	.word	0x40768000
 8000b00:	43b40000 	.word	0x43b40000
 8000b04:	43b40000 	.word	0x43b40000
 8000b08:	08005890 	.word	0x08005890

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_MspInit+0x30>)
 8000b14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b18:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x30>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x30>)
 8000b24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58024400 	.word	0x58024400

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ba      	sub	sp, #232	; 0xe8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	22c0      	movs	r2, #192	; 0xc0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fceb 	bl	800553c <memset>
  if(huart->Instance==USART3)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <HAL_UART_MspInit+0xf4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d15c      	bne.n	8000c2a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b70:	f04f 0202 	mov.w	r2, #2
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fc88 	bl	800249c <HAL_RCCEx_PeriphCLKConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b92:	f7ff fe5d 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_UART_MspInit+0xf8>)
 8000b98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b9c:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <HAL_UART_MspInit+0xf8>)
 8000b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <HAL_UART_MspInit+0xf8>)
 8000ba8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_UART_MspInit+0xf8>)
 8000bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <HAL_UART_MspInit+0xf8>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_UART_MspInit+0xf8>)
 8000bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bec:	2307      	movs	r3, #7
 8000bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4810      	ldr	r0, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0xfc>)
 8000bfa:	f000 fa87 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0xfc>)
 8000c26:	f000 fa71 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	37e8      	adds	r7, #232	; 0xe8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40004800 	.word	0x40004800
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58020c00 	.word	0x58020c00

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f916 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <SystemInit+0xd0>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a31      	ldr	r2, [pc, #196]	; (8000d64 <SystemInit+0xd0>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <SystemInit+0xd4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d807      	bhi.n	8000cc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <SystemInit+0xd4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 030f 	bic.w	r3, r3, #15
 8000cbc:	4a2a      	ldr	r2, [pc, #168]	; (8000d68 <SystemInit+0xd4>)
 8000cbe:	f043 0303 	orr.w	r3, r3, #3
 8000cc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cc4:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <SystemInit+0xd8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <SystemInit+0xd8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <SystemInit+0xd8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <SystemInit+0xd8>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4924      	ldr	r1, [pc, #144]	; (8000d6c <SystemInit+0xd8>)
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <SystemInit+0xdc>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <SystemInit+0xd4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <SystemInit+0xd4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 030f 	bic.w	r3, r3, #15
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <SystemInit+0xd4>)
 8000cf8:	f043 0303 	orr.w	r3, r3, #3
 8000cfc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <SystemInit+0xd8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <SystemInit+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <SystemInit+0xd8>)
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <SystemInit+0xe0>)
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <SystemInit+0xd8>)
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <SystemInit+0xe4>)
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <SystemInit+0xd8>)
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <SystemInit+0xe8>)
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <SystemInit+0xd8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <SystemInit+0xd8>)
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <SystemInit+0xe8>)
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <SystemInit+0xd8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <SystemInit+0xd8>)
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <SystemInit+0xe8>)
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <SystemInit+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <SystemInit+0xd8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <SystemInit+0xd8>)
 8000d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <SystemInit+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <SystemInit+0xec>)
 8000d54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	52002000 	.word	0x52002000
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d74:	02020200 	.word	0x02020200
 8000d78:	01ff0000 	.word	0x01ff0000
 8000d7c:	01010280 	.word	0x01010280
 8000d80:	52004000 	.word	0x52004000

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d88:	f7ff ff84 	bl	8000c94 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f004 fbcb 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fc19 	bl	80005ec <main>
  bx  lr
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000dc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dc4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dc8:	080058e8 	.word	0x080058e8
  ldr r2, =_sbss
 8000dcc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dd0:	240000c4 	.word	0x240000c4

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f000 f962 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000de4:	f001 f984 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_Init+0x68>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	0a1b      	lsrs	r3, r3, #8
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	4913      	ldr	r1, [pc, #76]	; (8000e44 <HAL_Init+0x6c>)
 8000df6:	5ccb      	ldrb	r3, [r1, r3]
 8000df8:	f003 031f 	and.w	r3, r3, #31
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_Init+0x68>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_Init+0x6c>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <HAL_Init+0x70>)
 8000e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_Init+0x74>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f814 	bl	8000e50 <HAL_InitTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e002      	b.n	8000e38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e32:	f7ff fe6b 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	58024400 	.word	0x58024400
 8000e44:	080058a0 	.word	0x080058a0
 8000e48:	24000004 	.word	0x24000004
 8000e4c:	24000000 	.word	0x24000000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_InitTick+0x60>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e021      	b.n	8000ea8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_InitTick+0x64>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_InitTick+0x60>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f939 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f911 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x68>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2400000c 	.word	0x2400000c
 8000eb4:	24000000 	.word	0x24000000
 8000eb8:	24000008 	.word	0x24000008

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2400000c 	.word	0x2400000c
 8000ee0:	240000c0 	.word	0x240000c0

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	240000c0 	.word	0x240000c0

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2400000c 	.word	0x2400000c

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <__NVIC_SetPriorityGrouping+0x40>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x40>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	05fa0000 	.word	0x05fa0000

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff47 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb2 	bl	8001064 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800111a:	4b89      	ldr	r3, [pc, #548]	; (8001340 <HAL_GPIO_Init+0x234>)
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800111e:	e194      	b.n	800144a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8186 	beq.w	8001444 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x44>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 0201 	and.w	r2, r3, #1
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	69b9      	ldr	r1, [r7, #24]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0203 	and.w	r2, r3, #3
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80e0 	beq.w	8001444 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x238>)
 8001286:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <HAL_GPIO_Init+0x238>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_GPIO_Init+0x238>)
 8001296:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_GPIO_Init+0x23c>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_GPIO_Init+0x240>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d052      	beq.n	8001374 <HAL_GPIO_Init+0x268>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_GPIO_Init+0x244>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d031      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_GPIO_Init+0x248>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x22a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_GPIO_Init+0x24c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <HAL_GPIO_Init+0x250>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_GPIO_Init+0x254>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_GPIO_Init+0x258>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_GPIO_Init+0x25c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a18      	ldr	r2, [pc, #96]	; (800136c <HAL_GPIO_Init+0x260>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_GPIO_Init+0x264>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x20e>
 8001316:	2309      	movs	r3, #9
 8001318:	e02d      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800131a:	230a      	movs	r3, #10
 800131c:	e02b      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800131e:	2308      	movs	r3, #8
 8001320:	e029      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001322:	2307      	movs	r3, #7
 8001324:	e027      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001326:	2306      	movs	r3, #6
 8001328:	e025      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800132a:	2305      	movs	r3, #5
 800132c:	e023      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800132e:	2304      	movs	r3, #4
 8001330:	e021      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001332:	2303      	movs	r3, #3
 8001334:	e01f      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001336:	2302      	movs	r3, #2
 8001338:	e01d      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800133a:	2301      	movs	r3, #1
 800133c:	e01b      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800133e:	bf00      	nop
 8001340:	58000080 	.word	0x58000080
 8001344:	58024400 	.word	0x58024400
 8001348:	58000400 	.word	0x58000400
 800134c:	58020000 	.word	0x58020000
 8001350:	58020400 	.word	0x58020400
 8001354:	58020800 	.word	0x58020800
 8001358:	58020c00 	.word	0x58020c00
 800135c:	58021000 	.word	0x58021000
 8001360:	58021400 	.word	0x58021400
 8001364:	58021800 	.word	0x58021800
 8001368:	58021c00 	.word	0x58021c00
 800136c:	58022000 	.word	0x58022000
 8001370:	58022400 	.word	0x58022400
 8001374:	2300      	movs	r3, #0
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001386:	4938      	ldr	r1, [pc, #224]	; (8001468 <HAL_GPIO_Init+0x35c>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	3301      	adds	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f ae63 	bne.w	8001120 <HAL_GPIO_Init+0x14>
  }
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	3724      	adds	r7, #36	; 0x24
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	58000400 	.word	0x58000400

0800146c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	2b06      	cmp	r3, #6
 800147e:	d00a      	beq.n	8001496 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e040      	b.n	8001514 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e03e      	b.n	8001514 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800149e:	491f      	ldr	r1, [pc, #124]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014a6:	f7ff fd1d 	bl	8000ee4 <HAL_GetTick>
 80014aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014ac:	e009      	b.n	80014c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014ae:	f7ff fd19 	bl	8000ee4 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014bc:	d901      	bls.n	80014c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e028      	b.n	8001514 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ce:	d1ee      	bne.n	80014ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b1e      	cmp	r3, #30
 80014d4:	d008      	beq.n	80014e8 <HAL_PWREx_ConfigSupply+0x7c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b2e      	cmp	r3, #46	; 0x2e
 80014da:	d005      	beq.n	80014e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b1d      	cmp	r3, #29
 80014e0:	d002      	beq.n	80014e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b2d      	cmp	r3, #45	; 0x2d
 80014e6:	d114      	bne.n	8001512 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014e8:	f7ff fcfc 	bl	8000ee4 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014ee:	e009      	b.n	8001504 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014f0:	f7ff fcf8 	bl	8000ee4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d901      	bls.n	8001504 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e007      	b.n	8001514 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d1ee      	bne.n	80014f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	58024800 	.word	0x58024800

08001520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f000 bc1f 	b.w	8001d72 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80b3 	beq.w	80016a8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001542:	4b95      	ldr	r3, [pc, #596]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800154c:	4b92      	ldr	r3, [pc, #584]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	2b10      	cmp	r3, #16
 8001556:	d007      	beq.n	8001568 <HAL_RCC_OscConfig+0x48>
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	2b18      	cmp	r3, #24
 800155c:	d112      	bne.n	8001584 <HAL_RCC_OscConfig+0x64>
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d10d      	bne.n	8001584 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8098 	beq.w	80016a6 <HAL_RCC_OscConfig+0x186>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 8093 	bne.w	80016a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e3f6      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x7c>
 800158e:	4b82      	ldr	r3, [pc, #520]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a81      	ldr	r2, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e058      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d112      	bne.n	80015ca <HAL_RCC_OscConfig+0xaa>
 80015a4:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a7b      	ldr	r2, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b79      	ldr	r3, [pc, #484]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a78      	ldr	r2, [pc, #480]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e041      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d2:	d112      	bne.n	80015fa <HAL_RCC_OscConfig+0xda>
 80015d4:	4b70      	ldr	r3, [pc, #448]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a6f      	ldr	r2, [pc, #444]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6c      	ldr	r2, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b6a      	ldr	r3, [pc, #424]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a69      	ldr	r2, [pc, #420]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e029      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001602:	d112      	bne.n	800162a <HAL_RCC_OscConfig+0x10a>
 8001604:	4b64      	ldr	r3, [pc, #400]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a63      	ldr	r2, [pc, #396]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800160a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a60      	ldr	r2, [pc, #384]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a5d      	ldr	r2, [pc, #372]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e011      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
 800162a:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5a      	ldr	r2, [pc, #360]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a57      	ldr	r2, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800163c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b55      	ldr	r3, [pc, #340]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a54      	ldr	r2, [pc, #336]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001648:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800164c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d013      	beq.n	800167e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff fc45 	bl	8000ee4 <HAL_GetTick>
 800165a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165e:	f7ff fc41 	bl	8000ee4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e380      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001670:	4b49      	ldr	r3, [pc, #292]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x13e>
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fc31 	bl	8000ee4 <HAL_GetTick>
 8001682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001686:	f7ff fc2d 	bl	8000ee4 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b64      	cmp	r3, #100	; 0x64
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e36c      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001698:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x166>
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 808c 	beq.w	80017ce <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_RCC_OscConfig+0x1bc>
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2b18      	cmp	r3, #24
 80016d0:	d137      	bne.n	8001742 <HAL_RCC_OscConfig+0x222>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d132      	bne.n	8001742 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_OscConfig+0x1d4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e33e      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 0219 	bic.w	r2, r3, #25
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4925      	ldr	r1, [pc, #148]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fbed 	bl	8000ee4 <HAL_GetTick>
 800170a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fbe9 	bl	8000ee4 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e328      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	4917      	ldr	r1, [pc, #92]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	e045      	b.n	80017ce <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d028      	beq.n	800179c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0219 	bic.w	r2, r3, #25
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4910      	ldr	r1, [pc, #64]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fbc2 	bl	8000ee4 <HAL_GetTick>
 8001760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001764:	f7ff fbbe 	bl	8000ee4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e2fd      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	4901      	ldr	r1, [pc, #4]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
 8001796:	e01a      	b.n	80017ce <HAL_RCC_OscConfig+0x2ae>
 8001798:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179c:	4b97      	ldr	r3, [pc, #604]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a96      	ldr	r2, [pc, #600]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb9c 	bl	8000ee4 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fb98 	bl	8000ee4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e2d7      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017c2:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06a      	beq.n	80018b0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017e4:	4b85      	ldr	r3, [pc, #532]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d007      	beq.n	8001800 <HAL_RCC_OscConfig+0x2e0>
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b18      	cmp	r3, #24
 80017f4:	d11b      	bne.n	800182e <HAL_RCC_OscConfig+0x30e>
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d116      	bne.n	800182e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001800:	4b7e      	ldr	r3, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e2ac      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001818:	4b78      	ldr	r3, [pc, #480]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	4975      	ldr	r1, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800182c:	e040      	b.n	80018b0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d023      	beq.n	800187e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001836:	4b71      	ldr	r3, [pc, #452]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a70      	ldr	r2, [pc, #448]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fb4f 	bl	8000ee4 <HAL_GetTick>
 8001846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800184a:	f7ff fb4b 	bl	8000ee4 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e28a      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001868:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	4961      	ldr	r1, [pc, #388]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001878:	4313      	orrs	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
 800187c:	e018      	b.n	80018b0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a5e      	ldr	r2, [pc, #376]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff fb2b 	bl	8000ee4 <HAL_GetTick>
 800188e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001892:	f7ff fb27 	bl	8000ee4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e266      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d036      	beq.n	800192a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d019      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c4:	4b4d      	ldr	r3, [pc, #308]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb08 	bl	8000ee4 <HAL_GetTick>
 80018d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fb04 	bl	8000ee4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e243      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ea:	4b44      	ldr	r3, [pc, #272]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x3b8>
 80018f6:	e018      	b.n	800192a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80018fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fc:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff faee 	bl	8000ee4 <HAL_GetTick>
 8001908:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff faea 	bl	8000ee4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e229      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	2b00      	cmp	r3, #0
 8001934:	d036      	beq.n	80019a4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d019      	beq.n	8001972 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2e      	ldr	r2, [pc, #184]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001948:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800194a:	f7ff facb 	bl	8000ee4 <HAL_GetTick>
 800194e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001952:	f7ff fac7 	bl	8000ee4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e206      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x432>
 8001970:	e018      	b.n	80019a4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 8001978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800197c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800197e:	f7ff fab1 	bl	8000ee4 <HAL_GetTick>
 8001982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001986:	f7ff faad 	bl	8000ee4 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1ec      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80af 	beq.w	8001b10 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_RCC_OscConfig+0x4e0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_RCC_OscConfig+0x4e0>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019be:	f7ff fa91 	bl	8000ee4 <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7ff fa8d 	bl	8000ee4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1cc      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_OscConfig+0x4e0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d10b      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4e4>
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a02      	ldr	r2, [pc, #8]	; (80019fc <HAL_RCC_OscConfig+0x4dc>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
 80019f8:	e05b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x592>
 80019fa:	bf00      	nop
 80019fc:	58024400 	.word	0x58024400
 8001a00:	58024800 	.word	0x58024800
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x512>
 8001a0c:	4b9d      	ldr	r3, [pc, #628]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a9c      	ldr	r2, [pc, #624]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
 8001a18:	4b9a      	ldr	r3, [pc, #616]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a99      	ldr	r2, [pc, #612]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
 8001a24:	4b97      	ldr	r3, [pc, #604]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a96      	ldr	r2, [pc, #600]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	e03f      	b.n	8001ab2 <HAL_RCC_OscConfig+0x592>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d112      	bne.n	8001a60 <HAL_RCC_OscConfig+0x540>
 8001a3a:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a91      	ldr	r2, [pc, #580]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b8f      	ldr	r3, [pc, #572]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a8e      	ldr	r2, [pc, #568]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
 8001a52:	4b8c      	ldr	r3, [pc, #560]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a8b      	ldr	r2, [pc, #556]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5e:	e028      	b.n	8001ab2 <HAL_RCC_OscConfig+0x592>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b85      	cmp	r3, #133	; 0x85
 8001a66:	d112      	bne.n	8001a8e <HAL_RCC_OscConfig+0x56e>
 8001a68:	4b86      	ldr	r3, [pc, #536]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	4a85      	ldr	r2, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6713      	str	r3, [r2, #112]	; 0x70
 8001a74:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a78:	4a82      	ldr	r2, [pc, #520]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a80:	4b80      	ldr	r3, [pc, #512]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a7f      	ldr	r2, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8c:	e011      	b.n	8001ab2 <HAL_RCC_OscConfig+0x592>
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	4a7c      	ldr	r2, [pc, #496]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9a:	4b7a      	ldr	r3, [pc, #488]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a79      	ldr	r2, [pc, #484]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a76      	ldr	r2, [pc, #472]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff fa13 	bl	8000ee4 <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fa0f 	bl	8000ee4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e14c      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x5a2>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f9fd 	bl	8000ee4 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff f9f9 	bl	8000ee4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e136      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b04:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 812b 	beq.w	8001d70 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b1a:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b22:	2b18      	cmp	r3, #24
 8001b24:	f000 80bb 	beq.w	8001c9e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	f040 8095 	bne.w	8001c5c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a53      	ldr	r2, [pc, #332]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f9d1 	bl	8000ee4 <HAL_GetTick>
 8001b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff f9cd 	bl	8000ee4 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e10c      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b58:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_OscConfig+0x768>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	430a      	orrs	r2, r1
 8001b78:	4942      	ldr	r1, [pc, #264]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	628b      	str	r3, [r1, #40]	; 0x28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	025b      	lsls	r3, r3, #9
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001bae:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x76c>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bcc:	00d2      	lsls	r2, r2, #3
 8001bce:	492d      	ldr	r1, [pc, #180]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	f023 020c 	bic.w	r2, r3, #12
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	4928      	ldr	r1, [pc, #160]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f023 0202 	bic.w	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4924      	ldr	r1, [pc, #144]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f956 	bl	8000ee4 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f952 	bl	8000ee4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e091      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x71c>
 8001c5a:	e089      	b.n	8001d70 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_RCC_OscConfig+0x764>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f93c 	bl	8000ee4 <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6e:	e00f      	b.n	8001c90 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f938 	bl	8000ee4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d908      	bls.n	8001c90 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e077      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
 8001c82:	bf00      	nop
 8001c84:	58024400 	.word	0x58024400
 8001c88:	fffffc0c 	.word	0xfffffc0c
 8001c8c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e9      	bne.n	8001c70 <HAL_RCC_OscConfig+0x750>
 8001c9c:	e068      	b.n	8001d70 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d031      	beq.n	8001d16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d12a      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d122      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d11a      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	0a5b      	lsrs	r3, r3, #9
 8001ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d111      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d108      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	0e1b      	lsrs	r3, r3, #24
 8001d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e02b      	b.n	8001d72 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d24:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d01f      	beq.n	8001d70 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d3c:	f7ff f8d2 	bl	8000ee4 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d42:	bf00      	nop
 8001d44:	f7ff f8ce 	bl	8000ee4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d0f9      	beq.n	8001d44 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_OscConfig+0x860>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d5c:	00d2      	lsls	r2, r2, #3
 8001d5e:	4907      	ldr	r1, [pc, #28]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_RCC_OscConfig+0x85c>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3730      	adds	r7, #48	; 0x30
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	ffff0007 	.word	0xffff0007

08001d84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e19c      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b87      	ldr	r3, [pc, #540]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 020f 	bic.w	r2, r3, #15
 8001dae:	4985      	ldr	r1, [pc, #532]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b83      	ldr	r3, [pc, #524]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e184      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	4b7b      	ldr	r3, [pc, #492]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d908      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001de4:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	4975      	ldr	r1, [pc, #468]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	4b70      	ldr	r3, [pc, #448]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d908      	bls.n	8001e24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e12:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	496a      	ldr	r1, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	495e      	ldr	r1, [pc, #376]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e6e:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4953      	ldr	r1, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f023 020f 	bic.w	r2, r3, #15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4947      	ldr	r1, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d055      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4940      	ldr	r1, [pc, #256]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d121      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0f6      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d115      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ea      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f04:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0de      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f14:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0d6      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f36:	f7fe ffd5 	bl	8000ee4 <HAL_GetTick>
 8001f3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3e:	f7fe ffd1 	bl	8000ee4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0be      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d1eb      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d208      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f023 020f 	bic.w	r2, r3, #15
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d214      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e086      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
 8001fc4:	52002000 	.word	0x52002000
 8001fc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4939      	ldr	r1, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002012:	429a      	cmp	r2, r3
 8002014:	d208      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002016:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	492e      	ldr	r1, [pc, #184]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002024:	4313      	orrs	r3, r2
 8002026:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002040:	429a      	cmp	r2, r3
 8002042:	d208      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4922      	ldr	r1, [pc, #136]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002052:	4313      	orrs	r3, r2
 8002054:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800206e:	429a      	cmp	r2, r3
 8002070:	d208      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4917      	ldr	r1, [pc, #92]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002080:	4313      	orrs	r3, r2
 8002082:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002084:	f000 f834 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	4912      	ldr	r1, [pc, #72]	; (80020e0 <HAL_RCC_ClockConfig+0x35c>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_RCC_ClockConfig+0x35c>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x360>)
 80020ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x364>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x368>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fec2 	bl	8000e50 <HAL_InitTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400
 80020e0:	080058a0 	.word	0x080058a0
 80020e4:	24000004 	.word	0x24000004
 80020e8:	24000000 	.word	0x24000000
 80020ec:	24000008 	.word	0x24000008

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f6:	4bb3      	ldr	r3, [pc, #716]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020fe:	2b18      	cmp	r3, #24
 8002100:	f200 8155 	bhi.w	80023ae <HAL_RCC_GetSysClockFreq+0x2be>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	08002171 	.word	0x08002171
 8002110:	080023af 	.word	0x080023af
 8002114:	080023af 	.word	0x080023af
 8002118:	080023af 	.word	0x080023af
 800211c:	080023af 	.word	0x080023af
 8002120:	080023af 	.word	0x080023af
 8002124:	080023af 	.word	0x080023af
 8002128:	080023af 	.word	0x080023af
 800212c:	08002197 	.word	0x08002197
 8002130:	080023af 	.word	0x080023af
 8002134:	080023af 	.word	0x080023af
 8002138:	080023af 	.word	0x080023af
 800213c:	080023af 	.word	0x080023af
 8002140:	080023af 	.word	0x080023af
 8002144:	080023af 	.word	0x080023af
 8002148:	080023af 	.word	0x080023af
 800214c:	0800219d 	.word	0x0800219d
 8002150:	080023af 	.word	0x080023af
 8002154:	080023af 	.word	0x080023af
 8002158:	080023af 	.word	0x080023af
 800215c:	080023af 	.word	0x080023af
 8002160:	080023af 	.word	0x080023af
 8002164:	080023af 	.word	0x080023af
 8002168:	080023af 	.word	0x080023af
 800216c:	080021a3 	.word	0x080021a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002170:	4b94      	ldr	r3, [pc, #592]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800217c:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	4a90      	ldr	r2, [pc, #576]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800218e:	e111      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002190:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002192:	61bb      	str	r3, [r7, #24]
      break;
 8002194:	e10e      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002196:	4b8d      	ldr	r3, [pc, #564]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002198:	61bb      	str	r3, [r7, #24]
      break;
 800219a:	e10b      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800219c:	4b8c      	ldr	r3, [pc, #560]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800219e:	61bb      	str	r3, [r7, #24]
      break;
 80021a0:	e108      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021ac:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021b8:	4b82      	ldr	r3, [pc, #520]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80021c2:	4b80      	ldr	r3, [pc, #512]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80e1 	beq.w	80023a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	f000 8083 	beq.w	80022f4 <HAL_RCC_GetSysClockFreq+0x204>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	f200 80a1 	bhi.w	8002338 <HAL_RCC_GetSysClockFreq+0x248>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x114>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d056      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002202:	e099      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002204:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d02d      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002210:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	4a6b      	ldr	r2, [pc, #428]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223a:	4b62      	ldr	r3, [pc, #392]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224a:	ed97 6a02 	vldr	s12, [r7, #8]
 800224e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800225e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800226a:	e087      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800227a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002292:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800229e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ae:	e065      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80022be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c2:	4b40      	ldr	r3, [pc, #256]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022f2:	e043      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002306:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002316:	ed97 6a02 	vldr	s12, [r7, #8]
 800231a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800231e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800232a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800232e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002336:	e021      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002342:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800235a:	ed97 6a02 	vldr	s12, [r7, #8]
 800235e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800236a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800236e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800237a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	0a5b      	lsrs	r3, r3, #9
 8002382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002386:	3301      	adds	r3, #1
 8002388:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002394:	edd7 6a07 	vldr	s13, [r7, #28]
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a0:	ee17 3a90 	vmov	r3, s15
 80023a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
      break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023b0:	61bb      	str	r3, [r7, #24]
      break;
 80023b2:	bf00      	nop
  }

  return sysclockfreq;
 80023b4:	69bb      	ldr	r3, [r7, #24]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	58024400 	.word	0x58024400
 80023c8:	03d09000 	.word	0x03d09000
 80023cc:	003d0900 	.word	0x003d0900
 80023d0:	007a1200 	.word	0x007a1200
 80023d4:	46000000 	.word	0x46000000
 80023d8:	4c742400 	.word	0x4c742400
 80023dc:	4a742400 	.word	0x4a742400
 80023e0:	4af42400 	.word	0x4af42400

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023ea:	f7ff fe81 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_GetHCLKFreq+0x50>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	490f      	ldr	r1, [pc, #60]	; (8002438 <HAL_RCC_GetHCLKFreq+0x54>)
 80023fc:	5ccb      	ldrb	r3, [r1, r3]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_GetHCLKFreq+0x50>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_GetHCLKFreq+0x54>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_RCC_GetHCLKFreq+0x58>)
 8002420:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_RCC_GetHCLKFreq+0x58>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	58024400 	.word	0x58024400
 8002438:	080058a0 	.word	0x080058a0
 800243c:	24000004 	.word	0x24000004
 8002440:	24000000 	.word	0x24000000

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002448:	f7ff ffcc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4904      	ldr	r1, [pc, #16]	; (800246c <HAL_RCC_GetPCLK1Freq+0x28>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	58024400 	.word	0x58024400
 800246c:	080058a0 	.word	0x080058a0

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002474:	f7ff ffb6 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4904      	ldr	r1, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	58024400 	.word	0x58024400
 8002498:	080058a0 	.word	0x080058a0

0800249c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800249c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a0:	b0c8      	sub	sp, #288	; 0x120
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80024c0:	2500      	movs	r5, #0
 80024c2:	ea54 0305 	orrs.w	r3, r4, r5
 80024c6:	d049      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80024c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024d2:	d02f      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024d8:	d828      	bhi.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024de:	d01a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024e4:	d822      	bhi.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ee:	d007      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024f0:	e01c      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024f2:	4ba7      	ldr	r3, [pc, #668]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	4aa6      	ldr	r2, [pc, #664]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024fe:	e01a      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002504:	3308      	adds	r3, #8
 8002506:	2102      	movs	r1, #2
 8002508:	4618      	mov	r0, r3
 800250a:	f001 fc43 	bl	8003d94 <RCCEx_PLL2_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002514:	e00f      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800251a:	3328      	adds	r3, #40	; 0x28
 800251c:	2102      	movs	r1, #2
 800251e:	4618      	mov	r0, r3
 8002520:	f001 fcea 	bl	8003ef8 <RCCEx_PLL3_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800252a:	e004      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002532:	e000      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002536:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800253e:	4b94      	ldr	r3, [pc, #592]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002542:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254c:	4a90      	ldr	r2, [pc, #576]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254e:	430b      	orrs	r3, r1
 8002550:	6513      	str	r3, [r2, #80]	; 0x50
 8002552:	e003      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002558:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800255c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002568:	f04f 0900 	mov.w	r9, #0
 800256c:	ea58 0309 	orrs.w	r3, r8, r9
 8002570:	d047      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	2b04      	cmp	r3, #4
 800257a:	d82a      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	08002599 	.word	0x08002599
 8002588:	080025a7 	.word	0x080025a7
 800258c:	080025bd 	.word	0x080025bd
 8002590:	080025db 	.word	0x080025db
 8002594:	080025db 	.word	0x080025db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002598:	4b7d      	ldr	r3, [pc, #500]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	4a7c      	ldr	r2, [pc, #496]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025a4:	e01a      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025aa:	3308      	adds	r3, #8
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 fbf0 	bl	8003d94 <RCCEx_PLL2_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025ba:	e00f      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c0:	3328      	adds	r3, #40	; 0x28
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 fc97 	bl	8003ef8 <RCCEx_PLL3_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025d0:	e004      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025d8:	e000      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80025da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	f023 0107 	bic.w	r1, r3, #7
 80025ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4a67      	ldr	r2, [pc, #412]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6513      	str	r3, [r2, #80]	; 0x50
 80025f8:	e003      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800260e:	f04f 0b00 	mov.w	fp, #0
 8002612:	ea5a 030b 	orrs.w	r3, sl, fp
 8002616:	d054      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002622:	d036      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002624:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002628:	d82f      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800262a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262e:	d032      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002634:	d829      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002636:	2bc0      	cmp	r3, #192	; 0xc0
 8002638:	d02f      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800263a:	2bc0      	cmp	r3, #192	; 0xc0
 800263c:	d825      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d018      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002642:	2b80      	cmp	r3, #128	; 0x80
 8002644:	d821      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d007      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800264e:	e01c      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	4a4e      	ldr	r2, [pc, #312]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800265c:	e01e      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800265e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002662:	3308      	adds	r3, #8
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fb94 	bl	8003d94 <RCCEx_PLL2_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002672:	e013      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002678:	3328      	adds	r3, #40	; 0x28
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fc3b 	bl	8003ef8 <RCCEx_PLL3_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002688:	e008      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002690:	e004      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800269a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800269c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80026ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	4a37      	ldr	r2, [pc, #220]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6513      	str	r3, [r2, #80]	; 0x50
 80026b8:	e003      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80026c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80026ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80026dc:	460b      	mov	r3, r1
 80026de:	4313      	orrs	r3, r2
 80026e0:	d05c      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80026e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026ec:	d03b      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026ee:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026f2:	d834      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f8:	d037      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80026fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026fe:	d82e      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002700:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002704:	d033      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002706:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800270a:	d828      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002710:	d01a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d822      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800271c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002720:	d007      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002722:	e01c      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800272a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002730:	e01e      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002736:	3308      	adds	r3, #8
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f001 fb2a 	bl	8003d94 <RCCEx_PLL2_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002746:	e013      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800274c:	3328      	adds	r3, #40	; 0x28
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f001 fbd1 	bl	8003ef8 <RCCEx_PLL3_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800275c:	e008      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002764:	e004      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800276e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002770:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10d      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002786:	4a02      	ldr	r2, [pc, #8]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002788:	430b      	orrs	r3, r1
 800278a:	6513      	str	r3, [r2, #80]	; 0x50
 800278c:	e006      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800278e:	bf00      	nop
 8002790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002798:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800279c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80027a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80027b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80027b6:	460b      	mov	r3, r1
 80027b8:	4313      	orrs	r3, r2
 80027ba:	d03a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80027bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	2b30      	cmp	r3, #48	; 0x30
 80027c4:	d01f      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80027c6:	2b30      	cmp	r3, #48	; 0x30
 80027c8:	d819      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d00c      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d815      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d111      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027da:	4bae      	ldr	r3, [pc, #696]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	4aad      	ldr	r2, [pc, #692]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027e6:	e011      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ec:	3308      	adds	r3, #8
 80027ee:	2102      	movs	r1, #2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 facf 	bl	8003d94 <RCCEx_PLL2_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027fc:	e006      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002804:	e002      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800280a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800280c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002814:	4b9f      	ldr	r3, [pc, #636]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800281c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4a9c      	ldr	r2, [pc, #624]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002824:	430b      	orrs	r3, r1
 8002826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002828:	e003      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800282e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800283e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002848:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800284c:	460b      	mov	r3, r1
 800284e:	4313      	orrs	r3, r2
 8002850:	d051      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800285c:	d035      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800285e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002862:	d82e      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002864:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002868:	d031      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x432>
 800286a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800286e:	d828      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002874:	d01a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287a:	d822      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d007      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002886:	e01c      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002888:	4b82      	ldr	r3, [pc, #520]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	4a81      	ldr	r2, [pc, #516]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002894:	e01c      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800289a:	3308      	adds	r3, #8
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fa78 	bl	8003d94 <RCCEx_PLL2_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028aa:	e011      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b0:	3328      	adds	r3, #40	; 0x28
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 fb1f 	bl	8003ef8 <RCCEx_PLL3_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028c0:	e006      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028c8:	e002      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80028ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028d8:	4b6e      	ldr	r3, [pc, #440]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80028e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e6:	4a6b      	ldr	r2, [pc, #428]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6513      	str	r3, [r2, #80]	; 0x50
 80028ec:	e003      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800290c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002910:	460b      	mov	r3, r1
 8002912:	4313      	orrs	r3, r2
 8002914:	d053      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800291a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002920:	d033      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002926:	d82c      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800292c:	d02f      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800292e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002932:	d826      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002934:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002938:	d02b      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800293a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800293e:	d820      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002944:	d012      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800294a:	d81a      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d022      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d115      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295a:	3308      	adds	r3, #8
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fa18 	bl	8003d94 <RCCEx_PLL2_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800296a:	e015      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800296c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002970:	3328      	adds	r3, #40	; 0x28
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fabf 	bl	8003ef8 <RCCEx_PLL3_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002980:	e00a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002988:	e006      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800298a:	bf00      	nop
 800298c:	e004      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80029a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ae:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6513      	str	r3, [r2, #80]	; 0x50
 80029b4:	e003      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80029ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80029d8:	460b      	mov	r3, r1
 80029da:	4313      	orrs	r3, r2
 80029dc:	d060      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80029de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029e6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029ea:	d039      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80029ec:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029f0:	d832      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f6:	d035      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80029f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029fc:	d82c      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d031      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a08:	d826      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a0e:	d02d      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002a10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a14:	d820      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1a:	d012      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a20:	d81a      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d024      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2a:	d115      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a30:	3308      	adds	r3, #8
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f9ad 	bl	8003d94 <RCCEx_PLL2_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a40:	e017      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a46:	3328      	adds	r3, #40	; 0x28
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 fa54 	bl	8003ef8 <RCCEx_PLL3_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a56:	e00c      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a5e:	e008      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a60:	bf00      	nop
 8002a62:	e006      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a64:	bf00      	nop
 8002a66:	e004      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a68:	bf00      	nop
 8002a6a:	e002      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10e      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a8a:	4a02      	ldr	r2, [pc, #8]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a90:	e006      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002aba:	460b      	mov	r3, r1
 8002abc:	4313      	orrs	r3, r2
 8002abe:	d037      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aca:	d00e      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad0:	d816      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ada:	d111      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002adc:	4bc4      	ldr	r3, [pc, #784]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	4ac3      	ldr	r2, [pc, #780]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ae8:	e00f      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aee:	3308      	adds	r3, #8
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 f94e 	bl	8003d94 <RCCEx_PLL2_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002afe:	e004      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b06:	e000      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b12:	4bb7      	ldr	r3, [pc, #732]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b20:	4ab3      	ldr	r2, [pc, #716]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b22:	430b      	orrs	r3, r1
 8002b24:	6513      	str	r3, [r2, #80]	; 0x50
 8002b26:	e003      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	d039      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d81c      	bhi.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b9d 	.word	0x08002b9d
 8002b64:	08002b71 	.word	0x08002b71
 8002b68:	08002b7f 	.word	0x08002b7f
 8002b6c:	08002b9d 	.word	0x08002b9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b70:	4b9f      	ldr	r3, [pc, #636]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a9e      	ldr	r2, [pc, #632]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b7c:	e00f      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b82:	3308      	adds	r3, #8
 8002b84:	2102      	movs	r1, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 f904 	bl	8003d94 <RCCEx_PLL2_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b92:	e004      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b9a:	e000      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ba6:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002baa:	f023 0103 	bic.w	r1, r3, #3
 8002bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	4a8e      	ldr	r2, [pc, #568]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bba:	e003      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002bde:	460b      	mov	r3, r1
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f000 8099 	beq.w	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be6:	4b83      	ldr	r3, [pc, #524]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a82      	ldr	r2, [pc, #520]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bf2:	f7fe f977 	bl	8000ee4 <HAL_GetTick>
 8002bf6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fe f972 	bl	8000ee4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d903      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c12:	e005      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c14:	4b77      	ldr	r3, [pc, #476]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ed      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002c20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d173      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c28:	4b71      	ldr	r3, [pc, #452]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c34:	4053      	eors	r3, r2
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d015      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c4a:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a68      	ldr	r2, [pc, #416]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c56:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c62:	4a63      	ldr	r2, [pc, #396]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c76:	d118      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe f934 	bl	8000ee4 <HAL_GetTick>
 8002c7c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c80:	e00d      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe f92f 	bl	8000ee4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c8c:	1ad2      	subs	r2, r2, r3
 8002c8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d903      	bls.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002c9c:	e005      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c9e:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0eb      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002caa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d129      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cd4:	091a      	lsrs	r2, r3, #4
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	4a45      	ldr	r2, [pc, #276]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6113      	str	r3, [r2, #16]
 8002ce0:	e005      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	4a42      	ldr	r2, [pc, #264]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cec:	6113      	str	r3, [r2, #16]
 8002cee:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	e008      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f002 0301 	and.w	r3, r2, #1
 8002d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f000 8090 	beq.w	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d42:	2b28      	cmp	r3, #40	; 0x28
 8002d44:	d870      	bhi.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002d46:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002e31 	.word	0x08002e31
 8002d50:	08002e29 	.word	0x08002e29
 8002d54:	08002e29 	.word	0x08002e29
 8002d58:	08002e29 	.word	0x08002e29
 8002d5c:	08002e29 	.word	0x08002e29
 8002d60:	08002e29 	.word	0x08002e29
 8002d64:	08002e29 	.word	0x08002e29
 8002d68:	08002e29 	.word	0x08002e29
 8002d6c:	08002dfd 	.word	0x08002dfd
 8002d70:	08002e29 	.word	0x08002e29
 8002d74:	08002e29 	.word	0x08002e29
 8002d78:	08002e29 	.word	0x08002e29
 8002d7c:	08002e29 	.word	0x08002e29
 8002d80:	08002e29 	.word	0x08002e29
 8002d84:	08002e29 	.word	0x08002e29
 8002d88:	08002e29 	.word	0x08002e29
 8002d8c:	08002e13 	.word	0x08002e13
 8002d90:	08002e29 	.word	0x08002e29
 8002d94:	08002e29 	.word	0x08002e29
 8002d98:	08002e29 	.word	0x08002e29
 8002d9c:	08002e29 	.word	0x08002e29
 8002da0:	08002e29 	.word	0x08002e29
 8002da4:	08002e29 	.word	0x08002e29
 8002da8:	08002e29 	.word	0x08002e29
 8002dac:	08002e31 	.word	0x08002e31
 8002db0:	08002e29 	.word	0x08002e29
 8002db4:	08002e29 	.word	0x08002e29
 8002db8:	08002e29 	.word	0x08002e29
 8002dbc:	08002e29 	.word	0x08002e29
 8002dc0:	08002e29 	.word	0x08002e29
 8002dc4:	08002e29 	.word	0x08002e29
 8002dc8:	08002e29 	.word	0x08002e29
 8002dcc:	08002e31 	.word	0x08002e31
 8002dd0:	08002e29 	.word	0x08002e29
 8002dd4:	08002e29 	.word	0x08002e29
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	08002e29 	.word	0x08002e29
 8002de0:	08002e29 	.word	0x08002e29
 8002de4:	08002e29 	.word	0x08002e29
 8002de8:	08002e29 	.word	0x08002e29
 8002dec:	08002e31 	.word	0x08002e31
 8002df0:	58024400 	.word	0x58024400
 8002df4:	58024800 	.word	0x58024800
 8002df8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e00:	3308      	adds	r3, #8
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 ffc5 	bl	8003d94 <RCCEx_PLL2_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e10:	e00f      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e16:	3328      	adds	r3, #40	; 0x28
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f86c 	bl	8003ef8 <RCCEx_PLL3_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e26:	e004      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e2e:	e000      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e3a:	4bc0      	ldr	r3, [pc, #768]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4a:	4abc      	ldr	r2, [pc, #752]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6553      	str	r3, [r2, #84]	; 0x54
 8002e50:	e003      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f002 0302 	and.w	r3, r2, #2
 8002e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e70:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002e74:	460b      	mov	r3, r1
 8002e76:	4313      	orrs	r3, r2
 8002e78:	d043      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d824      	bhi.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002ed9 	.word	0x08002ed9
 8002e90:	08002ea5 	.word	0x08002ea5
 8002e94:	08002ebb 	.word	0x08002ebb
 8002e98:	08002ed9 	.word	0x08002ed9
 8002e9c:	08002ed9 	.word	0x08002ed9
 8002ea0:	08002ed9 	.word	0x08002ed9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ff71 	bl	8003d94 <RCCEx_PLL2_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e00f      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ebe:	3328      	adds	r3, #40	; 0x28
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f818 	bl	8003ef8 <RCCEx_PLL3_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ece:	e004      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ed6:	e000      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ee2:	4b96      	ldr	r3, [pc, #600]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f023 0107 	bic.w	r1, r3, #7
 8002eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef2:	4a92      	ldr	r2, [pc, #584]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6553      	str	r3, [r2, #84]	; 0x54
 8002ef8:	e003      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002efe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f002 0304 	and.w	r3, r2, #4
 8002f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f18:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	d043      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d824      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f81 	.word	0x08002f81
 8002f38:	08002f4d 	.word	0x08002f4d
 8002f3c:	08002f63 	.word	0x08002f63
 8002f40:	08002f81 	.word	0x08002f81
 8002f44:	08002f81 	.word	0x08002f81
 8002f48:	08002f81 	.word	0x08002f81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f50:	3308      	adds	r3, #8
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 ff1d 	bl	8003d94 <RCCEx_PLL2_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f60:	e00f      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f66:	3328      	adds	r3, #40	; 0x28
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ffc4 	bl	8003ef8 <RCCEx_PLL3_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f76:	e004      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f7e:	e000      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	f023 0107 	bic.w	r1, r3, #7
 8002f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f9a:	4a68      	ldr	r2, [pc, #416]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f002 0320 	and.w	r3, r2, #32
 8002fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	d055      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd6:	d033      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fdc:	d82c      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d02f      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d826      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fee:	d02b      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002ff0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ff4:	d820      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffa:	d012      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003000:	d81a      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d022      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800300a:	d115      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800300c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003010:	3308      	adds	r3, #8
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f000 febd 	bl	8003d94 <RCCEx_PLL2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003020:	e015      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003026:	3328      	adds	r3, #40	; 0x28
 8003028:	2102      	movs	r1, #2
 800302a:	4618      	mov	r0, r3
 800302c:	f000 ff64 	bl	8003ef8 <RCCEx_PLL3_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003036:	e00a      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800303e:	e006      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003040:	bf00      	nop
 8003042:	e004      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003044:	bf00      	nop
 8003046:	e002      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800304c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800305e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003066:	4a35      	ldr	r2, [pc, #212]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003068:	430b      	orrs	r3, r1
 800306a:	6553      	str	r3, [r2, #84]	; 0x54
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003072:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800308c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003090:	460b      	mov	r3, r1
 8003092:	4313      	orrs	r3, r2
 8003094:	d058      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800309e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030a2:	d033      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80030a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030a8:	d82c      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	d02f      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b4:	d826      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ba:	d02b      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80030bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c0:	d820      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c6:	d012      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80030c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030cc:	d81a      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d022      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d6:	d115      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030dc:	3308      	adds	r3, #8
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fe57 	bl	8003d94 <RCCEx_PLL2_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030ec:	e015      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f2:	3328      	adds	r3, #40	; 0x28
 80030f4:	2102      	movs	r1, #2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fefe 	bl	8003ef8 <RCCEx_PLL3_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003102:	e00a      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800310a:	e006      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800310c:	bf00      	nop
 800310e:	e004      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003110:	bf00      	nop
 8003112:	e002      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10e      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800312a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003132:	4a02      	ldr	r2, [pc, #8]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003134:	430b      	orrs	r3, r1
 8003136:	6593      	str	r3, [r2, #88]	; 0x58
 8003138:	e006      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800313a:	bf00      	nop
 800313c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003144:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003158:	2300      	movs	r3, #0
 800315a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800315e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003162:	460b      	mov	r3, r1
 8003164:	4313      	orrs	r3, r2
 8003166:	d055      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003170:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003174:	d033      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003176:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800317a:	d82c      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d02f      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003186:	d826      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003188:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800318c:	d02b      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800318e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003192:	d820      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003198:	d012      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800319a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319e:	d81a      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d022      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a8:	d115      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ae:	3308      	adds	r3, #8
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fdee 	bl	8003d94 <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031be:	e015      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c4:	3328      	adds	r3, #40	; 0x28
 80031c6:	2102      	movs	r1, #2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fe95 	bl	8003ef8 <RCCEx_PLL3_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031d4:	e00a      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031dc:	e006      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031de:	bf00      	nop
 80031e0:	e004      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031f4:	4ba1      	ldr	r3, [pc, #644]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80031fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003200:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003204:	4a9d      	ldr	r2, [pc, #628]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003206:	430b      	orrs	r3, r1
 8003208:	6593      	str	r3, [r2, #88]	; 0x58
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003210:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f002 0308 	and.w	r3, r2, #8
 8003220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800322a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d01e      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d10c      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003246:	3328      	adds	r3, #40	; 0x28
 8003248:	2102      	movs	r1, #2
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fe54 	bl	8003ef8 <RCCEx_PLL3_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800325c:	4b87      	ldr	r3, [pc, #540]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326c:	4a83      	ldr	r2, [pc, #524]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800326e:	430b      	orrs	r3, r1
 8003270:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f002 0310 	and.w	r3, r2, #16
 800327e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003288:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800328c:	460b      	mov	r3, r1
 800328e:	4313      	orrs	r3, r2
 8003290:	d01e      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003296:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	d10c      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a4:	3328      	adds	r3, #40	; 0x28
 80032a6:	2102      	movs	r1, #2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fe25 	bl	8003ef8 <RCCEx_PLL3_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032ba:	4b70      	ldr	r3, [pc, #448]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032ca:	4a6c      	ldr	r2, [pc, #432]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80032dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80032ea:	460b      	mov	r3, r1
 80032ec:	4313      	orrs	r3, r2
 80032ee:	d03e      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80032f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032fc:	d022      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80032fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003302:	d81b      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d00b      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800330e:	e015      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003314:	3308      	adds	r3, #8
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fd3b 	bl	8003d94 <RCCEx_PLL2_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003324:	e00f      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332a:	3328      	adds	r3, #40	; 0x28
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fde2 	bl	8003ef8 <RCCEx_PLL3_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800333a:	e004      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800334e:	4b4b      	ldr	r3, [pc, #300]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800335e:	4a47      	ldr	r2, [pc, #284]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003360:	430b      	orrs	r3, r1
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
 8003364:	e003      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003366:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800336a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800336e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800337a:	67bb      	str	r3, [r7, #120]	; 0x78
 800337c:	2300      	movs	r3, #0
 800337e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003380:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003384:	460b      	mov	r3, r1
 8003386:	4313      	orrs	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800338a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003396:	d01f      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800339c:	d818      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	d003      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80033a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a8:	d007      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80033aa:	e011      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ac:	4b33      	ldr	r3, [pc, #204]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	4a32      	ldr	r2, [pc, #200]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80033b8:	e00f      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033be:	3328      	adds	r3, #40	; 0x28
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd98 	bl	8003ef8 <RCCEx_PLL3_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80033ce:	e004      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033d6:	e000      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80033d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6553      	str	r3, [r2, #84]	; 0x54
 80033f8:	e003      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800340e:	673b      	str	r3, [r7, #112]	; 0x70
 8003410:	2300      	movs	r3, #0
 8003412:	677b      	str	r3, [r7, #116]	; 0x74
 8003414:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003418:	460b      	mov	r3, r1
 800341a:	4313      	orrs	r3, r2
 800341c:	d034      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800341e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d007      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800342e:	e011      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	4a11      	ldr	r2, [pc, #68]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800343c:	e00e      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800343e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003442:	3308      	adds	r3, #8
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fca4 	bl	8003d94 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003452:	e003      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800345a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10d      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800346c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	4a02      	ldr	r2, [pc, #8]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003474:	430b      	orrs	r3, r1
 8003476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800347a:	bf00      	nop
 800347c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003484:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003494:	66bb      	str	r3, [r7, #104]	; 0x68
 8003496:	2300      	movs	r3, #0
 8003498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800349a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800349e:	460b      	mov	r3, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	d00c      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a8:	3328      	adds	r3, #40	; 0x28
 80034aa:	2102      	movs	r1, #2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fd23 	bl	8003ef8 <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80034ca:	663b      	str	r3, [r7, #96]	; 0x60
 80034cc:	2300      	movs	r3, #0
 80034ce:	667b      	str	r3, [r7, #100]	; 0x64
 80034d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80034d4:	460b      	mov	r3, r1
 80034d6:	4313      	orrs	r3, r2
 80034d8:	d038      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80034da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e6:	d018      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80034e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ec:	d811      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d014      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d80b      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d011      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d106      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003504:	4bc3      	ldr	r3, [pc, #780]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	4ac2      	ldr	r2, [pc, #776]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800350a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003510:	e008      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003518:	e004      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003524:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800352c:	4bb9      	ldr	r3, [pc, #740]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	4ab5      	ldr	r2, [pc, #724]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800353e:	430b      	orrs	r3, r1
 8003540:	6553      	str	r3, [r2, #84]	; 0x54
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003548:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003558:	65bb      	str	r3, [r7, #88]	; 0x58
 800355a:	2300      	movs	r3, #0
 800355c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800355e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003568:	4baa      	ldr	r3, [pc, #680]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003576:	4aa7      	ldr	r2, [pc, #668]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800357c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003588:	653b      	str	r3, [r7, #80]	; 0x50
 800358a:	2300      	movs	r3, #0
 800358c:	657b      	str	r3, [r7, #84]	; 0x54
 800358e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003598:	4b9e      	ldr	r3, [pc, #632]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80035a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a9b      	ldr	r2, [pc, #620]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80035ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ba:	2300      	movs	r3, #0
 80035bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80035c8:	4b92      	ldr	r3, [pc, #584]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80035d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	4a8f      	ldr	r2, [pc, #572]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035d8:	430b      	orrs	r3, r1
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80035e8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ea:	2300      	movs	r3, #0
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035f8:	4b86      	ldr	r3, [pc, #536]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4a85      	ldr	r2, [pc, #532]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003602:	6113      	str	r3, [r2, #16]
 8003604:	4b83      	ldr	r3, [pc, #524]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003606:	6919      	ldr	r1, [r3, #16]
 8003608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003610:	4a80      	ldr	r2, [pc, #512]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003612:	430b      	orrs	r3, r1
 8003614:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
 8003624:	2300      	movs	r3, #0
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003628:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003632:	4b78      	ldr	r3, [pc, #480]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	4a74      	ldr	r2, [pc, #464]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003642:	430b      	orrs	r3, r1
 8003644:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
 8003654:	2300      	movs	r3, #0
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
 8003658:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800365c:	460b      	mov	r3, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003662:	4b6c      	ldr	r3, [pc, #432]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800366a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	4a68      	ldr	r2, [pc, #416]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003674:	430b      	orrs	r3, r1
 8003676:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	2100      	movs	r1, #0
 8003682:	62b9      	str	r1, [r7, #40]	; 0x28
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800368e:	460b      	mov	r3, r1
 8003690:	4313      	orrs	r3, r2
 8003692:	d011      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003698:	3308      	adds	r3, #8
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fb79 	bl	8003d94 <RCCEx_PLL2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80036b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	2100      	movs	r1, #0
 80036c2:	6239      	str	r1, [r7, #32]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036ce:	460b      	mov	r3, r1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	d011      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d8:	3308      	adds	r3, #8
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fb59 	bl	8003d94 <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80036f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	2100      	movs	r1, #0
 8003702:	61b9      	str	r1, [r7, #24]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d011      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003718:	3308      	adds	r3, #8
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fb39 	bl	8003d94 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003728:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003734:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	2100      	movs	r1, #0
 8003742:	6139      	str	r1, [r7, #16]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d011      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003758:	3328      	adds	r3, #40	; 0x28
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fbcb 	bl	8003ef8 <RCCEx_PLL3_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003768:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003774:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	2100      	movs	r1, #0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d011      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003798:	3328      	adds	r3, #40	; 0x28
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fbab 	bl	8003ef8 <RCCEx_PLL3_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	2100      	movs	r1, #0
 80037c2:	6039      	str	r1, [r7, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d011      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d8:	3328      	adds	r3, #40	; 0x28
 80037da:	2102      	movs	r1, #2
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fb8b 	bl	8003ef8 <RCCEx_PLL3_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80037f8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
}
 8003806:	4618      	mov	r0, r3
 8003808:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003812:	bf00      	nop
 8003814:	58024400 	.word	0x58024400

08003818 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800381c:	f7fe fde2 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	58024400 	.word	0x58024400
 8003840:	080058a0 	.word	0x080058a0

08003844 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800384c:	4ba1      	ldr	r3, [pc, #644]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003856:	4b9f      	ldr	r3, [pc, #636]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	0b1b      	lsrs	r3, r3, #12
 800385c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003860:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003862:	4b9c      	ldr	r3, [pc, #624]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800386e:	4b99      	ldr	r3, [pc, #612]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	08db      	lsrs	r3, r3, #3
 8003874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8111 	beq.w	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b02      	cmp	r3, #2
 8003896:	f000 8083 	beq.w	80039a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b02      	cmp	r3, #2
 800389e:	f200 80a1 	bhi.w	80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d056      	beq.n	800395c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038ae:	e099      	b.n	80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b0:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02d      	beq.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038bc:	4b85      	ldr	r3, [pc, #532]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	08db      	lsrs	r3, r3, #3
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	4a84      	ldr	r2, [pc, #528]	; (8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e6:	4b7b      	ldr	r3, [pc, #492]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003916:	e087      	b.n	8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393a:	ed97 6a03 	vldr	s12, [r7, #12]
 800393e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800395a:	e065      	b.n	8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003982:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800399e:	e043      	b.n	8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039e2:	e021      	b.n	8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	0a5b      	lsrs	r3, r3, #9
 8003a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4e:	ee17 2a90 	vmov	r2, s15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003a56:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7c:	ee17 2a90 	vmov	r2, s15
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	0e1b      	lsrs	r3, r3, #24
 8003a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aaa:	ee17 2a90 	vmov	r2, s15
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
}
 8003ac6:	bf00      	nop
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	03d09000 	.word	0x03d09000
 8003adc:	46000000 	.word	0x46000000
 8003ae0:	4c742400 	.word	0x4c742400
 8003ae4:	4a742400 	.word	0x4a742400
 8003ae8:	4af42400 	.word	0x4af42400

08003aec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003af4:	4ba1      	ldr	r3, [pc, #644]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003afe:	4b9f      	ldr	r3, [pc, #636]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	0d1b      	lsrs	r3, r3, #20
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b0a:	4b9c      	ldr	r3, [pc, #624]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b16:	4b99      	ldr	r3, [pc, #612]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8111 	beq.w	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f000 8083 	beq.w	8003c48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f200 80a1 	bhi.w	8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d056      	beq.n	8003c04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b56:	e099      	b.n	8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b58:	4b88      	ldr	r3, [pc, #544]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d02d      	beq.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b64:	4b85      	ldr	r3, [pc, #532]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	4a84      	ldr	r2, [pc, #528]	; (8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b7b      	ldr	r3, [pc, #492]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bbe:	e087      	b.n	8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c02:	e065      	b.n	8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c16:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c46:	e043      	b.n	8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c8a:	e021      	b.n	8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	0a5b      	lsrs	r3, r3, #9
 8003cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf6:	ee17 2a90 	vmov	r2, s15
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	0c1b      	lsrs	r3, r3, #16
 8003d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d24:	ee17 2a90 	vmov	r2, s15
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	0e1b      	lsrs	r3, r3, #24
 8003d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d52:	ee17 2a90 	vmov	r2, s15
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d5a:	e008      	b.n	8003d6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
}
 8003d6e:	bf00      	nop
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	03d09000 	.word	0x03d09000
 8003d84:	46000000 	.word	0x46000000
 8003d88:	4c742400 	.word	0x4c742400
 8003d8c:	4a742400 	.word	0x4a742400
 8003d90:	4af42400 	.word	0x4af42400

08003d94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003da2:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d101      	bne.n	8003db2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e099      	b.n	8003ee6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003db2:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4e      	ldr	r2, [pc, #312]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fd f891 	bl	8000ee4 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dc6:	f7fd f88d 	bl	8000ee4 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e086      	b.n	8003ee6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	493f      	ldr	r1, [pc, #252]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	628b      	str	r3, [r1, #40]	; 0x28
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	025b      	lsls	r3, r3, #9
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e28:	4931      	ldr	r1, [pc, #196]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e2e:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	492d      	ldr	r1, [pc, #180]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e40:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	f023 0220 	bic.w	r2, r3, #32
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4928      	ldr	r1, [pc, #160]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e52:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e58:	f023 0310 	bic.w	r3, r3, #16
 8003e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <RCCEx_PLL2_Config+0x160>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	69d2      	ldr	r2, [r2, #28]
 8003e6a:	00d2      	lsls	r2, r2, #3
 8003e6c:	4920      	ldr	r1, [pc, #128]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e72:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	f043 0310 	orr.w	r3, r3, #16
 8003e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e84:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e90:	e00f      	b.n	8003eb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ea4:	e005      	b.n	8003eb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fd f811 	bl	8000ee4 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ec4:	e008      	b.n	8003ed8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ec6:	f7fd f80d 	bl	8000ee4 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e006      	b.n	8003ee6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <RCCEx_PLL2_Config+0x15c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	ffff0007 	.word	0xffff0007

08003ef8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f06:	4b53      	ldr	r3, [pc, #332]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d101      	bne.n	8003f16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e099      	b.n	800404a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f16:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4e      	ldr	r2, [pc, #312]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f22:	f7fc ffdf 	bl	8000ee4 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f28:	e008      	b.n	8003f3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f2a:	f7fc ffdb 	bl	8000ee4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e086      	b.n	800404a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f3c:	4b45      	ldr	r3, [pc, #276]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f0      	bne.n	8003f2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f48:	4b42      	ldr	r3, [pc, #264]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	051b      	lsls	r3, r3, #20
 8003f56:	493f      	ldr	r1, [pc, #252]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	025b      	lsls	r3, r3, #9
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f8c:	4931      	ldr	r1, [pc, #196]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f92:	4b30      	ldr	r3, [pc, #192]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	492d      	ldr	r1, [pc, #180]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	4928      	ldr	r1, [pc, #160]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	4a26      	ldr	r2, [pc, #152]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <RCCEx_PLL3_Config+0x160>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	69d2      	ldr	r2, [r2, #28]
 8003fce:	00d2      	lsls	r2, r2, #3
 8003fd0:	4920      	ldr	r1, [pc, #128]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003fee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ff4:	e00f      	b.n	8004016 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d106      	bne.n	800400a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ffc:	4b15      	ldr	r3, [pc, #84]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8004002:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004008:	e005      	b.n	8004016 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	4a11      	ldr	r2, [pc, #68]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8004010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004014:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004022:	f7fc ff5f 	bl	8000ee4 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004028:	e008      	b.n	800403c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800402a:	f7fc ff5b 	bl	8000ee4 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e006      	b.n	800404a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <RCCEx_PLL3_Config+0x15c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	58024400 	.word	0x58024400
 8004058:	ffff0007 	.word	0xffff0007

0800405c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e04a      	b.n	8004104 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fc fd5d 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2224      	movs	r2, #36	; 0x24
 800408a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8c2 	bl	8004228 <UART_SetConfig>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e02a      	b.n	8004104 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 ff22 	bl	8004f00 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80040da:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0208 	orr.w	r2, r2, #8
 80040ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 ffa1 	bl	8005044 <UART_CheckIdleState>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	2b20      	cmp	r3, #32
 8004124:	d17b      	bne.n	800421e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_UART_Transmit+0x26>
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e074      	b.n	8004220 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2221      	movs	r2, #33	; 0x21
 8004142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004146:	f7fc fecd 	bl	8000ee4 <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d108      	bne.n	8004178 <HAL_UART_Transmit+0x6c>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e003      	b.n	8004180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004180:	e030      	b.n	80041e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f001 f803 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e03d      	b.n	8004220 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	3302      	adds	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e007      	b.n	80041d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1c8      	bne.n	8004182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	2140      	movs	r1, #64	; 0x40
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 ffcc 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e006      	b.n	8004220 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b092      	sub	sp, #72	; 0x48
 800422e:	af00      	add	r7, sp, #0
 8004230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	431a      	orrs	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	431a      	orrs	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	4313      	orrs	r3, r2
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4bbe      	ldr	r3, [pc, #760]	; (8004550 <UART_SetConfig+0x328>)
 8004258:	4013      	ands	r3, r2
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004260:	430b      	orrs	r3, r1
 8004262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4ab3      	ldr	r2, [pc, #716]	; (8004554 <UART_SetConfig+0x32c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004290:	4313      	orrs	r3, r2
 8004292:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	4baf      	ldr	r3, [pc, #700]	; (8004558 <UART_SetConfig+0x330>)
 800429c:	4013      	ands	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	f023 010f 	bic.w	r1, r3, #15
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4aa6      	ldr	r2, [pc, #664]	; (800455c <UART_SetConfig+0x334>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d177      	bne.n	80043b8 <UART_SetConfig+0x190>
 80042c8:	4ba5      	ldr	r3, [pc, #660]	; (8004560 <UART_SetConfig+0x338>)
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d0:	2b28      	cmp	r3, #40	; 0x28
 80042d2:	d86d      	bhi.n	80043b0 <UART_SetConfig+0x188>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0xb4>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004381 	.word	0x08004381
 80042e0:	080043b1 	.word	0x080043b1
 80042e4:	080043b1 	.word	0x080043b1
 80042e8:	080043b1 	.word	0x080043b1
 80042ec:	080043b1 	.word	0x080043b1
 80042f0:	080043b1 	.word	0x080043b1
 80042f4:	080043b1 	.word	0x080043b1
 80042f8:	080043b1 	.word	0x080043b1
 80042fc:	08004389 	.word	0x08004389
 8004300:	080043b1 	.word	0x080043b1
 8004304:	080043b1 	.word	0x080043b1
 8004308:	080043b1 	.word	0x080043b1
 800430c:	080043b1 	.word	0x080043b1
 8004310:	080043b1 	.word	0x080043b1
 8004314:	080043b1 	.word	0x080043b1
 8004318:	080043b1 	.word	0x080043b1
 800431c:	08004391 	.word	0x08004391
 8004320:	080043b1 	.word	0x080043b1
 8004324:	080043b1 	.word	0x080043b1
 8004328:	080043b1 	.word	0x080043b1
 800432c:	080043b1 	.word	0x080043b1
 8004330:	080043b1 	.word	0x080043b1
 8004334:	080043b1 	.word	0x080043b1
 8004338:	080043b1 	.word	0x080043b1
 800433c:	08004399 	.word	0x08004399
 8004340:	080043b1 	.word	0x080043b1
 8004344:	080043b1 	.word	0x080043b1
 8004348:	080043b1 	.word	0x080043b1
 800434c:	080043b1 	.word	0x080043b1
 8004350:	080043b1 	.word	0x080043b1
 8004354:	080043b1 	.word	0x080043b1
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043a1 	.word	0x080043a1
 8004360:	080043b1 	.word	0x080043b1
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043b1 	.word	0x080043b1
 800436c:	080043b1 	.word	0x080043b1
 8004370:	080043b1 	.word	0x080043b1
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043a9 	.word	0x080043a9
 8004380:	2301      	movs	r3, #1
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004386:	e326      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800438e:	e322      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004396:	e31e      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800439e:	e31a      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80043a0:	2320      	movs	r3, #32
 80043a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043a6:	e316      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80043a8:	2340      	movs	r3, #64	; 0x40
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ae:	e312      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b6:	e30e      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a69      	ldr	r2, [pc, #420]	; (8004564 <UART_SetConfig+0x33c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d130      	bne.n	8004424 <UART_SetConfig+0x1fc>
 80043c2:	4b67      	ldr	r3, [pc, #412]	; (8004560 <UART_SetConfig+0x338>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d826      	bhi.n	800441c <UART_SetConfig+0x1f4>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0x1ac>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	080043ed 	.word	0x080043ed
 80043d8:	080043f5 	.word	0x080043f5
 80043dc:	080043fd 	.word	0x080043fd
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f2:	e2f0      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80043f4:	2304      	movs	r3, #4
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fa:	e2ec      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80043fc:	2308      	movs	r3, #8
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004402:	e2e8      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440a:	e2e4      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800440c:	2320      	movs	r3, #32
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004412:	e2e0      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004414:	2340      	movs	r3, #64	; 0x40
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441a:	e2dc      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e2d8      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a4f      	ldr	r2, [pc, #316]	; (8004568 <UART_SetConfig+0x340>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d130      	bne.n	8004490 <UART_SetConfig+0x268>
 800442e:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <UART_SetConfig+0x338>)
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b05      	cmp	r3, #5
 8004438:	d826      	bhi.n	8004488 <UART_SetConfig+0x260>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x218>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004459 	.word	0x08004459
 8004444:	08004461 	.word	0x08004461
 8004448:	08004469 	.word	0x08004469
 800444c:	08004471 	.word	0x08004471
 8004450:	08004479 	.word	0x08004479
 8004454:	08004481 	.word	0x08004481
 8004458:	2300      	movs	r3, #0
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445e:	e2ba      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004460:	2304      	movs	r3, #4
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004466:	e2b6      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004468:	2308      	movs	r3, #8
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446e:	e2b2      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004470:	2310      	movs	r3, #16
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004476:	e2ae      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004478:	2320      	movs	r3, #32
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447e:	e2aa      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004480:	2340      	movs	r3, #64	; 0x40
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e2a6      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e2a2      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	; (800456c <UART_SetConfig+0x344>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d130      	bne.n	80044fc <UART_SetConfig+0x2d4>
 800449a:	4b31      	ldr	r3, [pc, #196]	; (8004560 <UART_SetConfig+0x338>)
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d826      	bhi.n	80044f4 <UART_SetConfig+0x2cc>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x284>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044c5 	.word	0x080044c5
 80044b0:	080044cd 	.word	0x080044cd
 80044b4:	080044d5 	.word	0x080044d5
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044ed 	.word	0x080044ed
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ca:	e284      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80044cc:	2304      	movs	r3, #4
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d2:	e280      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80044d4:	2308      	movs	r3, #8
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044da:	e27c      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80044dc:	2310      	movs	r3, #16
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e2:	e278      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80044e4:	2320      	movs	r3, #32
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ea:	e274      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80044ec:	2340      	movs	r3, #64	; 0x40
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e270      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e26c      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <UART_SetConfig+0x348>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d142      	bne.n	800458c <UART_SetConfig+0x364>
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <UART_SetConfig+0x338>)
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	2b05      	cmp	r3, #5
 8004510:	d838      	bhi.n	8004584 <UART_SetConfig+0x35c>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x2f0>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	08004531 	.word	0x08004531
 800451c:	08004539 	.word	0x08004539
 8004520:	08004541 	.word	0x08004541
 8004524:	08004549 	.word	0x08004549
 8004528:	08004575 	.word	0x08004575
 800452c:	0800457d 	.word	0x0800457d
 8004530:	2300      	movs	r3, #0
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004536:	e24e      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453e:	e24a      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004546:	e246      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454e:	e242      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004550:	cfff69f3 	.word	0xcfff69f3
 8004554:	58000c00 	.word	0x58000c00
 8004558:	11fff4ff 	.word	0x11fff4ff
 800455c:	40011000 	.word	0x40011000
 8004560:	58024400 	.word	0x58024400
 8004564:	40004400 	.word	0x40004400
 8004568:	40004800 	.word	0x40004800
 800456c:	40004c00 	.word	0x40004c00
 8004570:	40005000 	.word	0x40005000
 8004574:	2320      	movs	r3, #32
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800457a:	e22c      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800457c:	2340      	movs	r3, #64	; 0x40
 800457e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004582:	e228      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458a:	e224      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4ab1      	ldr	r2, [pc, #708]	; (8004858 <UART_SetConfig+0x630>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d176      	bne.n	8004684 <UART_SetConfig+0x45c>
 8004596:	4bb1      	ldr	r3, [pc, #708]	; (800485c <UART_SetConfig+0x634>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800459e:	2b28      	cmp	r3, #40	; 0x28
 80045a0:	d86c      	bhi.n	800467c <UART_SetConfig+0x454>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x380>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	0800464d 	.word	0x0800464d
 80045ac:	0800467d 	.word	0x0800467d
 80045b0:	0800467d 	.word	0x0800467d
 80045b4:	0800467d 	.word	0x0800467d
 80045b8:	0800467d 	.word	0x0800467d
 80045bc:	0800467d 	.word	0x0800467d
 80045c0:	0800467d 	.word	0x0800467d
 80045c4:	0800467d 	.word	0x0800467d
 80045c8:	08004655 	.word	0x08004655
 80045cc:	0800467d 	.word	0x0800467d
 80045d0:	0800467d 	.word	0x0800467d
 80045d4:	0800467d 	.word	0x0800467d
 80045d8:	0800467d 	.word	0x0800467d
 80045dc:	0800467d 	.word	0x0800467d
 80045e0:	0800467d 	.word	0x0800467d
 80045e4:	0800467d 	.word	0x0800467d
 80045e8:	0800465d 	.word	0x0800465d
 80045ec:	0800467d 	.word	0x0800467d
 80045f0:	0800467d 	.word	0x0800467d
 80045f4:	0800467d 	.word	0x0800467d
 80045f8:	0800467d 	.word	0x0800467d
 80045fc:	0800467d 	.word	0x0800467d
 8004600:	0800467d 	.word	0x0800467d
 8004604:	0800467d 	.word	0x0800467d
 8004608:	08004665 	.word	0x08004665
 800460c:	0800467d 	.word	0x0800467d
 8004610:	0800467d 	.word	0x0800467d
 8004614:	0800467d 	.word	0x0800467d
 8004618:	0800467d 	.word	0x0800467d
 800461c:	0800467d 	.word	0x0800467d
 8004620:	0800467d 	.word	0x0800467d
 8004624:	0800467d 	.word	0x0800467d
 8004628:	0800466d 	.word	0x0800466d
 800462c:	0800467d 	.word	0x0800467d
 8004630:	0800467d 	.word	0x0800467d
 8004634:	0800467d 	.word	0x0800467d
 8004638:	0800467d 	.word	0x0800467d
 800463c:	0800467d 	.word	0x0800467d
 8004640:	0800467d 	.word	0x0800467d
 8004644:	0800467d 	.word	0x0800467d
 8004648:	08004675 	.word	0x08004675
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004652:	e1c0      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800465a:	e1bc      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004662:	e1b8      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466a:	e1b4      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800466c:	2320      	movs	r3, #32
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004672:	e1b0      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004674:	2340      	movs	r3, #64	; 0x40
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800467a:	e1ac      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004682:	e1a8      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a75      	ldr	r2, [pc, #468]	; (8004860 <UART_SetConfig+0x638>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d130      	bne.n	80046f0 <UART_SetConfig+0x4c8>
 800468e:	4b73      	ldr	r3, [pc, #460]	; (800485c <UART_SetConfig+0x634>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b05      	cmp	r3, #5
 8004698:	d826      	bhi.n	80046e8 <UART_SetConfig+0x4c0>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x478>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046c1 	.word	0x080046c1
 80046a8:	080046c9 	.word	0x080046c9
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046e1 	.word	0x080046e1
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046be:	e18a      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80046c0:	2304      	movs	r3, #4
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c6:	e186      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80046c8:	2308      	movs	r3, #8
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ce:	e182      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d6:	e17e      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80046d8:	2320      	movs	r3, #32
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046de:	e17a      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	e176      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e172      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a5b      	ldr	r2, [pc, #364]	; (8004864 <UART_SetConfig+0x63c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d130      	bne.n	800475c <UART_SetConfig+0x534>
 80046fa:	4b58      	ldr	r3, [pc, #352]	; (800485c <UART_SetConfig+0x634>)
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	2b05      	cmp	r3, #5
 8004704:	d826      	bhi.n	8004754 <UART_SetConfig+0x52c>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x4e4>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004725 	.word	0x08004725
 8004710:	0800472d 	.word	0x0800472d
 8004714:	08004735 	.word	0x08004735
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004745 	.word	0x08004745
 8004720:	0800474d 	.word	0x0800474d
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472a:	e154      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004732:	e150      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473a:	e14c      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004742:	e148      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004744:	2320      	movs	r3, #32
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474a:	e144      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800474c:	2340      	movs	r3, #64	; 0x40
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e140      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e13c      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a41      	ldr	r2, [pc, #260]	; (8004868 <UART_SetConfig+0x640>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f040 8082 	bne.w	800486c <UART_SetConfig+0x644>
 8004768:	4b3c      	ldr	r3, [pc, #240]	; (800485c <UART_SetConfig+0x634>)
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004770:	2b28      	cmp	r3, #40	; 0x28
 8004772:	d86d      	bhi.n	8004850 <UART_SetConfig+0x628>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0x554>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	08004821 	.word	0x08004821
 8004780:	08004851 	.word	0x08004851
 8004784:	08004851 	.word	0x08004851
 8004788:	08004851 	.word	0x08004851
 800478c:	08004851 	.word	0x08004851
 8004790:	08004851 	.word	0x08004851
 8004794:	08004851 	.word	0x08004851
 8004798:	08004851 	.word	0x08004851
 800479c:	08004829 	.word	0x08004829
 80047a0:	08004851 	.word	0x08004851
 80047a4:	08004851 	.word	0x08004851
 80047a8:	08004851 	.word	0x08004851
 80047ac:	08004851 	.word	0x08004851
 80047b0:	08004851 	.word	0x08004851
 80047b4:	08004851 	.word	0x08004851
 80047b8:	08004851 	.word	0x08004851
 80047bc:	08004831 	.word	0x08004831
 80047c0:	08004851 	.word	0x08004851
 80047c4:	08004851 	.word	0x08004851
 80047c8:	08004851 	.word	0x08004851
 80047cc:	08004851 	.word	0x08004851
 80047d0:	08004851 	.word	0x08004851
 80047d4:	08004851 	.word	0x08004851
 80047d8:	08004851 	.word	0x08004851
 80047dc:	08004839 	.word	0x08004839
 80047e0:	08004851 	.word	0x08004851
 80047e4:	08004851 	.word	0x08004851
 80047e8:	08004851 	.word	0x08004851
 80047ec:	08004851 	.word	0x08004851
 80047f0:	08004851 	.word	0x08004851
 80047f4:	08004851 	.word	0x08004851
 80047f8:	08004851 	.word	0x08004851
 80047fc:	08004841 	.word	0x08004841
 8004800:	08004851 	.word	0x08004851
 8004804:	08004851 	.word	0x08004851
 8004808:	08004851 	.word	0x08004851
 800480c:	08004851 	.word	0x08004851
 8004810:	08004851 	.word	0x08004851
 8004814:	08004851 	.word	0x08004851
 8004818:	08004851 	.word	0x08004851
 800481c:	08004849 	.word	0x08004849
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004826:	e0d6      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004828:	2304      	movs	r3, #4
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482e:	e0d2      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004830:	2308      	movs	r3, #8
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004836:	e0ce      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004838:	2310      	movs	r3, #16
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483e:	e0ca      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004840:	2320      	movs	r3, #32
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004846:	e0c6      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004848:	2340      	movs	r3, #64	; 0x40
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484e:	e0c2      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004856:	e0be      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004858:	40011400 	.word	0x40011400
 800485c:	58024400 	.word	0x58024400
 8004860:	40007800 	.word	0x40007800
 8004864:	40007c00 	.word	0x40007c00
 8004868:	40011800 	.word	0x40011800
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4aad      	ldr	r2, [pc, #692]	; (8004b28 <UART_SetConfig+0x900>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d176      	bne.n	8004964 <UART_SetConfig+0x73c>
 8004876:	4bad      	ldr	r3, [pc, #692]	; (8004b2c <UART_SetConfig+0x904>)
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800487e:	2b28      	cmp	r3, #40	; 0x28
 8004880:	d86c      	bhi.n	800495c <UART_SetConfig+0x734>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x660>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	0800492d 	.word	0x0800492d
 800488c:	0800495d 	.word	0x0800495d
 8004890:	0800495d 	.word	0x0800495d
 8004894:	0800495d 	.word	0x0800495d
 8004898:	0800495d 	.word	0x0800495d
 800489c:	0800495d 	.word	0x0800495d
 80048a0:	0800495d 	.word	0x0800495d
 80048a4:	0800495d 	.word	0x0800495d
 80048a8:	08004935 	.word	0x08004935
 80048ac:	0800495d 	.word	0x0800495d
 80048b0:	0800495d 	.word	0x0800495d
 80048b4:	0800495d 	.word	0x0800495d
 80048b8:	0800495d 	.word	0x0800495d
 80048bc:	0800495d 	.word	0x0800495d
 80048c0:	0800495d 	.word	0x0800495d
 80048c4:	0800495d 	.word	0x0800495d
 80048c8:	0800493d 	.word	0x0800493d
 80048cc:	0800495d 	.word	0x0800495d
 80048d0:	0800495d 	.word	0x0800495d
 80048d4:	0800495d 	.word	0x0800495d
 80048d8:	0800495d 	.word	0x0800495d
 80048dc:	0800495d 	.word	0x0800495d
 80048e0:	0800495d 	.word	0x0800495d
 80048e4:	0800495d 	.word	0x0800495d
 80048e8:	08004945 	.word	0x08004945
 80048ec:	0800495d 	.word	0x0800495d
 80048f0:	0800495d 	.word	0x0800495d
 80048f4:	0800495d 	.word	0x0800495d
 80048f8:	0800495d 	.word	0x0800495d
 80048fc:	0800495d 	.word	0x0800495d
 8004900:	0800495d 	.word	0x0800495d
 8004904:	0800495d 	.word	0x0800495d
 8004908:	0800494d 	.word	0x0800494d
 800490c:	0800495d 	.word	0x0800495d
 8004910:	0800495d 	.word	0x0800495d
 8004914:	0800495d 	.word	0x0800495d
 8004918:	0800495d 	.word	0x0800495d
 800491c:	0800495d 	.word	0x0800495d
 8004920:	0800495d 	.word	0x0800495d
 8004924:	0800495d 	.word	0x0800495d
 8004928:	08004955 	.word	0x08004955
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004932:	e050      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004934:	2304      	movs	r3, #4
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493a:	e04c      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800493c:	2308      	movs	r3, #8
 800493e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004942:	e048      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004944:	2310      	movs	r3, #16
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494a:	e044      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800494c:	2320      	movs	r3, #32
 800494e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004952:	e040      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004954:	2340      	movs	r3, #64	; 0x40
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495a:	e03c      	b.n	80049d6 <UART_SetConfig+0x7ae>
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004962:	e038      	b.n	80049d6 <UART_SetConfig+0x7ae>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a71      	ldr	r2, [pc, #452]	; (8004b30 <UART_SetConfig+0x908>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d130      	bne.n	80049d0 <UART_SetConfig+0x7a8>
 800496e:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <UART_SetConfig+0x904>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b05      	cmp	r3, #5
 8004978:	d826      	bhi.n	80049c8 <UART_SetConfig+0x7a0>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <UART_SetConfig+0x758>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	08004999 	.word	0x08004999
 8004984:	080049a1 	.word	0x080049a1
 8004988:	080049a9 	.word	0x080049a9
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	2302      	movs	r3, #2
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499e:	e01a      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a6:	e016      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ae:	e012      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b6:	e00e      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80049b8:	2320      	movs	r3, #32
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049be:	e00a      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80049c0:	2340      	movs	r3, #64	; 0x40
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c6:	e006      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ce:	e002      	b.n	80049d6 <UART_SetConfig+0x7ae>
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a55      	ldr	r2, [pc, #340]	; (8004b30 <UART_SetConfig+0x908>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	f040 80f8 	bne.w	8004bd2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	dc46      	bgt.n	8004a78 <UART_SetConfig+0x850>
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	db75      	blt.n	8004ada <UART_SetConfig+0x8b2>
 80049ee:	3b02      	subs	r3, #2
 80049f0:	2b1e      	cmp	r3, #30
 80049f2:	d872      	bhi.n	8004ada <UART_SetConfig+0x8b2>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x7d4>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a7f 	.word	0x08004a7f
 8004a00:	08004adb 	.word	0x08004adb
 8004a04:	08004a87 	.word	0x08004a87
 8004a08:	08004adb 	.word	0x08004adb
 8004a0c:	08004adb 	.word	0x08004adb
 8004a10:	08004adb 	.word	0x08004adb
 8004a14:	08004a97 	.word	0x08004a97
 8004a18:	08004adb 	.word	0x08004adb
 8004a1c:	08004adb 	.word	0x08004adb
 8004a20:	08004adb 	.word	0x08004adb
 8004a24:	08004adb 	.word	0x08004adb
 8004a28:	08004adb 	.word	0x08004adb
 8004a2c:	08004adb 	.word	0x08004adb
 8004a30:	08004adb 	.word	0x08004adb
 8004a34:	08004aa7 	.word	0x08004aa7
 8004a38:	08004adb 	.word	0x08004adb
 8004a3c:	08004adb 	.word	0x08004adb
 8004a40:	08004adb 	.word	0x08004adb
 8004a44:	08004adb 	.word	0x08004adb
 8004a48:	08004adb 	.word	0x08004adb
 8004a4c:	08004adb 	.word	0x08004adb
 8004a50:	08004adb 	.word	0x08004adb
 8004a54:	08004adb 	.word	0x08004adb
 8004a58:	08004adb 	.word	0x08004adb
 8004a5c:	08004adb 	.word	0x08004adb
 8004a60:	08004adb 	.word	0x08004adb
 8004a64:	08004adb 	.word	0x08004adb
 8004a68:	08004adb 	.word	0x08004adb
 8004a6c:	08004adb 	.word	0x08004adb
 8004a70:	08004adb 	.word	0x08004adb
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d02a      	beq.n	8004ad2 <UART_SetConfig+0x8aa>
 8004a7c:	e02d      	b.n	8004ada <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a7e:	f7fe fecb 	bl	8003818 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a84:	e02f      	b.n	8004ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe feda 	bl	8003844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a94:	e027      	b.n	8004ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a96:	f107 0318 	add.w	r3, r7, #24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f826 	bl	8003aec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa4:	e01f      	b.n	8004ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa6:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <UART_SetConfig+0x904>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <UART_SetConfig+0x904>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <UART_SetConfig+0x90c>)
 8004abe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ac4:	e00f      	b.n	8004ae6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <UART_SetConfig+0x90c>)
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aca:	e00c      	b.n	8004ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004acc:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <UART_SetConfig+0x910>)
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ad8:	e005      	b.n	8004ae6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ae4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 81ee 	beq.w	8004eca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <UART_SetConfig+0x914>)
 8004af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d305      	bcc.n	8004b1e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d910      	bls.n	8004b40 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b24:	e1d1      	b.n	8004eca <UART_SetConfig+0xca2>
 8004b26:	bf00      	nop
 8004b28:	40011c00 	.word	0x40011c00
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	58000c00 	.word	0x58000c00
 8004b34:	03d09000 	.word	0x03d09000
 8004b38:	003d0900 	.word	0x003d0900
 8004b3c:	080058b0 	.word	0x080058b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b42:	2200      	movs	r2, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	60fa      	str	r2, [r7, #12]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	4ac0      	ldr	r2, [pc, #768]	; (8004e50 <UART_SetConfig+0xc28>)
 8004b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b62:	f7fb fbc5 	bl	80002f0 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	020b      	lsls	r3, r1, #8
 8004b78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b7c:	0202      	lsls	r2, r0, #8
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	6849      	ldr	r1, [r1, #4]
 8004b82:	0849      	lsrs	r1, r1, #1
 8004b84:	2000      	movs	r0, #0
 8004b86:	460c      	mov	r4, r1
 8004b88:	4605      	mov	r5, r0
 8004b8a:	eb12 0804 	adds.w	r8, r2, r4
 8004b8e:	eb43 0905 	adc.w	r9, r3, r5
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	469a      	mov	sl, r3
 8004b9a:	4693      	mov	fp, r2
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	465b      	mov	r3, fp
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	f7fb fba4 	bl	80002f0 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bb6:	d308      	bcc.n	8004bca <UART_SetConfig+0x9a2>
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbe:	d204      	bcs.n	8004bca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e17f      	b.n	8004eca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004bd0:	e17b      	b.n	8004eca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bda:	f040 80bd 	bne.w	8004d58 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004bde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	dc48      	bgt.n	8004c78 <UART_SetConfig+0xa50>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	db7b      	blt.n	8004ce2 <UART_SetConfig+0xaba>
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d879      	bhi.n	8004ce2 <UART_SetConfig+0xaba>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <UART_SetConfig+0x9cc>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c7f 	.word	0x08004c7f
 8004bf8:	08004c87 	.word	0x08004c87
 8004bfc:	08004ce3 	.word	0x08004ce3
 8004c00:	08004ce3 	.word	0x08004ce3
 8004c04:	08004c8f 	.word	0x08004c8f
 8004c08:	08004ce3 	.word	0x08004ce3
 8004c0c:	08004ce3 	.word	0x08004ce3
 8004c10:	08004ce3 	.word	0x08004ce3
 8004c14:	08004c9f 	.word	0x08004c9f
 8004c18:	08004ce3 	.word	0x08004ce3
 8004c1c:	08004ce3 	.word	0x08004ce3
 8004c20:	08004ce3 	.word	0x08004ce3
 8004c24:	08004ce3 	.word	0x08004ce3
 8004c28:	08004ce3 	.word	0x08004ce3
 8004c2c:	08004ce3 	.word	0x08004ce3
 8004c30:	08004ce3 	.word	0x08004ce3
 8004c34:	08004caf 	.word	0x08004caf
 8004c38:	08004ce3 	.word	0x08004ce3
 8004c3c:	08004ce3 	.word	0x08004ce3
 8004c40:	08004ce3 	.word	0x08004ce3
 8004c44:	08004ce3 	.word	0x08004ce3
 8004c48:	08004ce3 	.word	0x08004ce3
 8004c4c:	08004ce3 	.word	0x08004ce3
 8004c50:	08004ce3 	.word	0x08004ce3
 8004c54:	08004ce3 	.word	0x08004ce3
 8004c58:	08004ce3 	.word	0x08004ce3
 8004c5c:	08004ce3 	.word	0x08004ce3
 8004c60:	08004ce3 	.word	0x08004ce3
 8004c64:	08004ce3 	.word	0x08004ce3
 8004c68:	08004ce3 	.word	0x08004ce3
 8004c6c:	08004ce3 	.word	0x08004ce3
 8004c70:	08004ce3 	.word	0x08004ce3
 8004c74:	08004cd5 	.word	0x08004cd5
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d02e      	beq.n	8004cda <UART_SetConfig+0xab2>
 8004c7c:	e031      	b.n	8004ce2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c7e:	f7fd fbe1 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8004c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c84:	e033      	b.n	8004cee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c86:	f7fd fbf3 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8004c8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c8c:	e02f      	b.n	8004cee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fdd6 	bl	8003844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c9c:	e027      	b.n	8004cee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c9e:	f107 0318 	add.w	r3, r7, #24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe ff22 	bl	8003aec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cac:	e01f      	b.n	8004cee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cae:	4b69      	ldr	r3, [pc, #420]	; (8004e54 <UART_SetConfig+0xc2c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004cba:	4b66      	ldr	r3, [pc, #408]	; (8004e54 <UART_SetConfig+0xc2c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	08db      	lsrs	r3, r3, #3
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	4a64      	ldr	r2, [pc, #400]	; (8004e58 <UART_SetConfig+0xc30>)
 8004cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ccc:	e00f      	b.n	8004cee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004cce:	4b62      	ldr	r3, [pc, #392]	; (8004e58 <UART_SetConfig+0xc30>)
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cd2:	e00c      	b.n	8004cee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cd4:	4b61      	ldr	r3, [pc, #388]	; (8004e5c <UART_SetConfig+0xc34>)
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cd8:	e009      	b.n	8004cee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ce0:	e005      	b.n	8004cee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80ea 	beq.w	8004eca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	4a55      	ldr	r2, [pc, #340]	; (8004e50 <UART_SetConfig+0xc28>)
 8004cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d08:	005a      	lsls	r2, r3, #1
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	441a      	add	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	d916      	bls.n	8004d50 <UART_SetConfig+0xb28>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d28:	d212      	bcs.n	8004d50 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f023 030f 	bic.w	r3, r3, #15
 8004d32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d42:	4313      	orrs	r3, r2
 8004d44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	e0bc      	b.n	8004eca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d56:	e0b8      	b.n	8004eca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	dc4b      	bgt.n	8004df8 <UART_SetConfig+0xbd0>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f2c0 8087 	blt.w	8004e74 <UART_SetConfig+0xc4c>
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	f200 8084 	bhi.w	8004e74 <UART_SetConfig+0xc4c>
 8004d6c:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0xb4c>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004dff 	.word	0x08004dff
 8004d78:	08004e07 	.word	0x08004e07
 8004d7c:	08004e75 	.word	0x08004e75
 8004d80:	08004e75 	.word	0x08004e75
 8004d84:	08004e0f 	.word	0x08004e0f
 8004d88:	08004e75 	.word	0x08004e75
 8004d8c:	08004e75 	.word	0x08004e75
 8004d90:	08004e75 	.word	0x08004e75
 8004d94:	08004e1f 	.word	0x08004e1f
 8004d98:	08004e75 	.word	0x08004e75
 8004d9c:	08004e75 	.word	0x08004e75
 8004da0:	08004e75 	.word	0x08004e75
 8004da4:	08004e75 	.word	0x08004e75
 8004da8:	08004e75 	.word	0x08004e75
 8004dac:	08004e75 	.word	0x08004e75
 8004db0:	08004e75 	.word	0x08004e75
 8004db4:	08004e2f 	.word	0x08004e2f
 8004db8:	08004e75 	.word	0x08004e75
 8004dbc:	08004e75 	.word	0x08004e75
 8004dc0:	08004e75 	.word	0x08004e75
 8004dc4:	08004e75 	.word	0x08004e75
 8004dc8:	08004e75 	.word	0x08004e75
 8004dcc:	08004e75 	.word	0x08004e75
 8004dd0:	08004e75 	.word	0x08004e75
 8004dd4:	08004e75 	.word	0x08004e75
 8004dd8:	08004e75 	.word	0x08004e75
 8004ddc:	08004e75 	.word	0x08004e75
 8004de0:	08004e75 	.word	0x08004e75
 8004de4:	08004e75 	.word	0x08004e75
 8004de8:	08004e75 	.word	0x08004e75
 8004dec:	08004e75 	.word	0x08004e75
 8004df0:	08004e75 	.word	0x08004e75
 8004df4:	08004e67 	.word	0x08004e67
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d037      	beq.n	8004e6c <UART_SetConfig+0xc44>
 8004dfc:	e03a      	b.n	8004e74 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfe:	f7fd fb21 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8004e02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e04:	e03c      	b.n	8004e80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e06:	f7fd fb33 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8004e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e0c:	e038      	b.n	8004e80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fd16 	bl	8003844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e1c:	e030      	b.n	8004e80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e1e:	f107 0318 	add.w	r3, r7, #24
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fe62 	bl	8003aec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e2c:	e028      	b.n	8004e80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <UART_SetConfig+0xc2c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d012      	beq.n	8004e60 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <UART_SetConfig+0xc2c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	08db      	lsrs	r3, r3, #3
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <UART_SetConfig+0xc30>)
 8004e46:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e4c:	e018      	b.n	8004e80 <UART_SetConfig+0xc58>
 8004e4e:	bf00      	nop
 8004e50:	080058b0 	.word	0x080058b0
 8004e54:	58024400 	.word	0x58024400
 8004e58:	03d09000 	.word	0x03d09000
 8004e5c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004e60:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <UART_SetConfig+0xccc>)
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e64:	e00c      	b.n	8004e80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <UART_SetConfig+0xcd0>)
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e6a:	e009      	b.n	8004e80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e72:	e005      	b.n	8004e80 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e7e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d021      	beq.n	8004eca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <UART_SetConfig+0xcd4>)
 8004e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	441a      	add	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2b0f      	cmp	r3, #15
 8004eae:	d909      	bls.n	8004ec4 <UART_SetConfig+0xc9c>
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb6:	d205      	bcs.n	8004ec4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	e002      	b.n	8004eca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ee6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3748      	adds	r7, #72	; 0x48
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef4:	03d09000 	.word	0x03d09000
 8004ef8:	003d0900 	.word	0x003d0900
 8004efc:	080058b0 	.word	0x080058b0

08004f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01a      	beq.n	8005016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d10a      	bne.n	8005016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b098      	sub	sp, #96	; 0x60
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005054:	f7fb ff46 	bl	8000ee4 <HAL_GetTick>
 8005058:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d12f      	bne.n	80050c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005070:	2200      	movs	r2, #0
 8005072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f88e 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d022      	beq.n	80050c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	653b      	str	r3, [r7, #80]	; 0x50
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
 80050a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e6      	bne.n	8005082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e063      	b.n	8005190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d149      	bne.n	800516a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050de:	2200      	movs	r2, #0
 80050e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f857 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d03c      	beq.n	800516a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	623b      	str	r3, [r7, #32]
   return(result);
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510e:	633b      	str	r3, [r7, #48]	; 0x30
 8005110:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e6      	bne.n	80050f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	60fb      	str	r3, [r7, #12]
   return(result);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	64bb      	str	r3, [r7, #72]	; 0x48
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3308      	adds	r3, #8
 8005140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005142:	61fa      	str	r2, [r7, #28]
 8005144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	617b      	str	r3, [r7, #20]
   return(result);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e012      	b.n	8005190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3758      	adds	r7, #88	; 0x58
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a8:	e049      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d045      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b2:	f7fb fe97 	bl	8000ee4 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e048      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d031      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d110      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2208      	movs	r2, #8
 80051ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f839 	bl	8005268 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2208      	movs	r2, #8
 80051fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e029      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005218:	d111      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f81f 	bl	8005268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e00f      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	429a      	cmp	r2, r3
 800525a:	d0a6      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b095      	sub	sp, #84	; 0x54
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	643b      	str	r3, [r7, #64]	; 0x40
 8005290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e6      	bne.n	8005270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3308      	adds	r3, #8
 80052a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <UART_EndRxTransfer+0xc8>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d118      	bne.n	8005310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 0310 	bic.w	r3, r3, #16
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	613b      	str	r3, [r7, #16]
   return(result);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005324:	bf00      	nop
 8005326:	3754      	adds	r7, #84	; 0x54
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	effffffe 	.word	0xeffffffe

08005334 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_UARTEx_DisableFifoMode+0x16>
 8005346:	2302      	movs	r3, #2
 8005348:	e027      	b.n	800539a <HAL_UARTEx_DisableFifoMode+0x66>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2224      	movs	r2, #36	; 0x24
 8005356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005378:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e02d      	b.n	800541a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2224      	movs	r2, #36	; 0x24
 80053ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f850 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005436:	2302      	movs	r3, #2
 8005438:	e02d      	b.n	8005496 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2224      	movs	r2, #36	; 0x24
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f812 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054c0:	e031      	b.n	8005526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054c2:	2310      	movs	r3, #16
 80054c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054c6:	2310      	movs	r3, #16
 80054c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	0e5b      	lsrs	r3, r3, #25
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	0f5b      	lsrs	r3, r3, #29
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	7b3a      	ldrb	r2, [r7, #12]
 80054ee:	4911      	ldr	r1, [pc, #68]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 80054f0:	5c8a      	ldrb	r2, [r1, r2]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054f6:	7b3a      	ldrb	r2, [r7, #12]
 80054f8:	490f      	ldr	r1, [pc, #60]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 80054fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	7b7a      	ldrb	r2, [r7, #13]
 800550c:	4909      	ldr	r1, [pc, #36]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 800550e:	5c8a      	ldrb	r2, [r1, r2]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005514:	7b7a      	ldrb	r2, [r7, #13]
 8005516:	4908      	ldr	r1, [pc, #32]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 8005518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800551a:	fb93 f3f2 	sdiv	r3, r3, r2
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	080058c8 	.word	0x080058c8
 8005538:	080058d0 	.word	0x080058d0

0800553c <memset>:
 800553c:	4402      	add	r2, r0
 800553e:	4603      	mov	r3, r0
 8005540:	4293      	cmp	r3, r2
 8005542:	d100      	bne.n	8005546 <memset+0xa>
 8005544:	4770      	bx	lr
 8005546:	f803 1b01 	strb.w	r1, [r3], #1
 800554a:	e7f9      	b.n	8005540 <memset+0x4>

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4d0d      	ldr	r5, [pc, #52]	; (8005584 <__libc_init_array+0x38>)
 8005550:	4c0d      	ldr	r4, [pc, #52]	; (8005588 <__libc_init_array+0x3c>)
 8005552:	1b64      	subs	r4, r4, r5
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	2600      	movs	r6, #0
 8005558:	42a6      	cmp	r6, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	4d0b      	ldr	r5, [pc, #44]	; (800558c <__libc_init_array+0x40>)
 800555e:	4c0c      	ldr	r4, [pc, #48]	; (8005590 <__libc_init_array+0x44>)
 8005560:	f000 f86a 	bl	8005638 <_init>
 8005564:	1b64      	subs	r4, r4, r5
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	2600      	movs	r6, #0
 800556a:	42a6      	cmp	r6, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f855 3b04 	ldr.w	r3, [r5], #4
 8005574:	4798      	blx	r3
 8005576:	3601      	adds	r6, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f855 3b04 	ldr.w	r3, [r5], #4
 800557e:	4798      	blx	r3
 8005580:	3601      	adds	r6, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	080058e0 	.word	0x080058e0
 8005588:	080058e0 	.word	0x080058e0
 800558c:	080058e0 	.word	0x080058e0
 8005590:	080058e4 	.word	0x080058e4

08005594 <memcpy>:
 8005594:	440a      	add	r2, r1
 8005596:	4291      	cmp	r1, r2
 8005598:	f100 33ff 	add.w	r3, r0, #4294967295
 800559c:	d100      	bne.n	80055a0 <memcpy+0xc>
 800559e:	4770      	bx	lr
 80055a0:	b510      	push	{r4, lr}
 80055a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055aa:	4291      	cmp	r1, r2
 80055ac:	d1f9      	bne.n	80055a2 <memcpy+0xe>
 80055ae:	bd10      	pop	{r4, pc}

080055b0 <round>:
 80055b0:	ee10 1a90 	vmov	r1, s1
 80055b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80055b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80055bc:	2b13      	cmp	r3, #19
 80055be:	b510      	push	{r4, lr}
 80055c0:	ee10 4a10 	vmov	r4, s0
 80055c4:	dc19      	bgt.n	80055fa <round+0x4a>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da09      	bge.n	80055de <round+0x2e>
 80055ca:	3301      	adds	r3, #1
 80055cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80055d0:	d103      	bne.n	80055da <round+0x2a>
 80055d2:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80055d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80055da:	2000      	movs	r0, #0
 80055dc:	e025      	b.n	800562a <round+0x7a>
 80055de:	4815      	ldr	r0, [pc, #84]	; (8005634 <round+0x84>)
 80055e0:	4118      	asrs	r0, r3
 80055e2:	ea01 0200 	and.w	r2, r1, r0
 80055e6:	4322      	orrs	r2, r4
 80055e8:	d00e      	beq.n	8005608 <round+0x58>
 80055ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80055ee:	fa42 f303 	asr.w	r3, r2, r3
 80055f2:	440b      	add	r3, r1
 80055f4:	ea23 0100 	bic.w	r1, r3, r0
 80055f8:	e7ef      	b.n	80055da <round+0x2a>
 80055fa:	2b33      	cmp	r3, #51	; 0x33
 80055fc:	dd05      	ble.n	800560a <round+0x5a>
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d101      	bne.n	8005608 <round+0x58>
 8005604:	ee30 0b00 	vadd.f64	d0, d0, d0
 8005608:	bd10      	pop	{r4, pc}
 800560a:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	40c2      	lsrs	r2, r0
 8005614:	4222      	tst	r2, r4
 8005616:	d0f7      	beq.n	8005608 <round+0x58>
 8005618:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800561c:	2001      	movs	r0, #1
 800561e:	4098      	lsls	r0, r3
 8005620:	1900      	adds	r0, r0, r4
 8005622:	bf28      	it	cs
 8005624:	3101      	addcs	r1, #1
 8005626:	ea20 0002 	bic.w	r0, r0, r2
 800562a:	460b      	mov	r3, r1
 800562c:	4602      	mov	r2, r0
 800562e:	ec43 2b10 	vmov	d0, r2, r3
 8005632:	e7e9      	b.n	8005608 <round+0x58>
 8005634:	000fffff 	.word	0x000fffff

08005638 <_init>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr

08005644 <_fini>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr
